{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/music.js","path":"js/music.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/musiclist.js","path":"js/musiclist.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.eot","path":"css/fonts/musicicon/icon.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.svg","path":"css/fonts/musicicon/icon.svg","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.ttf","path":"css/fonts/musicicon/icon.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.woff","path":"css/fonts/musicicon/icon.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/_config.yml","hash":"4c96113c85084856fc6786880badfbd421c4a5b4","modified":1494233582019},{"_id":"themes/indigo/README.md","hash":"a91710ebddfcbeee28ebdccbdd2688ddff8f1560","modified":1475330274800},{"_id":"themes/indigo/package.json","hash":"98a8e55a914d218ba26eb8a90a59076f6542a616","modified":1475330274815},{"_id":"source/_posts/20150321.md","hash":"4d180d8347ab4ff492fc898eb565aeefddc31633","modified":1475660170480},{"_id":"source/_posts/20150324.md","hash":"11d56ef942bc8a928375b6ebac8097ddc6695795","modified":1475657412554},{"_id":"source/_posts/20160813.md","hash":"41f287f9fda96c4971c322d6dd1200001218a724","modified":1475330274796},{"_id":"source/_posts/20160815.md","hash":"4149fdda2698a86c21024122a59940a34390b3ba","modified":1475985655884},{"_id":"source/_posts/20160910.md","hash":"7306d5187861f52e78b52ab6c5e21615a0b1a8b8","modified":1475330274796},{"_id":"source/_posts/20161009.md","hash":"83e3d64a1da556123d9b39aa596460af7b299b37","modified":1478156425285},{"_id":"source/_posts/20161104.md","hash":"c9ee6d8de0a104ccc3b7d8de8f25653428c90006","modified":1478240375126},{"_id":"source/_posts/20161110.md","hash":"74088b362958f7a44d79caf7f00f4183be6de983","modified":1478239806082},{"_id":"source/_posts/20161122.md","hash":"cc9bf0242f38ec1011e51263bc0fcef751d417b0","modified":1479800869073},{"_id":"source/_posts/20170409.md","hash":"08574333fde01e3d6aca4933ff5bf45f3b564441","modified":1491964564609},{"_id":"source/_posts/css-angel.md","hash":"52ce1f559cc6c43b9c6bd2efef7ff69265df1268","modified":1491377166028},{"_id":"source/resume/index.md","hash":"861026f9961717fd71744c017d58af0995b44cbc","modified":1475330274797},{"_id":"source/tags/index.md","hash":"152926910a3ecfcf6d689980ed0f66938b495b67","modified":1475330274797},{"_id":"source/webpages/index.md","hash":"8408cbd8b93484b1ec413cf7665295a0fe46e8e7","modified":1475330274798},{"_id":"source/webs/index.md","hash":"f87dc54d740dfdacb974008e5f5760656b9775e1","modified":1494235449116},{"_id":"themes/indigo/layout/archive.ejs","hash":"29dd0adde8415dc56032878d3286690e4b8cee66","modified":1475330274812},{"_id":"themes/indigo/layout/category.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1475330274812},{"_id":"themes/indigo/layout/index.ejs","hash":"08b1dd8e53de4516ae8dcb61a8bc9155ec0cbe46","modified":1475330274813},{"_id":"themes/indigo/layout/layout.ejs","hash":"415e249dc7c9da8fe496987b024b956dbcc419cf","modified":1475330274813},{"_id":"themes/indigo/layout/page.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1475330274813},{"_id":"themes/indigo/layout/post.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1475330274814},{"_id":"themes/indigo/layout/tag.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1475330274814},{"_id":"themes/indigo/layout/tags.ejs","hash":"f8e019f8183fc1771f18e344029bc8ecb86272e0","modified":1475330274815},{"_id":"themes/indigo/layout/webs.ejs","hash":"d64921569ad8c09342a496e3ede235106d4edc2e","modified":1494311129458},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"7afdde6be47fed7170444f93bdd62dde72c90fe3","modified":1475330274801},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"ca6944189b24444f1b7d976c68631977cb21ff4e","modified":1475330274801},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"dbee64698919aeaeb0923c44b3f8c5402c7b8fed","modified":1475330274802},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"72249b0eb3e468b38b073f652c89a7b9d477c94c","modified":1475330274802},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1475330274803},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"654cfb61eb6779d7d4d2dd5b31330fb251fa273b","modified":1475330274803},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"0f353bf87a124581d6632d328a018353d4a990a1","modified":1475330274804},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"b0cc61079b36dc9922f7a5694b853fe4d7148959","modified":1475330274804},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1475330274804},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"b82771c359969ddf3b384ab4aacdb1bacbb53377","modified":1475330274805},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"aaaf0975c985df530387bd48292c38bc4e0a8a93","modified":1475330274805},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"35a6dc954f331f09a068dbf7ee900d3049c52646","modified":1475330274806},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"ef121a738fd7f5c40a3d132acafd56ace2f5075c","modified":1475330274811},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"5b8d9b22a189ea0da4d2b04f409d68408712e36c","modified":1475330274812},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"3c4cfa78e1e2ee8128dd4a2f89d44460310fd014","modified":1475330274865},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1475330274867},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1475330274868},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1475330274868},{"_id":"themes/indigo/source/img/logo.jpg","hash":"a089e42acab93864d33e16801b0ac5dc1617c373","modified":1475330274869},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"c6a9ac7e03cf6b15728725b46dfda4773d9d0ef0","modified":1475330274870},{"_id":"themes/indigo/source/css/.project","hash":"fe9987cec2c9a6f2af1862706ea9590ea4544073","modified":1494234468493},{"_id":"themes/indigo/source/css/style.less","hash":"5707c57eecf3b7478b333223dc73681f3b1a064b","modified":1494235591715},{"_id":"themes/indigo/source/js/main.js","hash":"2e798ba8afe6f02fce9e7bb7288dabcaa1f9e621","modified":1475330274871},{"_id":"themes/indigo/source/js/music.js","hash":"1a54491bc494b078958c842bd54a1bdd7ef05765","modified":1475330274872},{"_id":"themes/indigo/source/js/musiclist.js","hash":"ba356605538b81a21789e0f26221642b79776724","modified":1475330274872},{"_id":"themes/indigo/source/js/search.js","hash":"c655a0a41bc478549f64a677e4daf7930f5363c3","modified":1475330274873},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1475330274807},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"4d25f0bf9d7dba72908a5819f17b9edcd7361d6c","modified":1475330274807},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"f9a8a0d99b39eec351c4effb2ad8508c8d2395ab","modified":1475330274807},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1475330274808},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1475330274808},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"fbb42e10a402555c54f94d8a7e9a03cb6a794f94","modified":1475330274809},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"e73dc0bb5be57e9b7d44a2e9eedc67a18672158b","modified":1475330274809},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"5728be1589a7533b10806982abe7ddb9bce23aa9","modified":1475330274810},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"60139e37b41769d218e5cf6f6040c41bd2293728","modified":1475330274810},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1475330274811},{"_id":"themes/indigo/source/css/_partial/.project","hash":"b42c21c448183ad760ba53d1227c0a3f3e97c8a4","modified":1494234431438},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"9bf953ae16b8796291ea49b4e60a5174cd787d07","modified":1475330274816},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"6c3c3129fd7d6bf7e43f965c7c7b453466135145","modified":1475330274817},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1475330274819},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"e78223bdd0d83db746c81f261378e109242eddd2","modified":1475330274819},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"4d225a6c7bb4bfec331893000f6a74f189d44ff9","modified":1475330274820},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5df4e258e2004df6c7b5a5d458368bfa2bd108ed","modified":1494309591074},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"0361039b2abdeb1b41e504fa437df962cda055d2","modified":1475330274820},{"_id":"themes/indigo/source/css/_partial/music.less","hash":"37f7b245a49f31ce8d56d6feddf3f89c40993d75","modified":1475330274821},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"298abc4a58fbd838145d0c036b1fb007f569cf20","modified":1475330274821},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"68e21650caeffa0575b3e720da91f235453362f3","modified":1475330274822},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1475330274823},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"01bb8da651c5123ab862660b4fd79235464e31c0","modified":1475330274823},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a57647250236ca57768bb687f20fc5f8deb55dd0","modified":1475330274824},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"36e77ccb39b080aab19d9d87fd20882d5ac84ee9","modified":1475330274824},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"d8d57c61f2407d01bc2c7882703f3c520b56d6a2","modified":1475330274825},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a8b41b0b0c8ff2f6cf95f7f9784611dd8c212ffe","modified":1475330274825},{"_id":"themes/indigo/source/css/_partial/webs.less","hash":"94ee5542a2ab7a2702890e0c8e0a067958332428","modified":1494309608268},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ffafe7c70131ce66d497c23fb455abd9aa367496","modified":1475330274818},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.eot","hash":"838c4fc829e5f6b9a543bc31e064ede0ebf4b084","modified":1475330274839},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.svg","hash":"f14601e5e2210b1e33503f580b1aa8bd63fb77fe","modified":1475330274839},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.ttf","hash":"734be1ebf7dc277cb4433e0a17e578e36145b5d1","modified":1475330274840},{"_id":"themes/indigo/source/css/fonts/musicicon/icon.woff","hash":"6295d6ca29964809cf87bfc70191a962c1cb1762","modified":1475330274840},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1475330274841},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1475330274844},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1475330274845},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1475330274846},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1475330274849},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1475330274850},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1475330274850},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1475330274853},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1475330274854},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1475330274855},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1475330274858},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1475330274859},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1475330274859},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1475330274863},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1475330274863},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1475330274828},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1475330274829},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1475330274837},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1475330274838},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1475330274843},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1475330274848},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1475330274852},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1475330274857},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1475330274862},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1475330274836},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1475330274833},{"_id":"public/atom.xml","hash":"4ba8871d1154c4a899914a2fb872ddc03b123749","modified":1494313793527},{"_id":"public/content.json","hash":"e9b04e4b98a22b55ba5027754bc055cf0a6c9ce2","modified":1494313793875},{"_id":"public/resume/index.html","hash":"fec2023f8b8861d92d33ede6db02d510dd39426f","modified":1494313793922},{"_id":"public/tags/index.html","hash":"09fe2c734d16ef1bf12b3faf01bf67d8ec2cc135","modified":1494313793922},{"_id":"public/webpages/index.html","hash":"9f18f4be2235e4fabb2ec1df3948872526e28e0c","modified":1494313793922},{"_id":"public/webs/index.html","hash":"352ea8240f24b17dd83cc72dd8626ae363ec27ca","modified":1494313793922},{"_id":"public/2016/10/09/20160815/index.html","hash":"a856016d4ee42d9b7468ad073b31e48aae4ee442","modified":1494313793922},{"_id":"public/2016/10/04/20161104/index.html","hash":"6b4e296b26c60051533716ec73ad06a0c9a2e137","modified":1494313793922},{"_id":"public/categories/css/index.html","hash":"df661edbd6a0a81885b54e597d4d00db4db6f9a6","modified":1494313793922},{"_id":"public/categories/html5/index.html","hash":"54bc691a1c7818961e59acd61c24c76068727e67","modified":1494313793922},{"_id":"public/categories/javascript/index.html","hash":"714f100b2902bb9d2f02295f5ddf9e89488ae0bd","modified":1494313793922},{"_id":"public/archives/index.html","hash":"f41516413ce66418e3c0f37c3f7979e662f8078b","modified":1494313793922},{"_id":"public/archives/page/2/index.html","hash":"ee77836444893f9d896ac77056eed1eacc14b721","modified":1494313793922},{"_id":"public/archives/2014/index.html","hash":"be96ac28759d63e6093c6d72e51bbe2d33340d85","modified":1494313793922},{"_id":"public/archives/2014/10/index.html","hash":"4b70ec2b398f472c99ad2d24d56836e0782c4bc9","modified":1494313793922},{"_id":"public/archives/2015/index.html","hash":"48cacce75810d694c4090fe854c53a08c9de65aa","modified":1494313793922},{"_id":"public/archives/2015/03/index.html","hash":"5de7f2357ada85dc27c4aec60c868297b3628905","modified":1494313793922},{"_id":"public/archives/2015/05/index.html","hash":"472bfdce97133f4c4f94ae16881925be1b0b039e","modified":1494313793923},{"_id":"public/archives/2016/index.html","hash":"e87138859d912d9e09f23721268c3ff60f50675e","modified":1494313793923},{"_id":"public/archives/2016/08/index.html","hash":"8921f9e2978310c4e954f1aa7a0344661f6c6084","modified":1494313793923},{"_id":"public/archives/2016/09/index.html","hash":"00c78603355b11c81e8a9c21cb34392692884186","modified":1494313793923},{"_id":"public/archives/2016/10/index.html","hash":"5888dcd1c4845a6acfd0b14738c76e2a254a6fd4","modified":1494313793923},{"_id":"public/archives/2016/11/index.html","hash":"6dcb4c2dc3440a3746a4d8fbdac3e973f0ce1cbb","modified":1494313793923},{"_id":"public/archives/2017/index.html","hash":"f4ed888e397192cdfff882c165067d1b87f427fb","modified":1494313793923},{"_id":"public/archives/2017/02/index.html","hash":"8beeb52097cb9b33ab08443f87dedb20f77d65b1","modified":1494313793923},{"_id":"public/archives/2017/04/index.html","hash":"06a0fc4a65e8a9ad110604b9f8c8abad05fb9fd9","modified":1494313793924},{"_id":"public/page/2/index.html","hash":"356767fe0b7335c576a9a60f58aef18df0f7b94c","modified":1494313793924},{"_id":"public/tags/css/index.html","hash":"13e9aadd279922e5d4265db687a5b2f183149de9","modified":1494313793924},{"_id":"public/tags/less/index.html","hash":"65fc340fe836adc2cbb27c3e7767e183e1633a83","modified":1494313793924},{"_id":"public/tags/html5/index.html","hash":"15d0b8d4a38debfd7089ad24cc8920d908f940ee","modified":1494313793924},{"_id":"public/tags/canvas/index.html","hash":"1ea04111d21b85e5fe4d59eec40dbf8be9bd91c1","modified":1494313793924},{"_id":"public/tags/jquery/index.html","hash":"069fb53eca017153cd2adbc3ebab7f06dd9246d8","modified":1494313793924},{"_id":"public/tags/javascript/index.html","hash":"9e4dc271398ba0b19991edbbe04c72589a1045c9","modified":1494313793924},{"_id":"public/tags/html/index.html","hash":"33be098a4f6063270597b246fe8561040cf35cd7","modified":1494313793924},{"_id":"public/tags/ES6/index.html","hash":"0d8bdffa723edb932fdd4bd2cc0ba74f49b83042","modified":1494313793924},{"_id":"public/tags/css3/index.html","hash":"954c4d00d8b0936b8eb4e5db78703618d5ad7c71","modified":1494313793924},{"_id":"public/2017/04/09/20170409/index.html","hash":"a3cb0c9440ae27db4778036d20feed0b2a82f7e6","modified":1494313793925},{"_id":"public/2017/02/15/css-angel/index.html","hash":"f39ed0baec7f9dae5b8d6079fafa0dadd6102f99","modified":1494313793925},{"_id":"public/2016/11/22/20161122/index.html","hash":"ca5f33513b89d393ff531284e1ce0c2819f94169","modified":1494313793925},{"_id":"public/2016/10/01/20161110/index.html","hash":"1a632d26e8378df9067ff01b09377c5e71b518d0","modified":1494313793925},{"_id":"public/2016/09/10/20160910/index.html","hash":"8a060d561ee872617fbf62a5deca395a5a22ab96","modified":1494313793925},{"_id":"public/2016/08/13/20160813/index.html","hash":"0adcc918ea80f837f333d726c4969612ae1ecfb8","modified":1494313793925},{"_id":"public/2015/05/01/20150321/index.html","hash":"88dd14d946fd090bc300f010d459aaca12b0d186","modified":1494313793925},{"_id":"public/2015/03/24/20150324/index.html","hash":"6093a8f630d33d3059e70861f11252150f681acc","modified":1494313793925},{"_id":"public/2014/10/09/20161009/index.html","hash":"d4416392f51ae72ddc3d46759f5329c478789901","modified":1494313793925},{"_id":"public/index.html","hash":"21650f5b1159645be86e37304a9467c6c7685a7d","modified":1494313793925},{"_id":"public/img/alipay.jpg","hash":"3c4cfa78e1e2ee8128dd4a2f89d44460310fd014","modified":1494313793973},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1494313793973},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1494313793973},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1494313793973},{"_id":"public/img/logo.jpg","hash":"a089e42acab93864d33e16801b0ac5dc1617c373","modified":1494313793973},{"_id":"public/img/wechat.jpg","hash":"c6a9ac7e03cf6b15728725b46dfda4773d9d0ef0","modified":1494313793973},{"_id":"public/css/fonts/musicicon/icon.eot","hash":"838c4fc829e5f6b9a543bc31e064ede0ebf4b084","modified":1494313793974},{"_id":"public/css/fonts/musicicon/icon.svg","hash":"f14601e5e2210b1e33503f580b1aa8bd63fb77fe","modified":1494313793974},{"_id":"public/css/fonts/musicicon/icon.ttf","hash":"734be1ebf7dc277cb4433e0a17e578e36145b5d1","modified":1494313793974},{"_id":"public/css/fonts/musicicon/icon.woff","hash":"6295d6ca29964809cf87bfc70191a962c1cb1762","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1494313793974},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1494313793975},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1494313793975},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1494313794025},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1494313794026},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1494313794026},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1494313794026},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1494313794026},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1494313794026},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1494313794026},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1494313794026},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1494313794027},{"_id":"public/js/main.js","hash":"e00d6fc636c85417057df2d3dae6fd11c7d955dd","modified":1494313794039},{"_id":"public/js/music.js","hash":"547ff2095aee6b2854cbe4fa1821d70fac97b33b","modified":1494313794039},{"_id":"public/js/musiclist.js","hash":"9c12adcef9b145b0e209c8f32dc486487b0593b6","modified":1494313794039},{"_id":"public/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1494313794039},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1494313794039},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1494313794063},{"_id":"public/css/style.css","hash":"8946966a9c47dcadd910b64c0290cdd26a617de2","modified":1494313794485}],"Category":[{"name":"css","_id":"cj2h7ulo40002b8fs3hcmuqim"},{"name":"html5","_id":"cj2h7uloh0007b8fswz7bgzrg"},{"name":"javascript","_id":"cj2h7uloz000lb8fs61w7g8yx"}],"Data":[],"Page":[{"title":"resume","date":"2016-09-24T02:49:15.000Z","_content":"","source":"resume/index.md","raw":"---\ntitle: resume\ndate: 2016-09-24 10:49:15\n---\n","updated":"2016-10-01T13:57:54.797Z","path":"resume/index.html","comments":1,"layout":"page","_id":"cj2h7ulqs001wb8fsl7nwzsij","content":"","excerpt":"","more":""},{"layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\nnoDate: true\ncomments: false\n---\n","date":"2016-10-01T13:57:54.797Z","updated":"2016-10-01T13:57:54.797Z","path":"tags/index.html","title":"","_id":"cj2h7ulqt001xb8fsw5j6mwru","content":"","excerpt":"","more":""},{"title":"webpages","noDate":true,"comments":0,"_content":"","source":"webpages/index.md","raw":"---\ntitle: webpages\nnoDate: true\ncomments: false\n---\n","date":"2016-10-01T13:57:54.798Z","updated":"2016-10-01T13:57:54.798Z","path":"webpages/index.html","layout":"page","_id":"cj2h7ulqx001yb8fsi9iri7lq","content":"","excerpt":"","more":""},{"layout":"webs","noDate":true,"comments":0,"_content":"","source":"webs/index.md","raw":"---\nlayout: webs\nnoDate: true\ncomments: false\n---\n","date":"2017-05-08T09:24:09.116Z","updated":"2017-05-08T09:24:09.116Z","path":"webs/index.html","title":"","_id":"cj2h7ulqz001zb8fss87hiu9k","content":"","excerpt":"","more":""}],"Post":[{"title":"less中使用css3的calc的正确写法","date":"2015-05-01T13:17:23.000Z","comments":1,"_content":"作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。\n### 普通计算\n最近在写自己的网站的时候，由于对less的认识不深入，写了以下代码：\n```\n@endwidth:calc(50% - 50px);\n```\n结果，less编译的时候把这玩意当成运算式给直接计算了，成了\n```\n@endwidth:calc(0%);\n```\n于是，去查了一下less的用法才发现，原来是less的运算和calc的用法有重叠。所以应该把less编译这一次的计算给去掉。\n正确写法应该是：\n```\n@endwidth:calc(~\"50% - 50px\");\n```\n也就是在calc里面加上 ~ 。\n### 有变量参与计算\n以上是可以了，担是当把 50px 换成另一个变量时，又编译出错了。也就是这样：\n```\nleft: calc(~\"50% + @endwidth\" );\n```\n由于 ~ 能把less编译的这一次计算给去掉，而 @endwith 的值，需要计算两次，所以在去掉的时候，对@endwidth的计算不能去掉。\n所以应该把 @endwidth 放在 ~ 的范围外面。\n```\nleft: calc(~\"50% +\" @endwidth);\n```\n### 多变量连续计算\n有了上面的解析，多变量计算就明白了，如下：\n```\n@gap:10px;\n.init(@i)\n{\n    left:calc(~\"50% -\"  @gap * @i ~\"-\" (@i * 2) * 50px) ;\n}\n.box{\n\t.init(2);\n}\n```\n也就是，对需要去掉一次计算的(包括计算符)，需要放在 ~ 中，而需要在less编译的时候就计算一次的变量(或者常值)，直接放在 ~ 的范围外面。\n编译结果，在css文件中可以看到：\n```\n.box{\n\tleft:calc( 50% - 200px )\n}\n```\n### 总结\ncalc是css3中一个非常有用的东东，但与less配合使用的时候，需要注意less编译时候的计算问题，根据需要是否需要去掉。其作法就是在不需要less编译的部分使用 ~ 包裹起来，而需要计算的则放在 ~ 的外在，特别需要注意的是运算符是否也需要包含。\n","source":"_posts/20150321.md","raw":"---\ntitle: less中使用css3的calc的正确写法\ndate: 2015-05-01 21:17:23\ncategories: \n\t- css\ntags: \n\t- css \n\t- less\n\ncomments: true\n---\n作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。\n### 普通计算\n最近在写自己的网站的时候，由于对less的认识不深入，写了以下代码：\n```\n@endwidth:calc(50% - 50px);\n```\n结果，less编译的时候把这玩意当成运算式给直接计算了，成了\n```\n@endwidth:calc(0%);\n```\n于是，去查了一下less的用法才发现，原来是less的运算和calc的用法有重叠。所以应该把less编译这一次的计算给去掉。\n正确写法应该是：\n```\n@endwidth:calc(~\"50% - 50px\");\n```\n也就是在calc里面加上 ~ 。\n### 有变量参与计算\n以上是可以了，担是当把 50px 换成另一个变量时，又编译出错了。也就是这样：\n```\nleft: calc(~\"50% + @endwidth\" );\n```\n由于 ~ 能把less编译的这一次计算给去掉，而 @endwith 的值，需要计算两次，所以在去掉的时候，对@endwidth的计算不能去掉。\n所以应该把 @endwidth 放在 ~ 的范围外面。\n```\nleft: calc(~\"50% +\" @endwidth);\n```\n### 多变量连续计算\n有了上面的解析，多变量计算就明白了，如下：\n```\n@gap:10px;\n.init(@i)\n{\n    left:calc(~\"50% -\"  @gap * @i ~\"-\" (@i * 2) * 50px) ;\n}\n.box{\n\t.init(2);\n}\n```\n也就是，对需要去掉一次计算的(包括计算符)，需要放在 ~ 中，而需要在less编译的时候就计算一次的变量(或者常值)，直接放在 ~ 的范围外面。\n编译结果，在css文件中可以看到：\n```\n.box{\n\tleft:calc( 50% - 200px )\n}\n```\n### 总结\ncalc是css3中一个非常有用的东东，但与less配合使用的时候，需要注意less编译时候的计算问题，根据需要是否需要去掉。其作法就是在不需要less编译的部分使用 ~ 包裹起来，而需要计算的则放在 ~ 的外在，特别需要注意的是运算符是否也需要包含。\n","slug":"20150321","published":1,"updated":"2016-10-05T09:36:10.480Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulnv0000b8fs78di6q5r","content":"<p>作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。</p>\n<h3 id=\"普通计算\"><a href=\"#普通计算\" class=\"headerlink\" title=\"普通计算\"></a>普通计算</h3><p>最近在写自己的网站的时候，由于对less的认识不深入，写了以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@endwidth:calc(50% - 50px);</div></pre></td></tr></table></figure></p>\n<p>结果，less编译的时候把这玩意当成运算式给直接计算了，成了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@endwidth:calc(0%);</div></pre></td></tr></table></figure></p>\n<p>于是，去查了一下less的用法才发现，原来是less的运算和calc的用法有重叠。所以应该把less编译这一次的计算给去掉。<br>正确写法应该是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@endwidth:calc(~&quot;50% - 50px&quot;);</div></pre></td></tr></table></figure></p>\n<p>也就是在calc里面加上 ~ 。</p>\n<h3 id=\"有变量参与计算\"><a href=\"#有变量参与计算\" class=\"headerlink\" title=\"有变量参与计算\"></a>有变量参与计算</h3><p>以上是可以了，担是当把 50px 换成另一个变量时，又编译出错了。也就是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">left: calc(~&quot;50% + @endwidth&quot; );</div></pre></td></tr></table></figure></p>\n<p>由于 ~ 能把less编译的这一次计算给去掉，而 @endwith 的值，需要计算两次，所以在去掉的时候，对@endwidth的计算不能去掉。<br>所以应该把 @endwidth 放在 ~ 的范围外面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">left: calc(~&quot;50% +&quot; @endwidth);</div></pre></td></tr></table></figure></p>\n<h3 id=\"多变量连续计算\"><a href=\"#多变量连续计算\" class=\"headerlink\" title=\"多变量连续计算\"></a>多变量连续计算</h3><p>有了上面的解析，多变量计算就明白了，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@gap:10px;</div><div class=\"line\">.init(@i)</div><div class=\"line\">&#123;</div><div class=\"line\">    left:calc(~&quot;50% -&quot;  @gap * @i ~&quot;-&quot; (@i * 2) * 50px) ;</div><div class=\"line\">&#125;</div><div class=\"line\">.box&#123;</div><div class=\"line\">\t.init(2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也就是，对需要去掉一次计算的(包括计算符)，需要放在 ~ 中，而需要在less编译的时候就计算一次的变量(或者常值)，直接放在 ~ 的范围外面。<br>编译结果，在css文件中可以看到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tleft:calc( 50% - 200px )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>calc是css3中一个非常有用的东东，但与less配合使用的时候，需要注意less编译时候的计算问题，根据需要是否需要去掉。其作法就是在不需要less编译的部分使用 ~ 包裹起来，而需要计算的则放在 ~ 的外在，特别需要注意的是运算符是否也需要包含。</p>\n","excerpt":"","more":"<p>作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。</p>\n<h3 id=\"普通计算\"><a href=\"#普通计算\" class=\"headerlink\" title=\"普通计算\"></a>普通计算</h3><p>最近在写自己的网站的时候，由于对less的认识不深入，写了以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@endwidth:calc(50% - 50px);</div></pre></td></tr></table></figure></p>\n<p>结果，less编译的时候把这玩意当成运算式给直接计算了，成了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@endwidth:calc(0%);</div></pre></td></tr></table></figure></p>\n<p>于是，去查了一下less的用法才发现，原来是less的运算和calc的用法有重叠。所以应该把less编译这一次的计算给去掉。<br>正确写法应该是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@endwidth:calc(~&quot;50% - 50px&quot;);</div></pre></td></tr></table></figure></p>\n<p>也就是在calc里面加上 ~ 。</p>\n<h3 id=\"有变量参与计算\"><a href=\"#有变量参与计算\" class=\"headerlink\" title=\"有变量参与计算\"></a>有变量参与计算</h3><p>以上是可以了，担是当把 50px 换成另一个变量时，又编译出错了。也就是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">left: calc(~&quot;50% + @endwidth&quot; );</div></pre></td></tr></table></figure></p>\n<p>由于 ~ 能把less编译的这一次计算给去掉，而 @endwith 的值，需要计算两次，所以在去掉的时候，对@endwidth的计算不能去掉。<br>所以应该把 @endwidth 放在 ~ 的范围外面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">left: calc(~&quot;50% +&quot; @endwidth);</div></pre></td></tr></table></figure></p>\n<h3 id=\"多变量连续计算\"><a href=\"#多变量连续计算\" class=\"headerlink\" title=\"多变量连续计算\"></a>多变量连续计算</h3><p>有了上面的解析，多变量计算就明白了，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@gap:10px;</div><div class=\"line\">.init(@i)</div><div class=\"line\">&#123;</div><div class=\"line\">    left:calc(~&quot;50% -&quot;  @gap * @i ~&quot;-&quot; (@i * 2) * 50px) ;</div><div class=\"line\">&#125;</div><div class=\"line\">.box&#123;</div><div class=\"line\">\t.init(2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也就是，对需要去掉一次计算的(包括计算符)，需要放在 ~ 中，而需要在less编译的时候就计算一次的变量(或者常值)，直接放在 ~ 的范围外面。<br>编译结果，在css文件中可以看到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tleft:calc( 50% - 200px )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>calc是css3中一个非常有用的东东，但与less配合使用的时候，需要注意less编译时候的计算问题，根据需要是否需要去掉。其作法就是在不需要less编译的部分使用 ~ 包裹起来，而需要计算的则放在 ~ 的外在，特别需要注意的是运算符是否也需要包含。</p>\n"},{"title":"html5-canvas-模仿绘制360水晶球形进度条","date":"2016-09-10T02:07:07.000Z","comments":1,"_content":"### 使用场景\n使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-ball.png\"  width=\"200\"/>\n</div>\n### 绘制过程\n##### 画外边的白色圆框\n```\n ctx.arc(250, 250, 100, 0, Math.PI * 2, false);\n ctx.strokeStyle = '#fff';  \n ctx.lineWidth = \"10\";\n```\n##### 画里面的红色圆\n```\nctx.arc(250, 250, 100, 0, Math.PI * 2, false);\nctx.fillStyle = \"red\";\nctx.fill();\n```\n##### 画下面的绿色部分\n```\n var ac =  (r - n * (2*r/10)) / r ;\n var ang1 = Math.asin(ac)  ;\n var ang2 = Math.PI - ang1 ;\n var canvas = document.getElementById(\"canvas\");\n var ctx = canvas.getContext(\"2d\");\n ctx.beginPath();\n ctx.arc(250, 250, 100, ang1, ang2 , false);\n```\n但这只能画出一个水平的，其中r为半径，n为当前的进度转化成 10 以内的数，比如80%，对应着 8 。\n要画出下面波浪，还需要在下方使用一条二次贝塞尔曲线对路径进行封闭，并使用由下向上的线性渐变进行填充。\n```\nctx.bezierCurveTo(cx1,cy1,cx2,cy2,ex,by);\nvar landStyle = ctx.createLinearGradient(250 ,250 + 1.2*r ,250,250 - 1.2*r);\nlandStyle.addColorStop(0,\"#580\");\nlandStyle.addColorStop(1,\"#030\");\nctx.fillStyle = landStyle;\n```\n##### 动态画进度数字\n```\nctx.beginPath();\ntxt =  n * 10 + '%';\nctx.font=\"30px Verdana\";\nctx.lineWidth = \"1\";\nctx.clearRect(250 - 0.35*r , 250 + 1.5 * r - 30, 100, 40);\nctx.fillStyle = \"#fff\" ;\nctx.fillText(txt,250 - 0.35*r , 250 + 1.5*r);\n```\n至此四步，一个水晶进度就画完了，自己也可以再做些美化，基本思路就是这样。重点是对贝塞尔曲线的位置计算。\n\n### 演示地址：\n\n### GitHub地址：","source":"_posts/20160910.md","raw":"---\ntitle: html5-canvas-模仿绘制360水晶球形进度条\ndate: 2016-09-10 10:07:07\ncategories: \n\t- html5\ntags: \n\t- html5 \n\t- canvas\n\ncomments: true\n---\n### 使用场景\n使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-ball.png\"  width=\"200\"/>\n</div>\n### 绘制过程\n##### 画外边的白色圆框\n```\n ctx.arc(250, 250, 100, 0, Math.PI * 2, false);\n ctx.strokeStyle = '#fff';  \n ctx.lineWidth = \"10\";\n```\n##### 画里面的红色圆\n```\nctx.arc(250, 250, 100, 0, Math.PI * 2, false);\nctx.fillStyle = \"red\";\nctx.fill();\n```\n##### 画下面的绿色部分\n```\n var ac =  (r - n * (2*r/10)) / r ;\n var ang1 = Math.asin(ac)  ;\n var ang2 = Math.PI - ang1 ;\n var canvas = document.getElementById(\"canvas\");\n var ctx = canvas.getContext(\"2d\");\n ctx.beginPath();\n ctx.arc(250, 250, 100, ang1, ang2 , false);\n```\n但这只能画出一个水平的，其中r为半径，n为当前的进度转化成 10 以内的数，比如80%，对应着 8 。\n要画出下面波浪，还需要在下方使用一条二次贝塞尔曲线对路径进行封闭，并使用由下向上的线性渐变进行填充。\n```\nctx.bezierCurveTo(cx1,cy1,cx2,cy2,ex,by);\nvar landStyle = ctx.createLinearGradient(250 ,250 + 1.2*r ,250,250 - 1.2*r);\nlandStyle.addColorStop(0,\"#580\");\nlandStyle.addColorStop(1,\"#030\");\nctx.fillStyle = landStyle;\n```\n##### 动态画进度数字\n```\nctx.beginPath();\ntxt =  n * 10 + '%';\nctx.font=\"30px Verdana\";\nctx.lineWidth = \"1\";\nctx.clearRect(250 - 0.35*r , 250 + 1.5 * r - 30, 100, 40);\nctx.fillStyle = \"#fff\" ;\nctx.fillText(txt,250 - 0.35*r , 250 + 1.5*r);\n```\n至此四步，一个水晶进度就画完了，自己也可以再做些美化，基本思路就是这样。重点是对贝塞尔曲线的位置计算。\n\n### 演示地址：\n\n### GitHub地址：","slug":"20160910","published":1,"updated":"2016-10-01T13:57:54.796Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulo00001b8fsulywm34z","content":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示</p>\n<p><div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-ball.png\" width=\"200\"><br></div></p>\n<h3 id=\"绘制过程\"><a href=\"#绘制过程\" class=\"headerlink\" title=\"绘制过程\"></a>绘制过程</h3><h5 id=\"画外边的白色圆框\"><a href=\"#画外边的白色圆框\" class=\"headerlink\" title=\"画外边的白色圆框\"></a>画外边的白色圆框</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(250, 250, 100, 0, Math.PI * 2, false);</div><div class=\"line\">ctx.strokeStyle = &apos;#fff&apos;;  </div><div class=\"line\">ctx.lineWidth = &quot;10&quot;;</div></pre></td></tr></table></figure>\n<h5 id=\"画里面的红色圆\"><a href=\"#画里面的红色圆\" class=\"headerlink\" title=\"画里面的红色圆\"></a>画里面的红色圆</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(250, 250, 100, 0, Math.PI * 2, false);</div><div class=\"line\">ctx.fillStyle = &quot;red&quot;;</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h5 id=\"画下面的绿色部分\"><a href=\"#画下面的绿色部分\" class=\"headerlink\" title=\"画下面的绿色部分\"></a>画下面的绿色部分</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ac =  (r - n * (2*r/10)) / r ;</div><div class=\"line\">var ang1 = Math.asin(ac)  ;</div><div class=\"line\">var ang2 = Math.PI - ang1 ;</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&quot;2d&quot;);</div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(250, 250, 100, ang1, ang2 , false);</div></pre></td></tr></table></figure>\n<p>但这只能画出一个水平的，其中r为半径，n为当前的进度转化成 10 以内的数，比如80%，对应着 8 。<br>要画出下面波浪，还需要在下方使用一条二次贝塞尔曲线对路径进行封闭，并使用由下向上的线性渐变进行填充。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.bezierCurveTo(cx1,cy1,cx2,cy2,ex,by);</div><div class=\"line\">var landStyle = ctx.createLinearGradient(250 ,250 + 1.2*r ,250,250 - 1.2*r);</div><div class=\"line\">landStyle.addColorStop(0,&quot;#580&quot;);</div><div class=\"line\">landStyle.addColorStop(1,&quot;#030&quot;);</div><div class=\"line\">ctx.fillStyle = landStyle;</div></pre></td></tr></table></figure></p>\n<h5 id=\"动态画进度数字\"><a href=\"#动态画进度数字\" class=\"headerlink\" title=\"动态画进度数字\"></a>动态画进度数字</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.beginPath();</div><div class=\"line\">txt =  n * 10 + &apos;%&apos;;</div><div class=\"line\">ctx.font=&quot;30px Verdana&quot;;</div><div class=\"line\">ctx.lineWidth = &quot;1&quot;;</div><div class=\"line\">ctx.clearRect(250 - 0.35*r , 250 + 1.5 * r - 30, 100, 40);</div><div class=\"line\">ctx.fillStyle = &quot;#fff&quot; ;</div><div class=\"line\">ctx.fillText(txt,250 - 0.35*r , 250 + 1.5*r);</div></pre></td></tr></table></figure>\n<p>至此四步，一个水晶进度就画完了，自己也可以再做些美化，基本思路就是这样。重点是对贝塞尔曲线的位置计算。</p>\n<h3 id=\"演示地址：\"><a href=\"#演示地址：\" class=\"headerlink\" title=\"演示地址：\"></a>演示地址：</h3><h3 id=\"GitHub地址：\"><a href=\"#GitHub地址：\" class=\"headerlink\" title=\"GitHub地址：\"></a>GitHub地址：</h3>","excerpt":"","more":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示</p>\n<p><div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-ball.png\"  width=\"200\"/><br></div></p>\n<h3 id=\"绘制过程\"><a href=\"#绘制过程\" class=\"headerlink\" title=\"绘制过程\"></a>绘制过程</h3><h5 id=\"画外边的白色圆框\"><a href=\"#画外边的白色圆框\" class=\"headerlink\" title=\"画外边的白色圆框\"></a>画外边的白色圆框</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(250, 250, 100, 0, Math.PI * 2, false);</div><div class=\"line\">ctx.strokeStyle = &apos;#fff&apos;;  </div><div class=\"line\">ctx.lineWidth = &quot;10&quot;;</div></pre></td></tr></table></figure>\n<h5 id=\"画里面的红色圆\"><a href=\"#画里面的红色圆\" class=\"headerlink\" title=\"画里面的红色圆\"></a>画里面的红色圆</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(250, 250, 100, 0, Math.PI * 2, false);</div><div class=\"line\">ctx.fillStyle = &quot;red&quot;;</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h5 id=\"画下面的绿色部分\"><a href=\"#画下面的绿色部分\" class=\"headerlink\" title=\"画下面的绿色部分\"></a>画下面的绿色部分</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ac =  (r - n * (2*r/10)) / r ;</div><div class=\"line\">var ang1 = Math.asin(ac)  ;</div><div class=\"line\">var ang2 = Math.PI - ang1 ;</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&quot;2d&quot;);</div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.arc(250, 250, 100, ang1, ang2 , false);</div></pre></td></tr></table></figure>\n<p>但这只能画出一个水平的，其中r为半径，n为当前的进度转化成 10 以内的数，比如80%，对应着 8 。<br>要画出下面波浪，还需要在下方使用一条二次贝塞尔曲线对路径进行封闭，并使用由下向上的线性渐变进行填充。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.bezierCurveTo(cx1,cy1,cx2,cy2,ex,by);</div><div class=\"line\">var landStyle = ctx.createLinearGradient(250 ,250 + 1.2*r ,250,250 - 1.2*r);</div><div class=\"line\">landStyle.addColorStop(0,&quot;#580&quot;);</div><div class=\"line\">landStyle.addColorStop(1,&quot;#030&quot;);</div><div class=\"line\">ctx.fillStyle = landStyle;</div></pre></td></tr></table></figure></p>\n<h5 id=\"动态画进度数字\"><a href=\"#动态画进度数字\" class=\"headerlink\" title=\"动态画进度数字\"></a>动态画进度数字</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.beginPath();</div><div class=\"line\">txt =  n * 10 + &apos;%&apos;;</div><div class=\"line\">ctx.font=&quot;30px Verdana&quot;;</div><div class=\"line\">ctx.lineWidth = &quot;1&quot;;</div><div class=\"line\">ctx.clearRect(250 - 0.35*r , 250 + 1.5 * r - 30, 100, 40);</div><div class=\"line\">ctx.fillStyle = &quot;#fff&quot; ;</div><div class=\"line\">ctx.fillText(txt,250 - 0.35*r , 250 + 1.5*r);</div></pre></td></tr></table></figure>\n<p>至此四步，一个水晶进度就画完了，自己也可以再做些美化，基本思路就是这样。重点是对贝塞尔曲线的位置计算。</p>\n<h3 id=\"演示地址：\"><a href=\"#演示地址：\" class=\"headerlink\" title=\"演示地址：\"></a>演示地址：</h3><h3 id=\"GitHub地址：\"><a href=\"#GitHub地址：\" class=\"headerlink\" title=\"GitHub地址：\"></a>GitHub地址：</h3>"},{"title":"Html5-canvas-绘制圆环渐变进度条","date":"2016-08-13T07:22:05.000Z","comments":1,"_content":"### 使用场景\n项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。\n### 思路\ncanvas的api中已提供了两种，径向和线性渐变，并没有这种环形的渐变，所以很容易画出对称渐变。但是canvas提供了使用Pattern来绘制，Pattern可以是图片等其它对像，那么这里就使用到这个api，需要使用一张环形渐变的图像来绘制非对称渐变。\n### 绘制对称环形渐变\n这里使用的（水平）线性渐变。先使用createLinearGradient创建渐变，然后使用strokeStyle进行设置，然后使用stroke绘制。\n```\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext('2d');\nctx.lineWidth = 5;\n\nctx.beginPath(); \nctx.moveTo(170, 120);\n\nvar grd=ctx.createLinearGradient(0,0,170,0);\ngrd.addColorStop(\"0\",\"black\");\ngrd.addColorStop(\"0.3\",\"magenta\");\ngrd.addColorStop(\"0.5\",\"blue\");\ngrd.addColorStop(\"0.6\",\"green\");\ngrd.addColorStop(\"0.8\",\"yellow\");\ngrd.addColorStop(1,\"red\");\n\nctx.strokeStyle = grd;\nctx.arc(120, 120, 50, 0 ,Math.PI*2);\nctx.stroke(); // 画圆\n```\n效果如下：\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle2.png\"  width=\"200\"/>\n</div>\n\n### 绘制非对称环形渐变\n先使用ps制作一张环形渐变的图片。实现代码如下：\n```\nvar canvas = document.getElementById(\"canvas2\");\nvar ctx2 = canvas.getContext('2d');\nctx2.lineWidth = 5;\n\nvar img;\nimg = new Image();\nimg.src = \"./canvas.png\";\n\nif (img.complete) {\n   setImageFill();\n} else {\n   img.onload = setImageFill;\n}\n\nvar newFill = null;\nfunction setImageFill() {\n    newFill = ctx2.createPattern(img, 'no-repeat');\n    ctx.beginPath();\n    ctx.strokeStyle = newFill;\n    ctx.arc(50, 50, 46, 0, Math.PI*2, false);\n    ctx.stroke();\n}\n```\n效果如下：\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle3.png\"  width=\"200\"/>\n</div>\n效果已经基本上出现了，下面还需要让其动起来。\n### 动态绘制\n其实就是添加一个动态函数，在这里使用html5新添加的requestAnimationFrame，这个函数有兼容性的考虑，需要注意！这里不做处理！\n代码如下：\n```\nvar canvas = document.getElementById(\"canvas2\");\nvar ctx2 = canvas.getContext('2d');\nctx2.lineWidth = 5;\nctx2.lineCap=\"round\";\n\nvar img;\nimg = new Image();\nimg.src = \"canvas.png\";\n\nif (img.complete) {\n       setImageFill();\n    } else {\n       img.onload = setImageFill;\n    }\n\n    var newFill = null;\n    function setImageFill() {\n    \tnewFill = ctx2.createPattern(img, 'no-repeat');\n    \tdrawCircle(ctx2, 0,50);\n    }\n    var stop = null ;\n    function drawCircle(ctx, x, end) {\n        ctx.clearRect(0, 0, 300, 300);\n        ctx.beginPath();\n        ctx.strokeStyle = newFill;\n        if (x < Math.PI*2*end/100) {\n            x += Math.PI/100;\n        } else {\n             window.cancelAnimationFrame(stop)\n        }\n        ctx.arc(50, 50, 46, 0, x, false);\n        ctx.stroke();\n        stop = requestAnimationFrame(function () {\n            drawCircle(ctx, x ,end);\n        });\n    }\n\t\n```\n其中的drawCircle第三个参数就是对应的值。\n效果如下：\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle4.png\" width=\"200\"/>\n</div>\n### 演示地址\n[点击演示](http://wslover.byethost11.com/canvas/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/index2.html)\n[Github](https://github.com/wsDever/canvas/tree/master/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1)\n","source":"_posts/20160813.md","raw":"---\ntitle: Html5-canvas-绘制圆环渐变进度条\ndate: 2016-08-13 15:22:05\ncategories: \n\t- html5\ntags: \n\t- html5 \n\t- canvas\n\ncomments: true\n---\n### 使用场景\n项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。\n### 思路\ncanvas的api中已提供了两种，径向和线性渐变，并没有这种环形的渐变，所以很容易画出对称渐变。但是canvas提供了使用Pattern来绘制，Pattern可以是图片等其它对像，那么这里就使用到这个api，需要使用一张环形渐变的图像来绘制非对称渐变。\n### 绘制对称环形渐变\n这里使用的（水平）线性渐变。先使用createLinearGradient创建渐变，然后使用strokeStyle进行设置，然后使用stroke绘制。\n```\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext('2d');\nctx.lineWidth = 5;\n\nctx.beginPath(); \nctx.moveTo(170, 120);\n\nvar grd=ctx.createLinearGradient(0,0,170,0);\ngrd.addColorStop(\"0\",\"black\");\ngrd.addColorStop(\"0.3\",\"magenta\");\ngrd.addColorStop(\"0.5\",\"blue\");\ngrd.addColorStop(\"0.6\",\"green\");\ngrd.addColorStop(\"0.8\",\"yellow\");\ngrd.addColorStop(1,\"red\");\n\nctx.strokeStyle = grd;\nctx.arc(120, 120, 50, 0 ,Math.PI*2);\nctx.stroke(); // 画圆\n```\n效果如下：\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle2.png\"  width=\"200\"/>\n</div>\n\n### 绘制非对称环形渐变\n先使用ps制作一张环形渐变的图片。实现代码如下：\n```\nvar canvas = document.getElementById(\"canvas2\");\nvar ctx2 = canvas.getContext('2d');\nctx2.lineWidth = 5;\n\nvar img;\nimg = new Image();\nimg.src = \"./canvas.png\";\n\nif (img.complete) {\n   setImageFill();\n} else {\n   img.onload = setImageFill;\n}\n\nvar newFill = null;\nfunction setImageFill() {\n    newFill = ctx2.createPattern(img, 'no-repeat');\n    ctx.beginPath();\n    ctx.strokeStyle = newFill;\n    ctx.arc(50, 50, 46, 0, Math.PI*2, false);\n    ctx.stroke();\n}\n```\n效果如下：\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle3.png\"  width=\"200\"/>\n</div>\n效果已经基本上出现了，下面还需要让其动起来。\n### 动态绘制\n其实就是添加一个动态函数，在这里使用html5新添加的requestAnimationFrame，这个函数有兼容性的考虑，需要注意！这里不做处理！\n代码如下：\n```\nvar canvas = document.getElementById(\"canvas2\");\nvar ctx2 = canvas.getContext('2d');\nctx2.lineWidth = 5;\nctx2.lineCap=\"round\";\n\nvar img;\nimg = new Image();\nimg.src = \"canvas.png\";\n\nif (img.complete) {\n       setImageFill();\n    } else {\n       img.onload = setImageFill;\n    }\n\n    var newFill = null;\n    function setImageFill() {\n    \tnewFill = ctx2.createPattern(img, 'no-repeat');\n    \tdrawCircle(ctx2, 0,50);\n    }\n    var stop = null ;\n    function drawCircle(ctx, x, end) {\n        ctx.clearRect(0, 0, 300, 300);\n        ctx.beginPath();\n        ctx.strokeStyle = newFill;\n        if (x < Math.PI*2*end/100) {\n            x += Math.PI/100;\n        } else {\n             window.cancelAnimationFrame(stop)\n        }\n        ctx.arc(50, 50, 46, 0, x, false);\n        ctx.stroke();\n        stop = requestAnimationFrame(function () {\n            drawCircle(ctx, x ,end);\n        });\n    }\n\t\n```\n其中的drawCircle第三个参数就是对应的值。\n效果如下：\n<div class=\"img-box\">\n<img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle4.png\" width=\"200\"/>\n</div>\n### 演示地址\n[点击演示](http://wslover.byethost11.com/canvas/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/index2.html)\n[Github](https://github.com/wsDever/canvas/tree/master/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1)\n","slug":"20160813","published":1,"updated":"2016-10-01T13:57:54.796Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulo70004b8fs6m7kw431","content":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>canvas的api中已提供了两种，径向和线性渐变，并没有这种环形的渐变，所以很容易画出对称渐变。但是canvas提供了使用Pattern来绘制，Pattern可以是图片等其它对像，那么这里就使用到这个api，需要使用一张环形渐变的图像来绘制非对称渐变。</p>\n<h3 id=\"绘制对称环形渐变\"><a href=\"#绘制对称环形渐变\" class=\"headerlink\" title=\"绘制对称环形渐变\"></a>绘制对称环形渐变</h3><p>这里使用的（水平）线性渐变。先使用createLinearGradient创建渐变，然后使用strokeStyle进行设置，然后使用stroke绘制。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx.lineWidth = 5;</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath(); </div><div class=\"line\">ctx.moveTo(170, 120);</div><div class=\"line\"></div><div class=\"line\">var grd=ctx.createLinearGradient(0,0,170,0);</div><div class=\"line\">grd.addColorStop(&quot;0&quot;,&quot;black&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.3&quot;,&quot;magenta&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.5&quot;,&quot;blue&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.6&quot;,&quot;green&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.8&quot;,&quot;yellow&quot;);</div><div class=\"line\">grd.addColorStop(1,&quot;red&quot;);</div><div class=\"line\"></div><div class=\"line\">ctx.strokeStyle = grd;</div><div class=\"line\">ctx.arc(120, 120, 50, 0 ,Math.PI*2);</div><div class=\"line\">ctx.stroke(); // 画圆</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle2.png\" width=\"200\"><br></div>\n\n<h3 id=\"绘制非对称环形渐变\"><a href=\"#绘制非对称环形渐变\" class=\"headerlink\" title=\"绘制非对称环形渐变\"></a>绘制非对称环形渐变</h3><p>先使用ps制作一张环形渐变的图片。实现代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.getElementById(&quot;canvas2&quot;);</div><div class=\"line\">var ctx2 = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx2.lineWidth = 5;</div><div class=\"line\"></div><div class=\"line\">var img;</div><div class=\"line\">img = new Image();</div><div class=\"line\">img.src = &quot;./canvas.png&quot;;</div><div class=\"line\"></div><div class=\"line\">if (img.complete) &#123;</div><div class=\"line\">   setImageFill();</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">   img.onload = setImageFill;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var newFill = null;</div><div class=\"line\">function setImageFill() &#123;</div><div class=\"line\">    newFill = ctx2.createPattern(img, &apos;no-repeat&apos;);</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.strokeStyle = newFill;</div><div class=\"line\">    ctx.arc(50, 50, 46, 0, Math.PI*2, false);</div><div class=\"line\">    ctx.stroke();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle3.png\" width=\"200\"><br></div><br>效果已经基本上出现了，下面还需要让其动起来。</p>\n<h3 id=\"动态绘制\"><a href=\"#动态绘制\" class=\"headerlink\" title=\"动态绘制\"></a>动态绘制</h3><p>其实就是添加一个动态函数，在这里使用html5新添加的requestAnimationFrame，这个函数有兼容性的考虑，需要注意！这里不做处理！<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.getElementById(&quot;canvas2&quot;);</div><div class=\"line\">var ctx2 = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx2.lineWidth = 5;</div><div class=\"line\">ctx2.lineCap=&quot;round&quot;;</div><div class=\"line\"></div><div class=\"line\">var img;</div><div class=\"line\">img = new Image();</div><div class=\"line\">img.src = &quot;canvas.png&quot;;</div><div class=\"line\"></div><div class=\"line\">if (img.complete) &#123;</div><div class=\"line\">       setImageFill();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">       img.onload = setImageFill;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var newFill = null;</div><div class=\"line\">    function setImageFill() &#123;</div><div class=\"line\">    \tnewFill = ctx2.createPattern(img, &apos;no-repeat&apos;);</div><div class=\"line\">    \tdrawCircle(ctx2, 0,50);</div><div class=\"line\">    &#125;</div><div class=\"line\">    var stop = null ;</div><div class=\"line\">    function drawCircle(ctx, x, end) &#123;</div><div class=\"line\">        ctx.clearRect(0, 0, 300, 300);</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        ctx.strokeStyle = newFill;</div><div class=\"line\">        if (x &lt; Math.PI*2*end/100) &#123;</div><div class=\"line\">            x += Math.PI/100;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">             window.cancelAnimationFrame(stop)</div><div class=\"line\">        &#125;</div><div class=\"line\">        ctx.arc(50, 50, 46, 0, x, false);</div><div class=\"line\">        ctx.stroke();</div><div class=\"line\">        stop = requestAnimationFrame(function () &#123;</div><div class=\"line\">            drawCircle(ctx, x ,end);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>其中的drawCircle第三个参数就是对应的值。<br>效果如下：</p>\n<p><div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle4.png\" width=\"200\"><br></div></p>\n<h3 id=\"演示地址\"><a href=\"#演示地址\" class=\"headerlink\" title=\"演示地址\"></a>演示地址</h3><p><a href=\"http://wslover.byethost11.com/canvas/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/index2.html\" target=\"_blank\" rel=\"external\">点击演示</a><br><a href=\"https://github.com/wsDever/canvas/tree/master/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1\" target=\"_blank\" rel=\"external\">Github</a></p>\n","excerpt":"","more":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>canvas的api中已提供了两种，径向和线性渐变，并没有这种环形的渐变，所以很容易画出对称渐变。但是canvas提供了使用Pattern来绘制，Pattern可以是图片等其它对像，那么这里就使用到这个api，需要使用一张环形渐变的图像来绘制非对称渐变。</p>\n<h3 id=\"绘制对称环形渐变\"><a href=\"#绘制对称环形渐变\" class=\"headerlink\" title=\"绘制对称环形渐变\"></a>绘制对称环形渐变</h3><p>这里使用的（水平）线性渐变。先使用createLinearGradient创建渐变，然后使用strokeStyle进行设置，然后使用stroke绘制。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx.lineWidth = 5;</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath(); </div><div class=\"line\">ctx.moveTo(170, 120);</div><div class=\"line\"></div><div class=\"line\">var grd=ctx.createLinearGradient(0,0,170,0);</div><div class=\"line\">grd.addColorStop(&quot;0&quot;,&quot;black&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.3&quot;,&quot;magenta&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.5&quot;,&quot;blue&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.6&quot;,&quot;green&quot;);</div><div class=\"line\">grd.addColorStop(&quot;0.8&quot;,&quot;yellow&quot;);</div><div class=\"line\">grd.addColorStop(1,&quot;red&quot;);</div><div class=\"line\"></div><div class=\"line\">ctx.strokeStyle = grd;</div><div class=\"line\">ctx.arc(120, 120, 50, 0 ,Math.PI*2);</div><div class=\"line\">ctx.stroke(); // 画圆</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle2.png\"  width=\"200\"/><br></div>\n\n<h3 id=\"绘制非对称环形渐变\"><a href=\"#绘制非对称环形渐变\" class=\"headerlink\" title=\"绘制非对称环形渐变\"></a>绘制非对称环形渐变</h3><p>先使用ps制作一张环形渐变的图片。实现代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.getElementById(&quot;canvas2&quot;);</div><div class=\"line\">var ctx2 = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx2.lineWidth = 5;</div><div class=\"line\"></div><div class=\"line\">var img;</div><div class=\"line\">img = new Image();</div><div class=\"line\">img.src = &quot;./canvas.png&quot;;</div><div class=\"line\"></div><div class=\"line\">if (img.complete) &#123;</div><div class=\"line\">   setImageFill();</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">   img.onload = setImageFill;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var newFill = null;</div><div class=\"line\">function setImageFill() &#123;</div><div class=\"line\">    newFill = ctx2.createPattern(img, &apos;no-repeat&apos;);</div><div class=\"line\">    ctx.beginPath();</div><div class=\"line\">    ctx.strokeStyle = newFill;</div><div class=\"line\">    ctx.arc(50, 50, 46, 0, Math.PI*2, false);</div><div class=\"line\">    ctx.stroke();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle3.png\"  width=\"200\"/><br></div><br>效果已经基本上出现了，下面还需要让其动起来。</p>\n<h3 id=\"动态绘制\"><a href=\"#动态绘制\" class=\"headerlink\" title=\"动态绘制\"></a>动态绘制</h3><p>其实就是添加一个动态函数，在这里使用html5新添加的requestAnimationFrame，这个函数有兼容性的考虑，需要注意！这里不做处理！<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">var canvas = document.getElementById(&quot;canvas2&quot;);</div><div class=\"line\">var ctx2 = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx2.lineWidth = 5;</div><div class=\"line\">ctx2.lineCap=&quot;round&quot;;</div><div class=\"line\"></div><div class=\"line\">var img;</div><div class=\"line\">img = new Image();</div><div class=\"line\">img.src = &quot;canvas.png&quot;;</div><div class=\"line\"></div><div class=\"line\">if (img.complete) &#123;</div><div class=\"line\">       setImageFill();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">       img.onload = setImageFill;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var newFill = null;</div><div class=\"line\">    function setImageFill() &#123;</div><div class=\"line\">    \tnewFill = ctx2.createPattern(img, &apos;no-repeat&apos;);</div><div class=\"line\">    \tdrawCircle(ctx2, 0,50);</div><div class=\"line\">    &#125;</div><div class=\"line\">    var stop = null ;</div><div class=\"line\">    function drawCircle(ctx, x, end) &#123;</div><div class=\"line\">        ctx.clearRect(0, 0, 300, 300);</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        ctx.strokeStyle = newFill;</div><div class=\"line\">        if (x &lt; Math.PI*2*end/100) &#123;</div><div class=\"line\">            x += Math.PI/100;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">             window.cancelAnimationFrame(stop)</div><div class=\"line\">        &#125;</div><div class=\"line\">        ctx.arc(50, 50, 46, 0, x, false);</div><div class=\"line\">        ctx.stroke();</div><div class=\"line\">        stop = requestAnimationFrame(function () &#123;</div><div class=\"line\">            drawCircle(ctx, x ,end);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>其中的drawCircle第三个参数就是对应的值。<br>效果如下：</p>\n<p><div class=\"img-box\"><br><img src=\"http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle4.png\" width=\"200\"/><br></div></p>\n<h3 id=\"演示地址\"><a href=\"#演示地址\" class=\"headerlink\" title=\"演示地址\"></a>演示地址</h3><p><a href=\"http://wslover.byethost11.com/canvas/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/index2.html\">点击演示</a><br><a href=\"https://github.com/wsDever/canvas/tree/master/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1\">Github</a></p>\n"},{"title":"Jquery无法修改input的type属性的替代解决方法","date":"2015-03-24T02:07:07.000Z","comments":1,"_content":"### 使用场景\n需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；\n当输入内容并失去焦点的时候，输入内容显示为” ***** ”，如果没有输入仍然显示“请输入密码”,通常做法是：\n\n1. 使用text，隐藏域中，然后配合onkeypress、onkeyup、focus、blur等事件基本可以达到要求，此种方法比较麻烦;\n2. 用text和password两个输入框，模拟\n\n### 实现方法\n在这里主要讲讲如何用第二种方式实现。\n#### html代码\n\t<input type=\"password\" id=\"input_password\" value='' style=\"display:none;color:#444;\"/>\n\t<input type=\"text\" id=\"showPwd\" value=\"请输入密码\" style=\"color:#c0c0c0\"/>\n#### js代码\n\t$(\"#showPwd\").focus(function() {\n    \tvar text_value = $(this).val();\n    \tif(text_value == \"请输入密码\") {\n          \t$(\"#showPwd\").hide();\n        \t$(\"#input_password\").show().focus();\n   \t\t}\n\t});\n\t$(\"#input_password\").blur(function() {\n   \t\tvar text_value = $(this).val();\n    \tif(text_value == \"\") {\n        \t$(\"#showPwd\").show();\n        \t$(\"#input_password\").hide();\n    \t}\n\t});\n至此完美解决，所有浏览器都可以使用。\n### 扩展内容\n也许很多人一开始想到的是用jquery的attr修改type属性值，但是测试发现在IE上会出错，如下：\n    `uncaught exception type property can't be changed`\n查看到jQuery 1.42源码：\n```\n// We can't allow the type property to be changed (since it causes problems in IE)\nif(name === \"type\" && rtype.test(elem.nodeName) && elem.parentNode){\n\tjQuery.error(\"type property can't be changed\");\n};\n```\n主要还是“万能”的IE浏览器禁止修改input的type属性造成的。\n","source":"_posts/20150324.md","raw":"---\ntitle: Jquery无法修改input的type属性的替代解决方法\ndate: 2015-03-24 10:07:07\ncategories: \n\t- javascript\ntags: \n\t- jquery \n\t- javascript\n  - html\n\ncomments: true\n---\n### 使用场景\n需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；\n当输入内容并失去焦点的时候，输入内容显示为” ***** ”，如果没有输入仍然显示“请输入密码”,通常做法是：\n\n1. 使用text，隐藏域中，然后配合onkeypress、onkeyup、focus、blur等事件基本可以达到要求，此种方法比较麻烦;\n2. 用text和password两个输入框，模拟\n\n### 实现方法\n在这里主要讲讲如何用第二种方式实现。\n#### html代码\n\t<input type=\"password\" id=\"input_password\" value='' style=\"display:none;color:#444;\"/>\n\t<input type=\"text\" id=\"showPwd\" value=\"请输入密码\" style=\"color:#c0c0c0\"/>\n#### js代码\n\t$(\"#showPwd\").focus(function() {\n    \tvar text_value = $(this).val();\n    \tif(text_value == \"请输入密码\") {\n          \t$(\"#showPwd\").hide();\n        \t$(\"#input_password\").show().focus();\n   \t\t}\n\t});\n\t$(\"#input_password\").blur(function() {\n   \t\tvar text_value = $(this).val();\n    \tif(text_value == \"\") {\n        \t$(\"#showPwd\").show();\n        \t$(\"#input_password\").hide();\n    \t}\n\t});\n至此完美解决，所有浏览器都可以使用。\n### 扩展内容\n也许很多人一开始想到的是用jquery的attr修改type属性值，但是测试发现在IE上会出错，如下：\n    `uncaught exception type property can't be changed`\n查看到jQuery 1.42源码：\n```\n// We can't allow the type property to be changed (since it causes problems in IE)\nif(name === \"type\" && rtype.test(elem.nodeName) && elem.parentNode){\n\tjQuery.error(\"type property can't be changed\");\n};\n```\n主要还是“万能”的IE浏览器禁止修改input的type属性造成的。\n","slug":"20150324","published":1,"updated":"2016-10-05T08:50:12.554Z","layout":"post","photos":[],"link":"","_id":"cj2h7uloa0005b8fsbvnbmm57","content":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；<br>当输入内容并失去焦点的时候，输入内容显示为” <strong>*</strong> ”，如果没有输入仍然显示“请输入密码”,通常做法是：</p>\n<ol>\n<li>使用text，隐藏域中，然后配合onkeypress、onkeyup、focus、blur等事件基本可以达到要求，此种方法比较麻烦;</li>\n<li>用text和password两个输入框，模拟</li>\n</ol>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>在这里主要讲讲如何用第二种方式实现。</p>\n<h4 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h4><pre><code>&lt;input type=&quot;password&quot; id=&quot;input_password&quot; value=&apos;&apos; style=&quot;display:none;color:#444;&quot;/&gt;\n&lt;input type=&quot;text&quot; id=&quot;showPwd&quot; value=&quot;请输入密码&quot; style=&quot;color:#c0c0c0&quot;/&gt;\n</code></pre><h4 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h4><pre><code>$(&quot;#showPwd&quot;).focus(function() {\n    var text_value = $(this).val();\n    if(text_value == &quot;请输入密码&quot;) {\n          $(&quot;#showPwd&quot;).hide();\n        $(&quot;#input_password&quot;).show().focus();\n       }\n});\n$(&quot;#input_password&quot;).blur(function() {\n       var text_value = $(this).val();\n    if(text_value == &quot;&quot;) {\n        $(&quot;#showPwd&quot;).show();\n        $(&quot;#input_password&quot;).hide();\n    }\n});\n</code></pre><p>至此完美解决，所有浏览器都可以使用。</p>\n<h3 id=\"扩展内容\"><a href=\"#扩展内容\" class=\"headerlink\" title=\"扩展内容\"></a>扩展内容</h3><p>也许很多人一开始想到的是用jquery的attr修改type属性值，但是测试发现在IE上会出错，如下：<br>    <code>uncaught exception type property can&#39;t be changed</code><br>查看到jQuery 1.42源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// We can&apos;t allow the type property to be changed (since it causes problems in IE)</div><div class=\"line\">if(name === &quot;type&quot; &amp;&amp; rtype.test(elem.nodeName) &amp;&amp; elem.parentNode)&#123;</div><div class=\"line\">\tjQuery.error(&quot;type property can&apos;t be changed&quot;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>主要还是“万能”的IE浏览器禁止修改input的type属性造成的。</p>\n","excerpt":"","more":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；<br>当输入内容并失去焦点的时候，输入内容显示为” <strong>*</strong> ”，如果没有输入仍然显示“请输入密码”,通常做法是：</p>\n<ol>\n<li>使用text，隐藏域中，然后配合onkeypress、onkeyup、focus、blur等事件基本可以达到要求，此种方法比较麻烦;</li>\n<li>用text和password两个输入框，模拟</li>\n</ol>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>在这里主要讲讲如何用第二种方式实现。</p>\n<h4 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h4><pre><code>&lt;input type=&quot;password&quot; id=&quot;input_password&quot; value=&apos;&apos; style=&quot;display:none;color:#444;&quot;/&gt;\n&lt;input type=&quot;text&quot; id=&quot;showPwd&quot; value=&quot;请输入密码&quot; style=&quot;color:#c0c0c0&quot;/&gt;\n</code></pre><h4 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h4><pre><code>$(&quot;#showPwd&quot;).focus(function() {\n    var text_value = $(this).val();\n    if(text_value == &quot;请输入密码&quot;) {\n          $(&quot;#showPwd&quot;).hide();\n        $(&quot;#input_password&quot;).show().focus();\n       }\n});\n$(&quot;#input_password&quot;).blur(function() {\n       var text_value = $(this).val();\n    if(text_value == &quot;&quot;) {\n        $(&quot;#showPwd&quot;).show();\n        $(&quot;#input_password&quot;).hide();\n    }\n});\n</code></pre><p>至此完美解决，所有浏览器都可以使用。</p>\n<h3 id=\"扩展内容\"><a href=\"#扩展内容\" class=\"headerlink\" title=\"扩展内容\"></a>扩展内容</h3><p>也许很多人一开始想到的是用jquery的attr修改type属性值，但是测试发现在IE上会出错，如下：<br>    <code>uncaught exception type property can&#39;t be changed</code><br>查看到jQuery 1.42源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// We can&apos;t allow the type property to be changed (since it causes problems in IE)</div><div class=\"line\">if(name === &quot;type&quot; &amp;&amp; rtype.test(elem.nodeName) &amp;&amp; elem.parentNode)&#123;</div><div class=\"line\">\tjQuery.error(&quot;type property can&apos;t be changed&quot;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>主要还是“万能”的IE浏览器禁止修改input的type属性造成的。</p>\n"},{"title":"CSS使用table布局妙用","date":"2016-10-09T02:07:07.000Z","comments":1,"_content":"### 动态垂直居中\n将父级元素设置为`display:table`,子元素设置`disable:table-cell;vertical-align:middle`,\n```\n.box-wrap{\n\tdisplay:table;\n}\n.box{\n\tdisable:table-cell;\n\tvertical-align:middle\n}\n```\n演示如下：\n<p data-height=\"335\" data-theme-id=\"0\" data-slug-hash=\"WGzxJw\" data-default-tab=\"css,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/WGzxJw/\">css-table布局使用</a> by 小白 (<a href=\"http://codepen.io/wsdever\">@wsdever</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n\n### 动态水平居中\n如水平导航，一般的作法是设置元素`display:inline-block`，然后设置外层无元素为`text-align:center`，这样做可以实现要求，但是导航同级的元素都会继承外层的这个属性。现在用`display:table`来实现。\n在居中元素上设置`display:table;margin:auto;`\n```\n.wrap{\n\tdisplay:table;\n\tmargin:auto;\n}\n```\n演示如下：\n<p data-height=\"305\" data-theme-id=\"0\" data-slug-hash=\"ORvXqy\" data-default-tab=\"html,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/ORvXqy/\">css-table布局-动态水平居中</a> by 小白 (<a href=\"http://codepen.io/wsdever\">@wsdever</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","source":"_posts/20160815.md","raw":"---\ntitle: CSS使用table布局妙用\ndate: 2016-10-09 10:07:07\ncategories: \n\t- css\ntags:\n  \t- css\ncomments: true\n---\n### 动态垂直居中\n将父级元素设置为`display:table`,子元素设置`disable:table-cell;vertical-align:middle`,\n```\n.box-wrap{\n\tdisplay:table;\n}\n.box{\n\tdisable:table-cell;\n\tvertical-align:middle\n}\n```\n演示如下：\n<p data-height=\"335\" data-theme-id=\"0\" data-slug-hash=\"WGzxJw\" data-default-tab=\"css,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/WGzxJw/\">css-table布局使用</a> by 小白 (<a href=\"http://codepen.io/wsdever\">@wsdever</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n\n### 动态水平居中\n如水平导航，一般的作法是设置元素`display:inline-block`，然后设置外层无元素为`text-align:center`，这样做可以实现要求，但是导航同级的元素都会继承外层的这个属性。现在用`display:table`来实现。\n在居中元素上设置`display:table;margin:auto;`\n```\n.wrap{\n\tdisplay:table;\n\tmargin:auto;\n}\n```\n演示如下：\n<p data-height=\"305\" data-theme-id=\"0\" data-slug-hash=\"ORvXqy\" data-default-tab=\"html,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/ORvXqy/\">css-table布局-动态水平居中</a> by 小白 (<a href=\"http://codepen.io/wsdever\">@wsdever</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","slug":"20160815","published":1,"updated":"2016-10-09T04:00:55.884Z","layout":"post","photos":[],"link":"","_id":"cj2h7uloe0006b8fsc8nmky61","content":"<h3 id=\"动态垂直居中\"><a href=\"#动态垂直居中\" class=\"headerlink\" title=\"动态垂直居中\"></a>动态垂直居中</h3><p>将父级元素设置为<code>display:table</code>,子元素设置<code>disable:table-cell;vertical-align:middle</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box-wrap&#123;</div><div class=\"line\">\tdisplay:table;</div><div class=\"line\">&#125;</div><div class=\"line\">.box&#123;</div><div class=\"line\">\tdisable:table-cell;</div><div class=\"line\">\tvertical-align:middle</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示如下：</p>\n<p data-height=\"335\" data-theme-id=\"0\" data-slug-hash=\"WGzxJw\" data-default-tab=\"css,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/WGzxJw/\" target=\"_blank\" rel=\"external\">css-table布局使用</a> by 小白 (<a href=\"http://codepen.io/wsdever\" target=\"_blank\" rel=\"external\">@wsdever</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p>\n\n\n<h3 id=\"动态水平居中\"><a href=\"#动态水平居中\" class=\"headerlink\" title=\"动态水平居中\"></a>动态水平居中</h3><p>如水平导航，一般的作法是设置元素<code>display:inline-block</code>，然后设置外层无元素为<code>text-align:center</code>，这样做可以实现要求，但是导航同级的元素都会继承外层的这个属性。现在用<code>display:table</code>来实现。<br>在居中元素上设置<code>display:table;margin:auto;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.wrap&#123;</div><div class=\"line\">\tdisplay:table;</div><div class=\"line\">\tmargin:auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示如下：</p>\n<p data-height=\"305\" data-theme-id=\"0\" data-slug-hash=\"ORvXqy\" data-default-tab=\"html,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/ORvXqy/\" target=\"_blank\" rel=\"external\">css-table布局-动态水平居中</a> by 小白 (<a href=\"http://codepen.io/wsdever\" target=\"_blank\" rel=\"external\">@wsdever</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p>\n\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","excerpt":"","more":"<h3 id=\"动态垂直居中\"><a href=\"#动态垂直居中\" class=\"headerlink\" title=\"动态垂直居中\"></a>动态垂直居中</h3><p>将父级元素设置为<code>display:table</code>,子元素设置<code>disable:table-cell;vertical-align:middle</code>,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box-wrap&#123;</div><div class=\"line\">\tdisplay:table;</div><div class=\"line\">&#125;</div><div class=\"line\">.box&#123;</div><div class=\"line\">\tdisable:table-cell;</div><div class=\"line\">\tvertical-align:middle</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示如下：</p>\n<p data-height=\"335\" data-theme-id=\"0\" data-slug-hash=\"WGzxJw\" data-default-tab=\"css,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/WGzxJw/\">css-table布局使用</a> by 小白 (<a href=\"http://codepen.io/wsdever\">@wsdever</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n\n<h3 id=\"动态水平居中\"><a href=\"#动态水平居中\" class=\"headerlink\" title=\"动态水平居中\"></a>动态水平居中</h3><p>如水平导航，一般的作法是设置元素<code>display:inline-block</code>，然后设置外层无元素为<code>text-align:center</code>，这样做可以实现要求，但是导航同级的元素都会继承外层的这个属性。现在用<code>display:table</code>来实现。<br>在居中元素上设置<code>display:table;margin:auto;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.wrap&#123;</div><div class=\"line\">\tdisplay:table;</div><div class=\"line\">\tmargin:auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>演示如下：</p>\n<p data-height=\"305\" data-theme-id=\"0\" data-slug-hash=\"ORvXqy\" data-default-tab=\"html,result\" data-user=\"wsdever\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wsdever/pen/ORvXqy/\">css-table布局-动态水平居中</a> by 小白 (<a href=\"http://codepen.io/wsdever\">@wsdever</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>"},{"title":"前端零碎录","date":"2014-10-09T14:52:33.000Z","comments":1,"_content":"##  工作中一些经验总结\n\n###  第一部分\n1.  绑定事件时避免多次执行\n```\nevent.preventDefault();\nif (event && event.stopPropagation) {\n  event.stopPropagation();\n} else {//IE浏览器\n  event.cancelBubble = true;\n}\n```\n2.  字符串与数字转换最简单方法：-0 和 + ' '\n```\nvar a = '123.45'; \nvar b = a - 0;\nvar c = 123 ;\nvar d = c + '';\n```\n3.  使checkbox与文字水平对齐：对style加上vertical-align:middle\n```\n<input style=\"color: red; vertical-align: middle;\" type=\"checkbox\" />\n<label style=\"vertical-align: middle;\">我已阅读<label /> \n```\n\t如：<input style=\"color: red; vertical-align: middle;\" type=\"checkbox\" /> <label style=\"vertical-align: middle;\">我已阅读<label /> \n\n4.  div中设置文字竖直居中方法\n+  单行文字居中使用line-height方法，将文本的line-height设为与容器的height相等\n```\nheight:100px; \nline-height:100px;\n```\n+  多行文字居中使用display:table-cell再设置vertical-align进行居中对齐 \n```\ndisplay:table-cell; \nvertical-align:middle\n```\n###  第二部分\n1.  js处理绝对路径中的反斜杠方法\n```\npath.split(/\\\\/g)\npath为中文路径：E:\\record\\movie\\2016-05-14\\123.mp4\n```\n2.  页面禁止使用鼠标滚动缩放页面\n```\n$(document).on(\"mousewheel DOMMouseScroll\", function (e) {\n　　if(e.ctrlKey){\n　　　　e.preventDefault();\n　　}\n})\n```\n3.  使用（主要是IE9）window.showModalDialog出现 不能执行已释放Script的代码 错误的解决方法\n```\n将window.returnValue的值转化成bool或者字符串，不能为object\n```\n4.  jquery鼠标滚轮事件\n```\n$(document).on(\"mousewheel DOMMouseScroll\", function (e) {    \n\tvar delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1)) ||  \t// chrome & ie\n            (e.originalEvent.detail && (e.originalEvent.detail > 0 ? -1 : 1));            \t\t// firefox\n\tif (delta > 0) {\n\t    console.log(\"wheelup\");\n\t} else if (delta < 0) {\n\t    console.log(\"wheeldown\");\n\t}\n});\n注意： jquery要使用2.0以下\n```\n5.  使用img做背景图片时，出现无法消除的灰色边框，处理方法\n```\n添加src属性，同时设置空白图片\n<img src=\"http://www.xcwljy.cn/images/pixel.gif\" style=\"background: url('../images/icon-rounded-hall.png') \nno-repeat;border: none;\" />\n```\n###  未完待续...","source":"_posts/20161009.md","raw":"---\ntitle: 前端零碎录\ndate: 2014-10-09 22:52:33\ncategories:\n  - javascript\ntags:\n  - javascript\n  - jquery\n  - css\ncomments: true\n---\n##  工作中一些经验总结\n\n###  第一部分\n1.  绑定事件时避免多次执行\n```\nevent.preventDefault();\nif (event && event.stopPropagation) {\n  event.stopPropagation();\n} else {//IE浏览器\n  event.cancelBubble = true;\n}\n```\n2.  字符串与数字转换最简单方法：-0 和 + ' '\n```\nvar a = '123.45'; \nvar b = a - 0;\nvar c = 123 ;\nvar d = c + '';\n```\n3.  使checkbox与文字水平对齐：对style加上vertical-align:middle\n```\n<input style=\"color: red; vertical-align: middle;\" type=\"checkbox\" />\n<label style=\"vertical-align: middle;\">我已阅读<label /> \n```\n\t如：<input style=\"color: red; vertical-align: middle;\" type=\"checkbox\" /> <label style=\"vertical-align: middle;\">我已阅读<label /> \n\n4.  div中设置文字竖直居中方法\n+  单行文字居中使用line-height方法，将文本的line-height设为与容器的height相等\n```\nheight:100px; \nline-height:100px;\n```\n+  多行文字居中使用display:table-cell再设置vertical-align进行居中对齐 \n```\ndisplay:table-cell; \nvertical-align:middle\n```\n###  第二部分\n1.  js处理绝对路径中的反斜杠方法\n```\npath.split(/\\\\/g)\npath为中文路径：E:\\record\\movie\\2016-05-14\\123.mp4\n```\n2.  页面禁止使用鼠标滚动缩放页面\n```\n$(document).on(\"mousewheel DOMMouseScroll\", function (e) {\n　　if(e.ctrlKey){\n　　　　e.preventDefault();\n　　}\n})\n```\n3.  使用（主要是IE9）window.showModalDialog出现 不能执行已释放Script的代码 错误的解决方法\n```\n将window.returnValue的值转化成bool或者字符串，不能为object\n```\n4.  jquery鼠标滚轮事件\n```\n$(document).on(\"mousewheel DOMMouseScroll\", function (e) {    \n\tvar delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1)) ||  \t// chrome & ie\n            (e.originalEvent.detail && (e.originalEvent.detail > 0 ? -1 : 1));            \t\t// firefox\n\tif (delta > 0) {\n\t    console.log(\"wheelup\");\n\t} else if (delta < 0) {\n\t    console.log(\"wheeldown\");\n\t}\n});\n注意： jquery要使用2.0以下\n```\n5.  使用img做背景图片时，出现无法消除的灰色边框，处理方法\n```\n添加src属性，同时设置空白图片\n<img src=\"http://www.xcwljy.cn/images/pixel.gif\" style=\"background: url('../images/icon-rounded-hall.png') \nno-repeat;border: none;\" />\n```\n###  未完待续...","slug":"20161009","published":1,"updated":"2016-11-03T07:00:25.285Z","layout":"post","photos":[],"link":"","_id":"cj2h7uloi0009b8fs8yahlf8d","content":"<h2 id=\"工作中一些经验总结\"><a href=\"#工作中一些经验总结\" class=\"headerlink\" title=\"工作中一些经验总结\"></a>工作中一些经验总结</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><ol>\n<li><p>绑定事件时避免多次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">event.preventDefault();</div><div class=\"line\">if (event &amp;&amp; event.stopPropagation) &#123;</div><div class=\"line\">  event.stopPropagation();</div><div class=\"line\">&#125; else &#123;//IE浏览器</div><div class=\"line\">  event.cancelBubble = true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>字符串与数字转换最简单方法：-0 和 + ‘ ‘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &apos;123.45&apos;; </div><div class=\"line\">var b = a - 0;</div><div class=\"line\">var c = 123 ;</div><div class=\"line\">var d = c + &apos;&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使checkbox与文字水平对齐：对style加上vertical-align:middle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input style=&quot;color: red; vertical-align: middle;&quot; type=&quot;checkbox&quot; /&gt;</div><div class=\"line\">&lt;label style=&quot;vertical-align: middle;&quot;&gt;我已阅读&lt;label /&gt;</div></pre></td></tr></table></figure>\n<p>如：<input style=\"color: red; vertical-align: middle;\" type=\"checkbox\"> <label style=\"vertical-align: middle;\">我已阅读<label> </label></label></p>\n</li>\n<li><p>div中设置文字竖直居中方法</p>\n</li>\n</ol>\n<ul>\n<li><p>单行文字居中使用line-height方法，将文本的line-height设为与容器的height相等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">height:100px; </div><div class=\"line\">line-height:100px;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多行文字居中使用display:table-cell再设置vertical-align进行居中对齐 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">display:table-cell; </div><div class=\"line\">vertical-align:middle</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><ol>\n<li><p>js处理绝对路径中的反斜杠方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">path.split(/\\\\/g)</div><div class=\"line\">path为中文路径：E:\\record\\movie\\2016-05-14\\123.mp4</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面禁止使用鼠标滚动缩放页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123;</div><div class=\"line\">　　if(e.ctrlKey)&#123;</div><div class=\"line\">　　　　e.preventDefault();</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用（主要是IE9）window.showModalDialog出现 不能执行已释放Script的代码 错误的解决方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">将window.returnValue的值转化成bool或者字符串，不能为object</div></pre></td></tr></table></figure>\n</li>\n<li><p>jquery鼠标滚轮事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123;    </div><div class=\"line\">\tvar delta = (e.originalEvent.wheelDelta &amp;&amp; (e.originalEvent.wheelDelta &gt; 0 ? 1 : -1)) ||  \t// chrome &amp; ie</div><div class=\"line\">            (e.originalEvent.detail &amp;&amp; (e.originalEvent.detail &gt; 0 ? -1 : 1));            \t\t// firefox</div><div class=\"line\">\tif (delta &gt; 0) &#123;</div><div class=\"line\">\t    console.log(&quot;wheelup&quot;);</div><div class=\"line\">\t&#125; else if (delta &lt; 0) &#123;</div><div class=\"line\">\t    console.log(&quot;wheeldown&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">注意： jquery要使用2.0以下</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用img做背景图片时，出现无法消除的灰色边框，处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加src属性，同时设置空白图片</div><div class=\"line\">&lt;img src=&quot;http://www.xcwljy.cn/images/pixel.gif&quot; style=&quot;background: url(&apos;../images/icon-rounded-hall.png&apos;) </div><div class=\"line\">no-repeat;border: none;&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h3>","excerpt":"","more":"<h2 id=\"工作中一些经验总结\"><a href=\"#工作中一些经验总结\" class=\"headerlink\" title=\"工作中一些经验总结\"></a>工作中一些经验总结</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><ol>\n<li><p>绑定事件时避免多次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">event.preventDefault();</div><div class=\"line\">if (event &amp;&amp; event.stopPropagation) &#123;</div><div class=\"line\">  event.stopPropagation();</div><div class=\"line\">&#125; else &#123;//IE浏览器</div><div class=\"line\">  event.cancelBubble = true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>字符串与数字转换最简单方法：-0 和 + ‘ ‘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &apos;123.45&apos;; </div><div class=\"line\">var b = a - 0;</div><div class=\"line\">var c = 123 ;</div><div class=\"line\">var d = c + &apos;&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使checkbox与文字水平对齐：对style加上vertical-align:middle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input style=&quot;color: red; vertical-align: middle;&quot; type=&quot;checkbox&quot; /&gt;</div><div class=\"line\">&lt;label style=&quot;vertical-align: middle;&quot;&gt;我已阅读&lt;label /&gt;</div></pre></td></tr></table></figure>\n<p>如：<input style=\"color: red; vertical-align: middle;\" type=\"checkbox\" /> <label style=\"vertical-align: middle;\">我已阅读<label /> </p>\n</li>\n<li><p>div中设置文字竖直居中方法</p>\n</li>\n</ol>\n<ul>\n<li><p>单行文字居中使用line-height方法，将文本的line-height设为与容器的height相等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">height:100px; </div><div class=\"line\">line-height:100px;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多行文字居中使用display:table-cell再设置vertical-align进行居中对齐 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">display:table-cell; </div><div class=\"line\">vertical-align:middle</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><ol>\n<li><p>js处理绝对路径中的反斜杠方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">path.split(/\\\\/g)</div><div class=\"line\">path为中文路径：E:\\record\\movie\\2016-05-14\\123.mp4</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面禁止使用鼠标滚动缩放页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123;</div><div class=\"line\">　　if(e.ctrlKey)&#123;</div><div class=\"line\">　　　　e.preventDefault();</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用（主要是IE9）window.showModalDialog出现 不能执行已释放Script的代码 错误的解决方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">将window.returnValue的值转化成bool或者字符串，不能为object</div></pre></td></tr></table></figure>\n</li>\n<li><p>jquery鼠标滚轮事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123;    </div><div class=\"line\">\tvar delta = (e.originalEvent.wheelDelta &amp;&amp; (e.originalEvent.wheelDelta &gt; 0 ? 1 : -1)) ||  \t// chrome &amp; ie</div><div class=\"line\">            (e.originalEvent.detail &amp;&amp; (e.originalEvent.detail &gt; 0 ? -1 : 1));            \t\t// firefox</div><div class=\"line\">\tif (delta &gt; 0) &#123;</div><div class=\"line\">\t    console.log(&quot;wheelup&quot;);</div><div class=\"line\">\t&#125; else if (delta &lt; 0) &#123;</div><div class=\"line\">\t    console.log(&quot;wheeldown&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">注意： jquery要使用2.0以下</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用img做背景图片时，出现无法消除的灰色边框，处理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加src属性，同时设置空白图片</div><div class=\"line\">&lt;img src=&quot;http://www.xcwljy.cn/images/pixel.gif&quot; style=&quot;background: url(&apos;../images/icon-rounded-hall.png&apos;) </div><div class=\"line\">no-repeat;border: none;&quot; /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h3>"},{"title":"ES6中const的使用","comments":1,"date":"2016-10-04T02:01:18.000Z","_content":"#### 基本用法\nES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值。\n```\nconst PI = 3.1415;\nPI \t\t\t// 3.1415\nPI = 3;\t\t// 报错\n\nconst a ;\t// 报错\na = 3 ;\n```\n#### 与let相似的特点\n+\t作用域\n\tconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\n\t```\n\tif (true) {\n\t  const tmp = 5;\n\t}\n\n\ttmp \t\t\t// 报错\n\t```\n+\t常量不提升\n\tconst命令声明的常量也是不提升，同样存在暂时性死区\n\t```\n\tif (true) {\n\t  console.log(a); // 报错\n\t  const a = 5;\n\t}\n\t```\n+\t不可重复定义\n\t```\n\tvar a = \"Hello!\";\n\tlet b = 25;\n\n\t// 以下两行都会报错\n\tconst a = \"Goodbye!\";\n\tconst b = 30;\n\t```\n+\t常量不属于顶层变量\n","source":"_posts/20161104.md","raw":"---\ntitle: ES6中const的使用\ncategories:\n  - javascript\ntags:\n  - javascript\n  - ES6\ncomments: true\ndate: 2016-10-04 10:01:18\n---\n#### 基本用法\nES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值。\n```\nconst PI = 3.1415;\nPI \t\t\t// 3.1415\nPI = 3;\t\t// 报错\n\nconst a ;\t// 报错\na = 3 ;\n```\n#### 与let相似的特点\n+\t作用域\n\tconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\n\t```\n\tif (true) {\n\t  const tmp = 5;\n\t}\n\n\ttmp \t\t\t// 报错\n\t```\n+\t常量不提升\n\tconst命令声明的常量也是不提升，同样存在暂时性死区\n\t```\n\tif (true) {\n\t  console.log(a); // 报错\n\t  const a = 5;\n\t}\n\t```\n+\t不可重复定义\n\t```\n\tvar a = \"Hello!\";\n\tlet b = 25;\n\n\t// 以下两行都会报错\n\tconst a = \"Goodbye!\";\n\tconst b = 30;\n\t```\n+\t常量不属于顶层变量\n","slug":"20161104","published":1,"updated":"2016-11-04T06:19:35.126Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulom000cb8fsagvjwjyl","content":"<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>ES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const PI = 3.1415;</div><div class=\"line\">PI \t\t\t// 3.1415</div><div class=\"line\">PI = 3;\t\t// 报错</div><div class=\"line\"></div><div class=\"line\">const a ;\t// 报错</div><div class=\"line\">a = 3 ;</div></pre></td></tr></table></figure></p>\n<h4 id=\"与let相似的特点\"><a href=\"#与let相似的特点\" class=\"headerlink\" title=\"与let相似的特点\"></a>与let相似的特点</h4><ul>\n<li><p>作用域<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">  const tmp = 5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tmp \t\t\t// 报错</div></pre></td></tr></table></figure>\n</li>\n<li><p>常量不提升<br>const命令声明的常量也是不提升，同样存在暂时性死区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">  console.log(a); // 报错</div><div class=\"line\">  const a = 5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>不可重复定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &quot;Hello!&quot;;</div><div class=\"line\">let b = 25;</div><div class=\"line\"></div><div class=\"line\">// 以下两行都会报错</div><div class=\"line\">const a = &quot;Goodbye!&quot;;</div><div class=\"line\">const b = 30;</div></pre></td></tr></table></figure>\n</li>\n<li><p>常量不属于顶层变量</p>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>ES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">const PI = 3.1415;</div><div class=\"line\">PI \t\t\t// 3.1415</div><div class=\"line\">PI = 3;\t\t// 报错</div><div class=\"line\"></div><div class=\"line\">const a ;\t// 报错</div><div class=\"line\">a = 3 ;</div></pre></td></tr></table></figure></p>\n<h4 id=\"与let相似的特点\"><a href=\"#与let相似的特点\" class=\"headerlink\" title=\"与let相似的特点\"></a>与let相似的特点</h4><ul>\n<li><p>作用域<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">  const tmp = 5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tmp \t\t\t// 报错</div></pre></td></tr></table></figure>\n</li>\n<li><p>常量不提升<br>const命令声明的常量也是不提升，同样存在暂时性死区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">  console.log(a); // 报错</div><div class=\"line\">  const a = 5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>不可重复定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &quot;Hello!&quot;;</div><div class=\"line\">let b = 25;</div><div class=\"line\"></div><div class=\"line\">// 以下两行都会报错</div><div class=\"line\">const a = &quot;Goodbye!&quot;;</div><div class=\"line\">const b = 30;</div></pre></td></tr></table></figure>\n</li>\n<li><p>常量不属于顶层变量</p>\n</li>\n</ul>\n"},{"title":"HTML5-indexedDB 的使用","comments":1,"date":"2016-11-22T06:30:42.000Z","_content":"### 简单介绍\nIndexedDb是html5新添加的特性，目地是使本地数据能够持久性，使用户能够在线和离线访问 Web 应用程序。关于HTML5 本地数据持久性存储，除了IndexedDb，还有 localstorage，和 sessionstrorage ，它们均支持使用一个简单的键值对来存储需要的数据，但对大量结构化数据的存储及高效检索却显的无能为力。\n### 异步API\n在IndexedDB中的大部分操作并不是我们常用的“调用——返回”的模式，而是“请求——响应”的模式，\n比如打开数据库：\n```\nvar request=window.indexedDB.open('myDB');\n```\n它的返回值并不是一个IndexedDb对象，而是一个请求体对象--IDBOpenDBRequest，其中包含了需要的IndexedDb对象，以及三个状态处理函数：\n```\nonerror： 请求失败的回调函数\nonsuccess：请求成功的回调函数\nonupgradeneeded：请求数据库版本变化的回调函数\n```\n<span style=\"color:red\">因为是异步执行，所以请求执行完成，并不一定就能在返回的对象中获取到indexedDb对象句柄。为了避免出现错误，需要在回调中做出相应处理。</span>\n### 数据库\n#### 创建数据库\n<span style=\"color:green\">说明</span>：\nopen可以打开或者创建数据库，如果调用的时候，当前数据库已经存在，则会直接打开，如果不存在就会创建。数据库创建的时候，默认版本是1，如果在open的时候有传入这个参数，那么就会修改数据库的版本号，并调用onupgradeneeded这个回调。需要说明的是，不能打开比当前版本低的数据库，会触发onerror。\n```\nrequest = window.indexedDB.open(name[, version]);\nor\nrequest = window.indexedDB.open(name[, options])\n```\n<span style=\"color:green\">参数</span>：\n```\nname：数据库的名称\nversion：数据库的版本，可选\noption：包含版本及持久存储标志的对象，可选\n```\n<span style=\"color:green\">返回值</span>：\n一个IDBOpenDBRequest对象\n\n<span style=\"color:green\">实例</span>：\n```\nvar request = window.indexedDB.open(\"toDoList\"[, 4]);\nor：\nvar request = window.indexedDB.open(\"toDoList\"[, {version: 4, storage: \"temporary\"}]);\n```\n#### 关闭/删除数据库\n<span style=\"color:green\">说明</span>：\n关闭数据库可以直接调用数据库IDBDatabase对象的close方法，删除数据库使用indexedDB对象的deleteDatabase，如下：\n```\nIDBDatabase.close();\nindexedDB.deleteDatabase(name);\n```\n<span style=\"color:green\">参数</span>：\n```\nname：包含版本及持久存储标志的对象，可选\n```\n<span style=\"color:green\">实例</span>：\n```\n  var DBOpenRequest = window.indexedDB.open(\"toDoList\", 4);\n  DBOpenRequest.onerror = function(event) {\n\n  };\n\n  DBOpenRequest.onsuccess = function(event) {\n        db = DBOpenRequest.result;\n        db.close();\n  }\n```\n### 数据存储对象（数据表）\n<span style=\"color:green\">说明</span>：\nIndexedDb中的存储对象，相当于mySql中的数据表，一个数据库中可以创建多张数据表，在IndexedDb中也是一样，一个数据库中可以创建多个存储对象，称之为objectStore。\n#### 创建objectStore（数据表）\n<span style=\"color:green\">说明</span>：\n使用IDBDatabase对象的createObjectStore方法：\n```\nIDBDatabase.createObjectStore(storeName [,\"keyPath\"] )\n```\n<span style=\"color:green\">参数</span>：\n```\nstoreName：存储对象的名字\nkeyPath：主健名，可选\n```\n<span style=\"color:green\">返回值</span>：\n返回创建出来的存储对象。\n\n<span style=\"color:green\">实例</span>：\n```\n IDBDatabase.createObjectStore('students',{keyPath:\"id\"});\n```\n#### 删除objectStore（数据表）\n<span style=\"color:green\">说明</span>：\n使用IDBDatabase对象的deleteObjectStore方法：\n```\nIDBDatabase.deleteObjectStore(storeName)\n```\n<span style=\"color:green\">参数</span>：\n```\nstoreName：要删除的存储对象\n```\n#### 使用事务\n<span style=\"color:green\">说明</span>：\n在IndexedDb中对存储对象中的数据所有操作都是基于事务的，事务提供了数据库操作的一个原子集合，对数据进行写入操作，同时也具有中止和提交工具。\n\n<span style=\"color:green\">事务模式</span>：\n```\n模式                                描述\nreadonly                            提供对某个对象存储的只读访问，在查询对象存储时使用。\nreadwrite                           提供对某个对象存储的读取和写入访问权。\nversionchange                       提供读取和写入访问权来修改对象存储定义，或者创建一个新的对象存储。\n```\n默认的事务模式为 readonly，可以时刻打开多个 readonly 事务，但一次只能打开一个 readwrite 事务。因此，只有在数据更新时才考虑使用 readwrite 事务，其它情况下只用 readonly 。单独的（不同时打开其它类型事务时）versionchange 事务操作一个数据库或对象存储。可以在 onupgradeneeded 事件处理函数中使用 versionchange 事务用来创建、修改或删除一个对象存储。\n<span style=\"color:green\">创建事务</span>：\n使用IDBDatabase中的transaction(storeName,mode)来创建事务。\n```\nIDBDatabase.transaction(\"students\");\n```\n<span style=\"color:green\">参数</span>：\n```\nstoreName：\t数据存储对象的名称，可以是多个，使用数组形式传入，此时模式不能是 readwrite\nmode：\t\t事务模式，可选，不传入是使用默认值\n```\n### 操作数据存储对象（数据表）\n<span style=\"color:red\">关于索引</span>：\n对索引的使用使得在web端对大量数据高效检索,快速定位成为可能，这也是IndexedDb与其它html5的web存储的主要区别之一。在indexedDB中有两种索引，一种是自增长的int值；一种是keyPath，是自己指定索引列，常用的索引也是这种。\n#### 创建索引\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的createIndex(objectIndexName, objectKeypath, optionalObjectParameters)来创建：\n```\nIDBObjectStore.createIndex(IndexName, Keypath, ObjectParameters)\n```\n<span style=\"color:green\">参数</span>：\n```\nindexName：要创建的索引名称\nKeypath：创建当前索引使用的存储对象的列记录\nObjectParameters：当前索引可选的属性，为可选参数，其值可以有unique（唯一），multiEntry（可多选），locale\n```\n<span style=\"color:green\">实例</span>：\n```\nvar store = IDBDatabase.createObjectStore(sName,{\"keyPath\":keyName});\nstore.createIndex(\"nameIndex\",\"name\",{unique:true});\n```\n#### 删除索引\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的deleteIndex(objectIndexName)来删除：\n```\nIDBObjectStore.deleteIndex(IndexName)\n```\n<span style=\"color:green\">参数</span>：\n```\nindexName：要删除的索引名称\n```\n#### 使用索引\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的index(objectIndexName)来获取索引IDBIndex 对象：\n```\nIDBObjectStore.index(IndexName)\n```\n<span style=\"color:green\">参数</span>：\n```\nindexName：已存在的索引名称\n<span style=\"color:green\">返回值</span>：\nIDBIndex对象，可以配合游标，检索数据。\n```\n<span style=\"color:green\">实例</span>：\n```\nfunction getDataByIndex(dbobj,storeName){\n    var transaction=dbobj.transaction(storeName);\n    var store=transaction.objectStore(storeName);\n    var index = store.index(\"nameIndex\");\n    index.get('张三').onsuccess=function(e){\n        var student=e.target.result;\n        console.log(student.id);\n    }\n}\n```\n<span style=\"color:red\">关于游标</span>：\nIndexedDb的游标，有点类似数组的下标值，可以向前，向后遍历一个数组，甚至可以配合其它条件跳过一些数据。索引跟游标是分不开的，可以在建立索引的时候同时建立游标，然后就可以对数据进行遍历。\n#### 创建游标\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的openCursor(KeyRange, Direction)来创建：\n```\nIDBObjectStore.openCursor(KeyRange, Direction)\n```\n<span style=\"color:green\">参数</span>：\n```\nKeyRange：游标的范围对象，即使用该游标时只会返回指定范围内的数据记录，可选，如果不送该值，则返回所有的数据记录。\nDirection：游标遍历的方向，可选，如果不送该值，则默认为“next”。\n```\nKeyRange取值，有以下四种\n```\n// 只取得当前索引的值为 zhangsan 的数据\nIDBKeyRange.only(\"zhangsan\");\n// 只取得当前索引的值大于 zhangsan，并且不包括 zhangsan 的数据\nIDBKeyRange.lowerBound(\"zhangsan\", true);\n// 只取得当前索引的值小于 zhangsan，并且包括 zhangsan 的数据\nIDBKeyRange.upperBound(\"zhangsan\", false);\n// 取得当前索引的值介于 zhangsan 和 lisi 之间，并且包括zhangsan，但不包括 lisi 的数据\nIDBKeyRange.bound(\"zhangsan\", \"lisi\", false, true);\n```\nDirection取值，有以下四种：\n```\nIDBCursor.NEXT                                  //顺序循环\nIDBCursor.NEXT_NO_DUPLICATE       \t\t\t\t//顺序循环不重复\nIDBCursor.PREV                                  //倒序循环\nIDBCursor.PREV_NO_DUPLICATE        \t\t\t\t//倒序循环不重复\n```\n<span style=\"color:green\">返回值</span>：\n返回一个IDBRequest对像，其中包含数据记录的详细情况。\n```\n#### 遍历\n类似数组中的自增或自减的操作，IndexedDb中，使用continue()，来进行游标的移动，直到没有数据返回了，返回为undefined结束。\n\n### 兼容性\n现在大部分支持Html5的浏览器都已支持IndexedDb，但在IE11、Edge中只是部分功能支持，Opera暂时不支持，安卓4.4以上全部支持。\n通常在使用IndexedDb之前可以加部分前缀：\n```\nwindow.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB ||window.msIndexedDB ;\nwindow.IDBCursor = window.IDBCursor || window.webkitIDBCursor || window.msIDBCursor ;\nwindow.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction ;\nwindow.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange ;\n```\n具体可<a style=\"color:red\" href=\"http://caniuse.com/#feat=indexeddb\" target=\"\" _blank=\"\">点击此处</a>查询。\n\n### 总结\nIndexedDb是HTML5 的一个重要特性，它实现了本地数据的持久性，使用户能够在线和离线访问 Web 应用程序，也使移动应用程序更灵敏，使用的带宽更少，而且能够在低带宽场景中更高效地工作。在使用过程中，只有将索引，游标等功能相结合才能发挥出它最大的作用。\n\n### 详细实例\n可以<a href=\"http://wslover.byethost11.com/shows/db02/DbTest.html\" style=\"color:red\" target=\"_blank\">点击此处</a>进行在线演示。\n所有代码以放在github上，<a href=\"https://github.com/wsDever/indexedDb\" style=\"color:red\" target=\"_blank\">点击此处</a>下载。\n","source":"_posts/20161122.md","raw":"---\ntitle: HTML5-indexedDB 的使用\ncategories:\n  - html5\ntags:\n  - html5\ncomments: true\ndate: 2016-11-22 14:30:42\n---\n### 简单介绍\nIndexedDb是html5新添加的特性，目地是使本地数据能够持久性，使用户能够在线和离线访问 Web 应用程序。关于HTML5 本地数据持久性存储，除了IndexedDb，还有 localstorage，和 sessionstrorage ，它们均支持使用一个简单的键值对来存储需要的数据，但对大量结构化数据的存储及高效检索却显的无能为力。\n### 异步API\n在IndexedDB中的大部分操作并不是我们常用的“调用——返回”的模式，而是“请求——响应”的模式，\n比如打开数据库：\n```\nvar request=window.indexedDB.open('myDB');\n```\n它的返回值并不是一个IndexedDb对象，而是一个请求体对象--IDBOpenDBRequest，其中包含了需要的IndexedDb对象，以及三个状态处理函数：\n```\nonerror： 请求失败的回调函数\nonsuccess：请求成功的回调函数\nonupgradeneeded：请求数据库版本变化的回调函数\n```\n<span style=\"color:red\">因为是异步执行，所以请求执行完成，并不一定就能在返回的对象中获取到indexedDb对象句柄。为了避免出现错误，需要在回调中做出相应处理。</span>\n### 数据库\n#### 创建数据库\n<span style=\"color:green\">说明</span>：\nopen可以打开或者创建数据库，如果调用的时候，当前数据库已经存在，则会直接打开，如果不存在就会创建。数据库创建的时候，默认版本是1，如果在open的时候有传入这个参数，那么就会修改数据库的版本号，并调用onupgradeneeded这个回调。需要说明的是，不能打开比当前版本低的数据库，会触发onerror。\n```\nrequest = window.indexedDB.open(name[, version]);\nor\nrequest = window.indexedDB.open(name[, options])\n```\n<span style=\"color:green\">参数</span>：\n```\nname：数据库的名称\nversion：数据库的版本，可选\noption：包含版本及持久存储标志的对象，可选\n```\n<span style=\"color:green\">返回值</span>：\n一个IDBOpenDBRequest对象\n\n<span style=\"color:green\">实例</span>：\n```\nvar request = window.indexedDB.open(\"toDoList\"[, 4]);\nor：\nvar request = window.indexedDB.open(\"toDoList\"[, {version: 4, storage: \"temporary\"}]);\n```\n#### 关闭/删除数据库\n<span style=\"color:green\">说明</span>：\n关闭数据库可以直接调用数据库IDBDatabase对象的close方法，删除数据库使用indexedDB对象的deleteDatabase，如下：\n```\nIDBDatabase.close();\nindexedDB.deleteDatabase(name);\n```\n<span style=\"color:green\">参数</span>：\n```\nname：包含版本及持久存储标志的对象，可选\n```\n<span style=\"color:green\">实例</span>：\n```\n  var DBOpenRequest = window.indexedDB.open(\"toDoList\", 4);\n  DBOpenRequest.onerror = function(event) {\n\n  };\n\n  DBOpenRequest.onsuccess = function(event) {\n        db = DBOpenRequest.result;\n        db.close();\n  }\n```\n### 数据存储对象（数据表）\n<span style=\"color:green\">说明</span>：\nIndexedDb中的存储对象，相当于mySql中的数据表，一个数据库中可以创建多张数据表，在IndexedDb中也是一样，一个数据库中可以创建多个存储对象，称之为objectStore。\n#### 创建objectStore（数据表）\n<span style=\"color:green\">说明</span>：\n使用IDBDatabase对象的createObjectStore方法：\n```\nIDBDatabase.createObjectStore(storeName [,\"keyPath\"] )\n```\n<span style=\"color:green\">参数</span>：\n```\nstoreName：存储对象的名字\nkeyPath：主健名，可选\n```\n<span style=\"color:green\">返回值</span>：\n返回创建出来的存储对象。\n\n<span style=\"color:green\">实例</span>：\n```\n IDBDatabase.createObjectStore('students',{keyPath:\"id\"});\n```\n#### 删除objectStore（数据表）\n<span style=\"color:green\">说明</span>：\n使用IDBDatabase对象的deleteObjectStore方法：\n```\nIDBDatabase.deleteObjectStore(storeName)\n```\n<span style=\"color:green\">参数</span>：\n```\nstoreName：要删除的存储对象\n```\n#### 使用事务\n<span style=\"color:green\">说明</span>：\n在IndexedDb中对存储对象中的数据所有操作都是基于事务的，事务提供了数据库操作的一个原子集合，对数据进行写入操作，同时也具有中止和提交工具。\n\n<span style=\"color:green\">事务模式</span>：\n```\n模式                                描述\nreadonly                            提供对某个对象存储的只读访问，在查询对象存储时使用。\nreadwrite                           提供对某个对象存储的读取和写入访问权。\nversionchange                       提供读取和写入访问权来修改对象存储定义，或者创建一个新的对象存储。\n```\n默认的事务模式为 readonly，可以时刻打开多个 readonly 事务，但一次只能打开一个 readwrite 事务。因此，只有在数据更新时才考虑使用 readwrite 事务，其它情况下只用 readonly 。单独的（不同时打开其它类型事务时）versionchange 事务操作一个数据库或对象存储。可以在 onupgradeneeded 事件处理函数中使用 versionchange 事务用来创建、修改或删除一个对象存储。\n<span style=\"color:green\">创建事务</span>：\n使用IDBDatabase中的transaction(storeName,mode)来创建事务。\n```\nIDBDatabase.transaction(\"students\");\n```\n<span style=\"color:green\">参数</span>：\n```\nstoreName：\t数据存储对象的名称，可以是多个，使用数组形式传入，此时模式不能是 readwrite\nmode：\t\t事务模式，可选，不传入是使用默认值\n```\n### 操作数据存储对象（数据表）\n<span style=\"color:red\">关于索引</span>：\n对索引的使用使得在web端对大量数据高效检索,快速定位成为可能，这也是IndexedDb与其它html5的web存储的主要区别之一。在indexedDB中有两种索引，一种是自增长的int值；一种是keyPath，是自己指定索引列，常用的索引也是这种。\n#### 创建索引\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的createIndex(objectIndexName, objectKeypath, optionalObjectParameters)来创建：\n```\nIDBObjectStore.createIndex(IndexName, Keypath, ObjectParameters)\n```\n<span style=\"color:green\">参数</span>：\n```\nindexName：要创建的索引名称\nKeypath：创建当前索引使用的存储对象的列记录\nObjectParameters：当前索引可选的属性，为可选参数，其值可以有unique（唯一），multiEntry（可多选），locale\n```\n<span style=\"color:green\">实例</span>：\n```\nvar store = IDBDatabase.createObjectStore(sName,{\"keyPath\":keyName});\nstore.createIndex(\"nameIndex\",\"name\",{unique:true});\n```\n#### 删除索引\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的deleteIndex(objectIndexName)来删除：\n```\nIDBObjectStore.deleteIndex(IndexName)\n```\n<span style=\"color:green\">参数</span>：\n```\nindexName：要删除的索引名称\n```\n#### 使用索引\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的index(objectIndexName)来获取索引IDBIndex 对象：\n```\nIDBObjectStore.index(IndexName)\n```\n<span style=\"color:green\">参数</span>：\n```\nindexName：已存在的索引名称\n<span style=\"color:green\">返回值</span>：\nIDBIndex对象，可以配合游标，检索数据。\n```\n<span style=\"color:green\">实例</span>：\n```\nfunction getDataByIndex(dbobj,storeName){\n    var transaction=dbobj.transaction(storeName);\n    var store=transaction.objectStore(storeName);\n    var index = store.index(\"nameIndex\");\n    index.get('张三').onsuccess=function(e){\n        var student=e.target.result;\n        console.log(student.id);\n    }\n}\n```\n<span style=\"color:red\">关于游标</span>：\nIndexedDb的游标，有点类似数组的下标值，可以向前，向后遍历一个数组，甚至可以配合其它条件跳过一些数据。索引跟游标是分不开的，可以在建立索引的时候同时建立游标，然后就可以对数据进行遍历。\n#### 创建游标\n<span style=\"color:green\">说明</span>：\n使用IDBObjectStore的openCursor(KeyRange, Direction)来创建：\n```\nIDBObjectStore.openCursor(KeyRange, Direction)\n```\n<span style=\"color:green\">参数</span>：\n```\nKeyRange：游标的范围对象，即使用该游标时只会返回指定范围内的数据记录，可选，如果不送该值，则返回所有的数据记录。\nDirection：游标遍历的方向，可选，如果不送该值，则默认为“next”。\n```\nKeyRange取值，有以下四种\n```\n// 只取得当前索引的值为 zhangsan 的数据\nIDBKeyRange.only(\"zhangsan\");\n// 只取得当前索引的值大于 zhangsan，并且不包括 zhangsan 的数据\nIDBKeyRange.lowerBound(\"zhangsan\", true);\n// 只取得当前索引的值小于 zhangsan，并且包括 zhangsan 的数据\nIDBKeyRange.upperBound(\"zhangsan\", false);\n// 取得当前索引的值介于 zhangsan 和 lisi 之间，并且包括zhangsan，但不包括 lisi 的数据\nIDBKeyRange.bound(\"zhangsan\", \"lisi\", false, true);\n```\nDirection取值，有以下四种：\n```\nIDBCursor.NEXT                                  //顺序循环\nIDBCursor.NEXT_NO_DUPLICATE       \t\t\t\t//顺序循环不重复\nIDBCursor.PREV                                  //倒序循环\nIDBCursor.PREV_NO_DUPLICATE        \t\t\t\t//倒序循环不重复\n```\n<span style=\"color:green\">返回值</span>：\n返回一个IDBRequest对像，其中包含数据记录的详细情况。\n```\n#### 遍历\n类似数组中的自增或自减的操作，IndexedDb中，使用continue()，来进行游标的移动，直到没有数据返回了，返回为undefined结束。\n\n### 兼容性\n现在大部分支持Html5的浏览器都已支持IndexedDb，但在IE11、Edge中只是部分功能支持，Opera暂时不支持，安卓4.4以上全部支持。\n通常在使用IndexedDb之前可以加部分前缀：\n```\nwindow.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB ||window.msIndexedDB ;\nwindow.IDBCursor = window.IDBCursor || window.webkitIDBCursor || window.msIDBCursor ;\nwindow.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction ;\nwindow.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange ;\n```\n具体可<a style=\"color:red\" href=\"http://caniuse.com/#feat=indexeddb\" target=\"\" _blank=\"\">点击此处</a>查询。\n\n### 总结\nIndexedDb是HTML5 的一个重要特性，它实现了本地数据的持久性，使用户能够在线和离线访问 Web 应用程序，也使移动应用程序更灵敏，使用的带宽更少，而且能够在低带宽场景中更高效地工作。在使用过程中，只有将索引，游标等功能相结合才能发挥出它最大的作用。\n\n### 详细实例\n可以<a href=\"http://wslover.byethost11.com/shows/db02/DbTest.html\" style=\"color:red\" target=\"_blank\">点击此处</a>进行在线演示。\n所有代码以放在github上，<a href=\"https://github.com/wsDever/indexedDb\" style=\"color:red\" target=\"_blank\">点击此处</a>下载。\n","slug":"20161122","published":1,"updated":"2016-11-22T07:47:49.073Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulou000gb8fsej881hig","content":"<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>IndexedDb是html5新添加的特性，目地是使本地数据能够持久性，使用户能够在线和离线访问 Web 应用程序。关于HTML5 本地数据持久性存储，除了IndexedDb，还有 localstorage，和 sessionstrorage ，它们均支持使用一个简单的键值对来存储需要的数据，但对大量结构化数据的存储及高效检索却显的无能为力。</p>\n<h3 id=\"异步API\"><a href=\"#异步API\" class=\"headerlink\" title=\"异步API\"></a>异步API</h3><p>在IndexedDB中的大部分操作并不是我们常用的“调用——返回”的模式，而是“请求——响应”的模式，<br>比如打开数据库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var request=window.indexedDB.open(&apos;myDB&apos;);</div></pre></td></tr></table></figure></p>\n<p>它的返回值并不是一个IndexedDb对象，而是一个请求体对象–IDBOpenDBRequest，其中包含了需要的IndexedDb对象，以及三个状态处理函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">onerror： 请求失败的回调函数</div><div class=\"line\">onsuccess：请求成功的回调函数</div><div class=\"line\">onupgradeneeded：请求数据库版本变化的回调函数</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\">因为是异步执行，所以请求执行完成，并不一定就能在返回的对象中获取到indexedDb对象句柄。为了避免出现错误，需要在回调中做出相应处理。</span></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><p><span style=\"color:green\">说明</span>：<br>open可以打开或者创建数据库，如果调用的时候，当前数据库已经存在，则会直接打开，如果不存在就会创建。数据库创建的时候，默认版本是1，如果在open的时候有传入这个参数，那么就会修改数据库的版本号，并调用onupgradeneeded这个回调。需要说明的是，不能打开比当前版本低的数据库，会触发onerror。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">request = window.indexedDB.open(name[, version]);</div><div class=\"line\">or</div><div class=\"line\">request = window.indexedDB.open(name[, options])</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">name：数据库的名称</div><div class=\"line\">version：数据库的版本，可选</div><div class=\"line\">option：包含版本及持久存储标志的对象，可选</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">返回值</span>：<br>一个IDBOpenDBRequest对象</p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var request = window.indexedDB.open(&quot;toDoList&quot;[, 4]);</div><div class=\"line\">or：</div><div class=\"line\">var request = window.indexedDB.open(&quot;toDoList&quot;[, &#123;version: 4, storage: &quot;temporary&quot;&#125;]);</div></pre></td></tr></table></figure></p>\n<h4 id=\"关闭-删除数据库\"><a href=\"#关闭-删除数据库\" class=\"headerlink\" title=\"关闭/删除数据库\"></a>关闭/删除数据库</h4><p><span style=\"color:green\">说明</span>：<br>关闭数据库可以直接调用数据库IDBDatabase对象的close方法，删除数据库使用indexedDB对象的deleteDatabase，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.close();</div><div class=\"line\">indexedDB.deleteDatabase(name);</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">name：包含版本及持久存储标志的对象，可选</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var DBOpenRequest = window.indexedDB.open(&quot;toDoList&quot;, 4);</div><div class=\"line\">DBOpenRequest.onerror = function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">DBOpenRequest.onsuccess = function(event) &#123;</div><div class=\"line\">      db = DBOpenRequest.result;</div><div class=\"line\">      db.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"数据存储对象（数据表）\"><a href=\"#数据存储对象（数据表）\" class=\"headerlink\" title=\"数据存储对象（数据表）\"></a>数据存储对象（数据表）</h3><p><span style=\"color:green\">说明</span>：<br>IndexedDb中的存储对象，相当于mySql中的数据表，一个数据库中可以创建多张数据表，在IndexedDb中也是一样，一个数据库中可以创建多个存储对象，称之为objectStore。</p>\n<h4 id=\"创建objectStore（数据表）\"><a href=\"#创建objectStore（数据表）\" class=\"headerlink\" title=\"创建objectStore（数据表）\"></a>创建objectStore（数据表）</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBDatabase对象的createObjectStore方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.createObjectStore(storeName [,&quot;keyPath&quot;] )</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">storeName：存储对象的名字</div><div class=\"line\">keyPath：主健名，可选</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">返回值</span>：<br>返回创建出来的存储对象。</p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.createObjectStore(&apos;students&apos;,&#123;keyPath:&quot;id&quot;&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除objectStore（数据表）\"><a href=\"#删除objectStore（数据表）\" class=\"headerlink\" title=\"删除objectStore（数据表）\"></a>删除objectStore（数据表）</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBDatabase对象的deleteObjectStore方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.deleteObjectStore(storeName)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">storeName：要删除的存储对象</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用事务\"><a href=\"#使用事务\" class=\"headerlink\" title=\"使用事务\"></a>使用事务</h4><p><span style=\"color:green\">说明</span>：<br>在IndexedDb中对存储对象中的数据所有操作都是基于事务的，事务提供了数据库操作的一个原子集合，对数据进行写入操作，同时也具有中止和提交工具。</p>\n<p><span style=\"color:green\">事务模式</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">模式                                描述</div><div class=\"line\">readonly                            提供对某个对象存储的只读访问，在查询对象存储时使用。</div><div class=\"line\">readwrite                           提供对某个对象存储的读取和写入访问权。</div><div class=\"line\">versionchange                       提供读取和写入访问权来修改对象存储定义，或者创建一个新的对象存储。</div></pre></td></tr></table></figure></p>\n<p>默认的事务模式为 readonly，可以时刻打开多个 readonly 事务，但一次只能打开一个 readwrite 事务。因此，只有在数据更新时才考虑使用 readwrite 事务，其它情况下只用 readonly 。单独的（不同时打开其它类型事务时）versionchange 事务操作一个数据库或对象存储。可以在 onupgradeneeded 事件处理函数中使用 versionchange 事务用来创建、修改或删除一个对象存储。<br><span style=\"color:green\">创建事务</span>：<br>使用IDBDatabase中的transaction(storeName,mode)来创建事务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.transaction(&quot;students&quot;);</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">storeName：\t数据存储对象的名称，可以是多个，使用数组形式传入，此时模式不能是 readwrite</div><div class=\"line\">mode：\t\t事务模式，可选，不传入是使用默认值</div></pre></td></tr></table></figure></p>\n<h3 id=\"操作数据存储对象（数据表）\"><a href=\"#操作数据存储对象（数据表）\" class=\"headerlink\" title=\"操作数据存储对象（数据表）\"></a>操作数据存储对象（数据表）</h3><p><span style=\"color:red\">关于索引</span>：<br>对索引的使用使得在web端对大量数据高效检索,快速定位成为可能，这也是IndexedDb与其它html5的web存储的主要区别之一。在indexedDB中有两种索引，一种是自增长的int值；一种是keyPath，是自己指定索引列，常用的索引也是这种。</p>\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的createIndex(objectIndexName, objectKeypath, optionalObjectParameters)来创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.createIndex(IndexName, Keypath, ObjectParameters)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">indexName：要创建的索引名称</div><div class=\"line\">Keypath：创建当前索引使用的存储对象的列记录</div><div class=\"line\">ObjectParameters：当前索引可选的属性，为可选参数，其值可以有unique（唯一），multiEntry（可多选），locale</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var store = IDBDatabase.createObjectStore(sName,&#123;&quot;keyPath&quot;:keyName&#125;);</div><div class=\"line\">store.createIndex(&quot;nameIndex&quot;,&quot;name&quot;,&#123;unique:true&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的deleteIndex(objectIndexName)来删除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.deleteIndex(IndexName)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">indexName：要删除的索引名称</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用索引\"><a href=\"#使用索引\" class=\"headerlink\" title=\"使用索引\"></a>使用索引</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的index(objectIndexName)来获取索引IDBIndex 对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.index(IndexName)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">indexName：已存在的索引名称</div><div class=\"line\">&lt;span style=&quot;color:green&quot;&gt;返回值&lt;/span&gt;：</div><div class=\"line\">IDBIndex对象，可以配合游标，检索数据。</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getDataByIndex(dbobj,storeName)&#123;</div><div class=\"line\">    var transaction=dbobj.transaction(storeName);</div><div class=\"line\">    var store=transaction.objectStore(storeName);</div><div class=\"line\">    var index = store.index(&quot;nameIndex&quot;);</div><div class=\"line\">    index.get(&apos;张三&apos;).onsuccess=function(e)&#123;</div><div class=\"line\">        var student=e.target.result;</div><div class=\"line\">        console.log(student.id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\">关于游标</span>：<br>IndexedDb的游标，有点类似数组的下标值，可以向前，向后遍历一个数组，甚至可以配合其它条件跳过一些数据。索引跟游标是分不开的，可以在建立索引的时候同时建立游标，然后就可以对数据进行遍历。</p>\n<h4 id=\"创建游标\"><a href=\"#创建游标\" class=\"headerlink\" title=\"创建游标\"></a>创建游标</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的openCursor(KeyRange, Direction)来创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.openCursor(KeyRange, Direction)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyRange：游标的范围对象，即使用该游标时只会返回指定范围内的数据记录，可选，如果不送该值，则返回所有的数据记录。</div><div class=\"line\">Direction：游标遍历的方向，可选，如果不送该值，则默认为“next”。</div></pre></td></tr></table></figure></p>\n<p>KeyRange取值，有以下四种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 只取得当前索引的值为 zhangsan 的数据</div><div class=\"line\">IDBKeyRange.only(&quot;zhangsan&quot;);</div><div class=\"line\">// 只取得当前索引的值大于 zhangsan，并且不包括 zhangsan 的数据</div><div class=\"line\">IDBKeyRange.lowerBound(&quot;zhangsan&quot;, true);</div><div class=\"line\">// 只取得当前索引的值小于 zhangsan，并且包括 zhangsan 的数据</div><div class=\"line\">IDBKeyRange.upperBound(&quot;zhangsan&quot;, false);</div><div class=\"line\">// 取得当前索引的值介于 zhangsan 和 lisi 之间，并且包括zhangsan，但不包括 lisi 的数据</div><div class=\"line\">IDBKeyRange.bound(&quot;zhangsan&quot;, &quot;lisi&quot;, false, true);</div></pre></td></tr></table></figure></p>\n<p>Direction取值，有以下四种：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBCursor.NEXT                                  //顺序循环</div><div class=\"line\">IDBCursor.NEXT_NO_DUPLICATE       \t\t\t\t//顺序循环不重复</div><div class=\"line\">IDBCursor.PREV                                  //倒序循环</div><div class=\"line\">IDBCursor.PREV_NO_DUPLICATE        \t\t\t\t//倒序循环不重复</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">返回值</span>：<br>返回一个IDBRequest对像，其中包含数据记录的详细情况。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#### 遍历</div><div class=\"line\">类似数组中的自增或自减的操作，IndexedDb中，使用continue()，来进行游标的移动，直到没有数据返回了，返回为undefined结束。</div><div class=\"line\"></div><div class=\"line\">### 兼容性</div><div class=\"line\">现在大部分支持Html5的浏览器都已支持IndexedDb，但在IE11、Edge中只是部分功能支持，Opera暂时不支持，安卓4.4以上全部支持。</div><div class=\"line\">通常在使用IndexedDb之前可以加部分前缀：</div></pre></td></tr></table></figure></p>\n<p>window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB ||window.msIndexedDB ;<br>window.IDBCursor = window.IDBCursor || window.webkitIDBCursor || window.msIDBCursor ;<br>window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction ;<br>window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange ;<br>```<br>具体可<a style=\"color:red\" href=\"http://caniuse.com/#feat=indexeddb\" target=\"_blank\" _blank=\"\" rel=\"external\">点击此处</a>查询。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>IndexedDb是HTML5 的一个重要特性，它实现了本地数据的持久性，使用户能够在线和离线访问 Web 应用程序，也使移动应用程序更灵敏，使用的带宽更少，而且能够在低带宽场景中更高效地工作。在使用过程中，只有将索引，游标等功能相结合才能发挥出它最大的作用。</p>\n<h3 id=\"详细实例\"><a href=\"#详细实例\" class=\"headerlink\" title=\"详细实例\"></a>详细实例</h3><p>可以<a href=\"http://wslover.byethost11.com/shows/db02/DbTest.html\" style=\"color:red\" target=\"_blank\">点击此处</a>进行在线演示。<br>所有代码以放在github上，<a href=\"https://github.com/wsDever/indexedDb\" style=\"color:red\" target=\"_blank\">点击此处</a>下载。</p>\n","excerpt":"","more":"<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>IndexedDb是html5新添加的特性，目地是使本地数据能够持久性，使用户能够在线和离线访问 Web 应用程序。关于HTML5 本地数据持久性存储，除了IndexedDb，还有 localstorage，和 sessionstrorage ，它们均支持使用一个简单的键值对来存储需要的数据，但对大量结构化数据的存储及高效检索却显的无能为力。</p>\n<h3 id=\"异步API\"><a href=\"#异步API\" class=\"headerlink\" title=\"异步API\"></a>异步API</h3><p>在IndexedDB中的大部分操作并不是我们常用的“调用——返回”的模式，而是“请求——响应”的模式，<br>比如打开数据库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var request=window.indexedDB.open(&apos;myDB&apos;);</div></pre></td></tr></table></figure></p>\n<p>它的返回值并不是一个IndexedDb对象，而是一个请求体对象–IDBOpenDBRequest，其中包含了需要的IndexedDb对象，以及三个状态处理函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">onerror： 请求失败的回调函数</div><div class=\"line\">onsuccess：请求成功的回调函数</div><div class=\"line\">onupgradeneeded：请求数据库版本变化的回调函数</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\">因为是异步执行，所以请求执行完成，并不一定就能在返回的对象中获取到indexedDb对象句柄。为了避免出现错误，需要在回调中做出相应处理。</span></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><p><span style=\"color:green\">说明</span>：<br>open可以打开或者创建数据库，如果调用的时候，当前数据库已经存在，则会直接打开，如果不存在就会创建。数据库创建的时候，默认版本是1，如果在open的时候有传入这个参数，那么就会修改数据库的版本号，并调用onupgradeneeded这个回调。需要说明的是，不能打开比当前版本低的数据库，会触发onerror。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">request = window.indexedDB.open(name[, version]);</div><div class=\"line\">or</div><div class=\"line\">request = window.indexedDB.open(name[, options])</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">name：数据库的名称</div><div class=\"line\">version：数据库的版本，可选</div><div class=\"line\">option：包含版本及持久存储标志的对象，可选</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">返回值</span>：<br>一个IDBOpenDBRequest对象</p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var request = window.indexedDB.open(&quot;toDoList&quot;[, 4]);</div><div class=\"line\">or：</div><div class=\"line\">var request = window.indexedDB.open(&quot;toDoList&quot;[, &#123;version: 4, storage: &quot;temporary&quot;&#125;]);</div></pre></td></tr></table></figure></p>\n<h4 id=\"关闭-删除数据库\"><a href=\"#关闭-删除数据库\" class=\"headerlink\" title=\"关闭/删除数据库\"></a>关闭/删除数据库</h4><p><span style=\"color:green\">说明</span>：<br>关闭数据库可以直接调用数据库IDBDatabase对象的close方法，删除数据库使用indexedDB对象的deleteDatabase，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.close();</div><div class=\"line\">indexedDB.deleteDatabase(name);</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">name：包含版本及持久存储标志的对象，可选</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var DBOpenRequest = window.indexedDB.open(&quot;toDoList&quot;, 4);</div><div class=\"line\">DBOpenRequest.onerror = function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">DBOpenRequest.onsuccess = function(event) &#123;</div><div class=\"line\">      db = DBOpenRequest.result;</div><div class=\"line\">      db.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"数据存储对象（数据表）\"><a href=\"#数据存储对象（数据表）\" class=\"headerlink\" title=\"数据存储对象（数据表）\"></a>数据存储对象（数据表）</h3><p><span style=\"color:green\">说明</span>：<br>IndexedDb中的存储对象，相当于mySql中的数据表，一个数据库中可以创建多张数据表，在IndexedDb中也是一样，一个数据库中可以创建多个存储对象，称之为objectStore。</p>\n<h4 id=\"创建objectStore（数据表）\"><a href=\"#创建objectStore（数据表）\" class=\"headerlink\" title=\"创建objectStore（数据表）\"></a>创建objectStore（数据表）</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBDatabase对象的createObjectStore方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.createObjectStore(storeName [,&quot;keyPath&quot;] )</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">storeName：存储对象的名字</div><div class=\"line\">keyPath：主健名，可选</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">返回值</span>：<br>返回创建出来的存储对象。</p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.createObjectStore(&apos;students&apos;,&#123;keyPath:&quot;id&quot;&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除objectStore（数据表）\"><a href=\"#删除objectStore（数据表）\" class=\"headerlink\" title=\"删除objectStore（数据表）\"></a>删除objectStore（数据表）</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBDatabase对象的deleteObjectStore方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.deleteObjectStore(storeName)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">storeName：要删除的存储对象</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用事务\"><a href=\"#使用事务\" class=\"headerlink\" title=\"使用事务\"></a>使用事务</h4><p><span style=\"color:green\">说明</span>：<br>在IndexedDb中对存储对象中的数据所有操作都是基于事务的，事务提供了数据库操作的一个原子集合，对数据进行写入操作，同时也具有中止和提交工具。</p>\n<p><span style=\"color:green\">事务模式</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">模式                                描述</div><div class=\"line\">readonly                            提供对某个对象存储的只读访问，在查询对象存储时使用。</div><div class=\"line\">readwrite                           提供对某个对象存储的读取和写入访问权。</div><div class=\"line\">versionchange                       提供读取和写入访问权来修改对象存储定义，或者创建一个新的对象存储。</div></pre></td></tr></table></figure></p>\n<p>默认的事务模式为 readonly，可以时刻打开多个 readonly 事务，但一次只能打开一个 readwrite 事务。因此，只有在数据更新时才考虑使用 readwrite 事务，其它情况下只用 readonly 。单独的（不同时打开其它类型事务时）versionchange 事务操作一个数据库或对象存储。可以在 onupgradeneeded 事件处理函数中使用 versionchange 事务用来创建、修改或删除一个对象存储。<br><span style=\"color:green\">创建事务</span>：<br>使用IDBDatabase中的transaction(storeName,mode)来创建事务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBDatabase.transaction(&quot;students&quot;);</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">storeName：\t数据存储对象的名称，可以是多个，使用数组形式传入，此时模式不能是 readwrite</div><div class=\"line\">mode：\t\t事务模式，可选，不传入是使用默认值</div></pre></td></tr></table></figure></p>\n<h3 id=\"操作数据存储对象（数据表）\"><a href=\"#操作数据存储对象（数据表）\" class=\"headerlink\" title=\"操作数据存储对象（数据表）\"></a>操作数据存储对象（数据表）</h3><p><span style=\"color:red\">关于索引</span>：<br>对索引的使用使得在web端对大量数据高效检索,快速定位成为可能，这也是IndexedDb与其它html5的web存储的主要区别之一。在indexedDB中有两种索引，一种是自增长的int值；一种是keyPath，是自己指定索引列，常用的索引也是这种。</p>\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的createIndex(objectIndexName, objectKeypath, optionalObjectParameters)来创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.createIndex(IndexName, Keypath, ObjectParameters)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">indexName：要创建的索引名称</div><div class=\"line\">Keypath：创建当前索引使用的存储对象的列记录</div><div class=\"line\">ObjectParameters：当前索引可选的属性，为可选参数，其值可以有unique（唯一），multiEntry（可多选），locale</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var store = IDBDatabase.createObjectStore(sName,&#123;&quot;keyPath&quot;:keyName&#125;);</div><div class=\"line\">store.createIndex(&quot;nameIndex&quot;,&quot;name&quot;,&#123;unique:true&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的deleteIndex(objectIndexName)来删除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.deleteIndex(IndexName)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">indexName：要删除的索引名称</div></pre></td></tr></table></figure></p>\n<h4 id=\"使用索引\"><a href=\"#使用索引\" class=\"headerlink\" title=\"使用索引\"></a>使用索引</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的index(objectIndexName)来获取索引IDBIndex 对象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.index(IndexName)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">indexName：已存在的索引名称</div><div class=\"line\">&lt;span style=&quot;color:green&quot;&gt;返回值&lt;/span&gt;：</div><div class=\"line\">IDBIndex对象，可以配合游标，检索数据。</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">实例</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getDataByIndex(dbobj,storeName)&#123;</div><div class=\"line\">    var transaction=dbobj.transaction(storeName);</div><div class=\"line\">    var store=transaction.objectStore(storeName);</div><div class=\"line\">    var index = store.index(&quot;nameIndex&quot;);</div><div class=\"line\">    index.get(&apos;张三&apos;).onsuccess=function(e)&#123;</div><div class=\"line\">        var student=e.target.result;</div><div class=\"line\">        console.log(student.id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:red\">关于游标</span>：<br>IndexedDb的游标，有点类似数组的下标值，可以向前，向后遍历一个数组，甚至可以配合其它条件跳过一些数据。索引跟游标是分不开的，可以在建立索引的时候同时建立游标，然后就可以对数据进行遍历。</p>\n<h4 id=\"创建游标\"><a href=\"#创建游标\" class=\"headerlink\" title=\"创建游标\"></a>创建游标</h4><p><span style=\"color:green\">说明</span>：<br>使用IDBObjectStore的openCursor(KeyRange, Direction)来创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBObjectStore.openCursor(KeyRange, Direction)</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">参数</span>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyRange：游标的范围对象，即使用该游标时只会返回指定范围内的数据记录，可选，如果不送该值，则返回所有的数据记录。</div><div class=\"line\">Direction：游标遍历的方向，可选，如果不送该值，则默认为“next”。</div></pre></td></tr></table></figure></p>\n<p>KeyRange取值，有以下四种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 只取得当前索引的值为 zhangsan 的数据</div><div class=\"line\">IDBKeyRange.only(&quot;zhangsan&quot;);</div><div class=\"line\">// 只取得当前索引的值大于 zhangsan，并且不包括 zhangsan 的数据</div><div class=\"line\">IDBKeyRange.lowerBound(&quot;zhangsan&quot;, true);</div><div class=\"line\">// 只取得当前索引的值小于 zhangsan，并且包括 zhangsan 的数据</div><div class=\"line\">IDBKeyRange.upperBound(&quot;zhangsan&quot;, false);</div><div class=\"line\">// 取得当前索引的值介于 zhangsan 和 lisi 之间，并且包括zhangsan，但不包括 lisi 的数据</div><div class=\"line\">IDBKeyRange.bound(&quot;zhangsan&quot;, &quot;lisi&quot;, false, true);</div></pre></td></tr></table></figure></p>\n<p>Direction取值，有以下四种：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">IDBCursor.NEXT                                  //顺序循环</div><div class=\"line\">IDBCursor.NEXT_NO_DUPLICATE       \t\t\t\t//顺序循环不重复</div><div class=\"line\">IDBCursor.PREV                                  //倒序循环</div><div class=\"line\">IDBCursor.PREV_NO_DUPLICATE        \t\t\t\t//倒序循环不重复</div></pre></td></tr></table></figure></p>\n<p><span style=\"color:green\">返回值</span>：<br>返回一个IDBRequest对像，其中包含数据记录的详细情况。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#### 遍历</div><div class=\"line\">类似数组中的自增或自减的操作，IndexedDb中，使用continue()，来进行游标的移动，直到没有数据返回了，返回为undefined结束。</div><div class=\"line\"></div><div class=\"line\">### 兼容性</div><div class=\"line\">现在大部分支持Html5的浏览器都已支持IndexedDb，但在IE11、Edge中只是部分功能支持，Opera暂时不支持，安卓4.4以上全部支持。</div><div class=\"line\">通常在使用IndexedDb之前可以加部分前缀：</div></pre></td></tr></table></figure></p>\n<p>window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB ||window.msIndexedDB ;<br>window.IDBCursor = window.IDBCursor || window.webkitIDBCursor || window.msIDBCursor ;<br>window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction ;<br>window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange ;<br>```<br>具体可<a style=\"color:red\" href=\"http://caniuse.com/#feat=indexeddb\" target=\"\" _blank=\"\">点击此处</a>查询。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>IndexedDb是HTML5 的一个重要特性，它实现了本地数据的持久性，使用户能够在线和离线访问 Web 应用程序，也使移动应用程序更灵敏，使用的带宽更少，而且能够在低带宽场景中更高效地工作。在使用过程中，只有将索引，游标等功能相结合才能发挥出它最大的作用。</p>\n<h3 id=\"详细实例\"><a href=\"#详细实例\" class=\"headerlink\" title=\"详细实例\"></a>详细实例</h3><p>可以<a href=\"http://wslover.byethost11.com/shows/db02/DbTest.html\" style=\"color:red\" target=\"_blank\">点击此处</a>进行在线演示。<br>所有代码以放在github上，<a href=\"https://github.com/wsDever/indexedDb\" style=\"color:red\" target=\"_blank\">点击此处</a>下载。</p>\n"},{"title":"ES6中let的使用","comments":1,"date":"2016-10-01T02:01:18.000Z","_content":"####  基本用法\nlet是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：\n```\nfor(var i=0;i<1;i++){\n\tvar b = 3;\n\tlet c = 4;\n}\nconsole.log(b);\t\t\t// 输出为:3\nconsole.log(c);\t\t\t// 出错\n```\n在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。\n这表明，let声明的变量只在它所在的代码块有效。\n再如下面的计数器代码：\n```\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); \t\t// 10\n```\n由于var声明的变量在整个作用域中都有用，所以每一次循环，新的i值都会覆盖旧值，导致输出的是最后一轮的i的值，也就是 10 。\n如果用循环输出a[i]()，所有的值都是 10 。\n```\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); \t\t// 6\n```\n由于let声明的变量只能在当前的代码块中都有用，所以每一次循环，相当于创建了一个新的变量i，所以每次输出的都是当前代码块中的i 。\n如果用循环输出a[i]()，得到的就是当前的 i 。\n#### 无变量提升\n```\nconsole.log(foo); \t\t// 输出undefined\nconsole.log(bar); \t\t// 报错\n\nvar foo = 2;\nlet bar = 2;\n```\nvar变量会被提升到代码块的最前面声明，而let不会，输出的时候就会报错。\n#### 变量区域绑定\n```\nvar a = 123;\n\nif (true) {\n  a = 'abc'; \t\t// 报错\n  let a;\n}\n```\n上面声明了一个局部变量a，导致后者绑定这个块级作用域，所以在let声明变量前，对a赋值会报错。\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）\n```\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; \t\t\t// 报错\n  console.log(tmp); \t// 报错\n\n  let tmp; // TDZ结束\n  console.log(tmp); \t// undefined\n\n  tmp = 123;\n  console.log(tmp); \t// 123\n}\n```\n#### 不允许重复声明\nlet不允许在相同作用域内，重复声明同一个变量。\n```\n// 报错\nfunction () {\n\tvar a = 3 ;\t\t// 报错\n  \tlet a = 10;\t\t// 报错\n  \tlet a = 1;\t\t// 报错\n  \tif(true){\n  \t\tlet a = 6 ;\t\t// 正确\n  \t}\n}\n```\n#### 全部let变量不属于顶层变量\nvar变量也是window顶层变量，而let变量不再属于window对象。\n```\nvar a = 1;\nwindow.a \t\t// 1\nthiw.a \t\t\t1\n\nlet b = 1;\nwindow.b \t\t// undefined\n```\n\n","source":"_posts/20161110.md","raw":"---\ntitle: ES6中let的使用\ncategories:\n  - javascript\ntags:\n  - javascript\n  - ES6\ncomments: true\ndate: 2016-10-01 10:01:18\n---\n####  基本用法\nlet是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：\n```\nfor(var i=0;i<1;i++){\n\tvar b = 3;\n\tlet c = 4;\n}\nconsole.log(b);\t\t\t// 输出为:3\nconsole.log(c);\t\t\t// 出错\n```\n在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。\n这表明，let声明的变量只在它所在的代码块有效。\n再如下面的计数器代码：\n```\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); \t\t// 10\n```\n由于var声明的变量在整个作用域中都有用，所以每一次循环，新的i值都会覆盖旧值，导致输出的是最后一轮的i的值，也就是 10 。\n如果用循环输出a[i]()，所有的值都是 10 。\n```\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); \t\t// 6\n```\n由于let声明的变量只能在当前的代码块中都有用，所以每一次循环，相当于创建了一个新的变量i，所以每次输出的都是当前代码块中的i 。\n如果用循环输出a[i]()，得到的就是当前的 i 。\n#### 无变量提升\n```\nconsole.log(foo); \t\t// 输出undefined\nconsole.log(bar); \t\t// 报错\n\nvar foo = 2;\nlet bar = 2;\n```\nvar变量会被提升到代码块的最前面声明，而let不会，输出的时候就会报错。\n#### 变量区域绑定\n```\nvar a = 123;\n\nif (true) {\n  a = 'abc'; \t\t// 报错\n  let a;\n}\n```\n上面声明了一个局部变量a，导致后者绑定这个块级作用域，所以在let声明变量前，对a赋值会报错。\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）\n```\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; \t\t\t// 报错\n  console.log(tmp); \t// 报错\n\n  let tmp; // TDZ结束\n  console.log(tmp); \t// undefined\n\n  tmp = 123;\n  console.log(tmp); \t// 123\n}\n```\n#### 不允许重复声明\nlet不允许在相同作用域内，重复声明同一个变量。\n```\n// 报错\nfunction () {\n\tvar a = 3 ;\t\t// 报错\n  \tlet a = 10;\t\t// 报错\n  \tlet a = 1;\t\t// 报错\n  \tif(true){\n  \t\tlet a = 6 ;\t\t// 正确\n  \t}\n}\n```\n#### 全部let变量不属于顶层变量\nvar变量也是window顶层变量，而let变量不再属于window对象。\n```\nvar a = 1;\nwindow.a \t\t// 1\nthiw.a \t\t\t1\n\nlet b = 1;\nwindow.b \t\t// undefined\n```\n\n","slug":"20161110","published":1,"updated":"2016-11-04T06:10:06.082Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulow000ib8fsjrs590mo","content":"<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>let是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=0;i&lt;1;i++)&#123;</div><div class=\"line\">\tvar b = 3;</div><div class=\"line\">\tlet c = 4;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(b);\t\t\t// 输出为:3</div><div class=\"line\">console.log(c);\t\t\t// 出错</div></pre></td></tr></table></figure></p>\n<p>在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。<br>这表明，let声明的变量只在它所在的代码块有效。<br>再如下面的计数器代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [];</div><div class=\"line\">for (var i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\">  a[i] = function () &#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[6](); \t\t// 10</div></pre></td></tr></table></figure></p>\n<p>由于var声明的变量在整个作用域中都有用，所以每一次循环，新的i值都会覆盖旧值，导致输出的是最后一轮的i的值，也就是 10 。<br>如果用循环输出a<a href=\"\">i</a>，所有的值都是 10 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [];</div><div class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\">  a[i] = function () &#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[6](); \t\t// 6</div></pre></td></tr></table></figure></p>\n<p>由于let声明的变量只能在当前的代码块中都有用，所以每一次循环，相当于创建了一个新的变量i，所以每次输出的都是当前代码块中的i 。<br>如果用循环输出a<a href=\"\">i</a>，得到的就是当前的 i 。</p>\n<h4 id=\"无变量提升\"><a href=\"#无变量提升\" class=\"headerlink\" title=\"无变量提升\"></a>无变量提升</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(foo); \t\t// 输出undefined</div><div class=\"line\">console.log(bar); \t\t// 报错</div><div class=\"line\"></div><div class=\"line\">var foo = 2;</div><div class=\"line\">let bar = 2;</div></pre></td></tr></table></figure>\n<p>var变量会被提升到代码块的最前面声明，而let不会，输出的时候就会报错。</p>\n<h4 id=\"变量区域绑定\"><a href=\"#变量区域绑定\" class=\"headerlink\" title=\"变量区域绑定\"></a>变量区域绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 123;</div><div class=\"line\"></div><div class=\"line\">if (true) &#123;</div><div class=\"line\">  a = &apos;abc&apos;; \t\t// 报错</div><div class=\"line\">  let a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面声明了一个局部变量a，导致后者绑定这个块级作用域，所以在let声明变量前，对a赋值会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">  // TDZ开始</div><div class=\"line\">  tmp = &apos;abc&apos;; \t\t\t// 报错</div><div class=\"line\">  console.log(tmp); \t// 报错</div><div class=\"line\"></div><div class=\"line\">  let tmp; // TDZ结束</div><div class=\"line\">  console.log(tmp); \t// undefined</div><div class=\"line\"></div><div class=\"line\">  tmp = 123;</div><div class=\"line\">  console.log(tmp); \t// 123</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h4><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 报错</div><div class=\"line\">function () &#123;</div><div class=\"line\">\tvar a = 3 ;\t\t// 报错</div><div class=\"line\">  \tlet a = 10;\t\t// 报错</div><div class=\"line\">  \tlet a = 1;\t\t// 报错</div><div class=\"line\">  \tif(true)&#123;</div><div class=\"line\">  \t\tlet a = 6 ;\t\t// 正确</div><div class=\"line\">  \t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"全部let变量不属于顶层变量\"><a href=\"#全部let变量不属于顶层变量\" class=\"headerlink\" title=\"全部let变量不属于顶层变量\"></a>全部let变量不属于顶层变量</h4><p>var变量也是window顶层变量，而let变量不再属于window对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 1;</div><div class=\"line\">window.a \t\t// 1</div><div class=\"line\">thiw.a \t\t\t1</div><div class=\"line\"></div><div class=\"line\">let b = 1;</div><div class=\"line\">window.b \t\t// undefined</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>let是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=0;i&lt;1;i++)&#123;</div><div class=\"line\">\tvar b = 3;</div><div class=\"line\">\tlet c = 4;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(b);\t\t\t// 输出为:3</div><div class=\"line\">console.log(c);\t\t\t// 出错</div></pre></td></tr></table></figure></p>\n<p>在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。<br>这表明，let声明的变量只在它所在的代码块有效。<br>再如下面的计数器代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [];</div><div class=\"line\">for (var i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\">  a[i] = function () &#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[6](); \t\t// 10</div></pre></td></tr></table></figure></p>\n<p>由于var声明的变量在整个作用域中都有用，所以每一次循环，新的i值都会覆盖旧值，导致输出的是最后一轮的i的值，也就是 10 。<br>如果用循环输出a<a href=\"\">i</a>，所有的值都是 10 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [];</div><div class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\">  a[i] = function () &#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[6](); \t\t// 6</div></pre></td></tr></table></figure></p>\n<p>由于let声明的变量只能在当前的代码块中都有用，所以每一次循环，相当于创建了一个新的变量i，所以每次输出的都是当前代码块中的i 。<br>如果用循环输出a<a href=\"\">i</a>，得到的就是当前的 i 。</p>\n<h4 id=\"无变量提升\"><a href=\"#无变量提升\" class=\"headerlink\" title=\"无变量提升\"></a>无变量提升</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(foo); \t\t// 输出undefined</div><div class=\"line\">console.log(bar); \t\t// 报错</div><div class=\"line\"></div><div class=\"line\">var foo = 2;</div><div class=\"line\">let bar = 2;</div></pre></td></tr></table></figure>\n<p>var变量会被提升到代码块的最前面声明，而let不会，输出的时候就会报错。</p>\n<h4 id=\"变量区域绑定\"><a href=\"#变量区域绑定\" class=\"headerlink\" title=\"变量区域绑定\"></a>变量区域绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 123;</div><div class=\"line\"></div><div class=\"line\">if (true) &#123;</div><div class=\"line\">  a = &apos;abc&apos;; \t\t// 报错</div><div class=\"line\">  let a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面声明了一个局部变量a，导致后者绑定这个块级作用域，所以在let声明变量前，对a赋值会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">  // TDZ开始</div><div class=\"line\">  tmp = &apos;abc&apos;; \t\t\t// 报错</div><div class=\"line\">  console.log(tmp); \t// 报错</div><div class=\"line\"></div><div class=\"line\">  let tmp; // TDZ结束</div><div class=\"line\">  console.log(tmp); \t// undefined</div><div class=\"line\"></div><div class=\"line\">  tmp = 123;</div><div class=\"line\">  console.log(tmp); \t// 123</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h4><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 报错</div><div class=\"line\">function () &#123;</div><div class=\"line\">\tvar a = 3 ;\t\t// 报错</div><div class=\"line\">  \tlet a = 10;\t\t// 报错</div><div class=\"line\">  \tlet a = 1;\t\t// 报错</div><div class=\"line\">  \tif(true)&#123;</div><div class=\"line\">  \t\tlet a = 6 ;\t\t// 正确</div><div class=\"line\">  \t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"全部let变量不属于顶层变量\"><a href=\"#全部let变量不属于顶层变量\" class=\"headerlink\" title=\"全部let变量不属于顶层变量\"></a>全部let变量不属于顶层变量</h4><p>var变量也是window顶层变量，而let变量不再属于window对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 1;</div><div class=\"line\">window.a \t\t// 1</div><div class=\"line\">thiw.a \t\t\t1</div><div class=\"line\"></div><div class=\"line\">let b = 1;</div><div class=\"line\">window.b \t\t// undefined</div></pre></td></tr></table></figure></p>\n"},{"title":"用css3实现png图片颜色变换","comments":1,"date":"2017-04-09T04:10:11.000Z","_content":"### 使用场景\n在项目上，时常需要对一些小图标进行颜色的修改。比如现在一张黑色的信息图标，但是项目里需要的是红色的，一般的做法是使用ps把图标颜色换成红色，如果另一个页面需要黄色的，就再做一张黄色的。。。。。。（无比麻烦）。。。。。。另一种方法就是把这个信息图标做成字体，引用进来。。。。。。（为了一个小图标要做一种字体，还不如第一种呢）。。。。。。\n\n现在这一切都将变的简单，使用css3新属性filter中的drop-shadow，即可实现对png图标变换任意颜色。\n\n### 原理\ncss3的filter有10种效果，<a style=\"color:red\" href=\"http://www.w3cplus.com/css3/ten-effects-with-css3-filter\" target=\"\" _blank=\"\">点此了解</a>。其中drop-shadow滤镜可以给元素或图片非透明区域添加投影。对于背景透明的png图标，我们只需要添加一个不模糊的投影，并对投影添加一个我们需要的颜色，然后对原图标实施平移，把投影移动原图标的位置就可以了。\n\n### 代码\nhtml：\n```\n<h3>原始图片</h3>\n<div><i class=\"ws-icon icon-mes\"></i></div>\n<h3>变色图片</h3>\n<div><i class=\"ws-icon\"><i class=\"ws-icon icon-mes\"></i></i></div>\n\n```\ncss：\n```\n.icon-mes {\n    background: url(mes.png) no-repeat center;\n}\n\n.ws-icon {\n    display: inline-block;\n    width: 26px;\n    height: 24px;\n    overflow: hidden;\n}\n\n.ws-icon > .ws-icon {\n    /* 平移：第一种 */\n    /*\n    \ttransform:translateX(-26px);\n    \tborder-right: 26px solid transparent;\n    */\n    /* 平移：第二种 */\n    width: 78px;\n    transform: translateX(-52px);\n    \n    position: relative;\n    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);\n    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);\n    cursor: pointer;\n}\n```\ncss代码里，其中最主要的就是drop-shadow(h-shadow v-shadow blur spread color)，它有五个参数，具体使用方法及兼容性，请<a style=\"color:red\" href=\"http://www.runoob.com/cssref/css3-pr-filter.html\" target=\"\" _blank=\"\">点此查看</a>。\n\n对原图标的平移这里使用了两种，第一种是使用border的透明，将原图标平移到border的位置。第二种方法，设置投影的icon宽度为原图标的3倍，然后将原图标平移到投影区域之外。\n\nhtml代码里，dom结构如果不想如此嵌套，也可以使用:after伪类来实现。如下\nhtml：\n```\n<h3>原始图片</h3>\n<div><i class=\"ws-icon icon-mes\"></i></div>\n<h3>使用:after实现</h3>\n<div><i class=\"ws-icon-af icon-mes-af\"></i></div>\n```\ncss：\n```\n.icon-mes-af:after {\n    background: url(mes.png) no-repeat center;\n}\n.ws-icon-af {\n    display: inline-block;\n    width: 26px;\n    height: 24px;\n    overflow: hidden;\n    position: relative;\n}\n.ws-icon-af:after{\n    content: \"\";\n    position: absolute;\n    height: 24px;\n    width: 78px;\n    left:0;\n    transform: translateX(-52px);\n    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);\n    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);\n}\n```\n实现的效果是相同的，dom结构更加简单。\n### 实例\n看实例，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3/css3-filter-dropshadow.html\" target=\"\" _blank=\"\">点此查看</a>。","source":"_posts/20170409.md","raw":"---\ntitle: 用css3实现png图片颜色变换\ncategories:\n  - css\ntags:\n  - css3\n  - css\ncomments: true\ndate: 2017-04-09 12:10:11\n---\n### 使用场景\n在项目上，时常需要对一些小图标进行颜色的修改。比如现在一张黑色的信息图标，但是项目里需要的是红色的，一般的做法是使用ps把图标颜色换成红色，如果另一个页面需要黄色的，就再做一张黄色的。。。。。。（无比麻烦）。。。。。。另一种方法就是把这个信息图标做成字体，引用进来。。。。。。（为了一个小图标要做一种字体，还不如第一种呢）。。。。。。\n\n现在这一切都将变的简单，使用css3新属性filter中的drop-shadow，即可实现对png图标变换任意颜色。\n\n### 原理\ncss3的filter有10种效果，<a style=\"color:red\" href=\"http://www.w3cplus.com/css3/ten-effects-with-css3-filter\" target=\"\" _blank=\"\">点此了解</a>。其中drop-shadow滤镜可以给元素或图片非透明区域添加投影。对于背景透明的png图标，我们只需要添加一个不模糊的投影，并对投影添加一个我们需要的颜色，然后对原图标实施平移，把投影移动原图标的位置就可以了。\n\n### 代码\nhtml：\n```\n<h3>原始图片</h3>\n<div><i class=\"ws-icon icon-mes\"></i></div>\n<h3>变色图片</h3>\n<div><i class=\"ws-icon\"><i class=\"ws-icon icon-mes\"></i></i></div>\n\n```\ncss：\n```\n.icon-mes {\n    background: url(mes.png) no-repeat center;\n}\n\n.ws-icon {\n    display: inline-block;\n    width: 26px;\n    height: 24px;\n    overflow: hidden;\n}\n\n.ws-icon > .ws-icon {\n    /* 平移：第一种 */\n    /*\n    \ttransform:translateX(-26px);\n    \tborder-right: 26px solid transparent;\n    */\n    /* 平移：第二种 */\n    width: 78px;\n    transform: translateX(-52px);\n    \n    position: relative;\n    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);\n    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);\n    cursor: pointer;\n}\n```\ncss代码里，其中最主要的就是drop-shadow(h-shadow v-shadow blur spread color)，它有五个参数，具体使用方法及兼容性，请<a style=\"color:red\" href=\"http://www.runoob.com/cssref/css3-pr-filter.html\" target=\"\" _blank=\"\">点此查看</a>。\n\n对原图标的平移这里使用了两种，第一种是使用border的透明，将原图标平移到border的位置。第二种方法，设置投影的icon宽度为原图标的3倍，然后将原图标平移到投影区域之外。\n\nhtml代码里，dom结构如果不想如此嵌套，也可以使用:after伪类来实现。如下\nhtml：\n```\n<h3>原始图片</h3>\n<div><i class=\"ws-icon icon-mes\"></i></div>\n<h3>使用:after实现</h3>\n<div><i class=\"ws-icon-af icon-mes-af\"></i></div>\n```\ncss：\n```\n.icon-mes-af:after {\n    background: url(mes.png) no-repeat center;\n}\n.ws-icon-af {\n    display: inline-block;\n    width: 26px;\n    height: 24px;\n    overflow: hidden;\n    position: relative;\n}\n.ws-icon-af:after{\n    content: \"\";\n    position: absolute;\n    height: 24px;\n    width: 78px;\n    left:0;\n    transform: translateX(-52px);\n    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);\n    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);\n}\n```\n实现的效果是相同的，dom结构更加简单。\n### 实例\n看实例，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3/css3-filter-dropshadow.html\" target=\"\" _blank=\"\">点此查看</a>。","slug":"20170409","published":1,"updated":"2017-04-12T02:36:04.609Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulp1000nb8fsyan7e117","content":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在项目上，时常需要对一些小图标进行颜色的修改。比如现在一张黑色的信息图标，但是项目里需要的是红色的，一般的做法是使用ps把图标颜色换成红色，如果另一个页面需要黄色的，就再做一张黄色的。。。。。。（无比麻烦）。。。。。。另一种方法就是把这个信息图标做成字体，引用进来。。。。。。（为了一个小图标要做一种字体，还不如第一种呢）。。。。。。</p>\n<p>现在这一切都将变的简单，使用css3新属性filter中的drop-shadow，即可实现对png图标变换任意颜色。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>css3的filter有10种效果，<a style=\"color:red\" href=\"http://www.w3cplus.com/css3/ten-effects-with-css3-filter\" target=\"_blank\" _blank=\"\" rel=\"external\">点此了解</a>。其中drop-shadow滤镜可以给元素或图片非透明区域添加投影。对于背景透明的png图标，我们只需要添加一个不模糊的投影，并对投影添加一个我们需要的颜色，然后对原图标实施平移，把投影移动原图标的位置就可以了。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>html：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;原始图片&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon icon-mes&quot;&gt;&lt;/i&gt;&lt;/div&gt;</div><div class=\"line\">&lt;h3&gt;变色图片&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon&quot;&gt;&lt;i class=&quot;ws-icon icon-mes&quot;&gt;&lt;/i&gt;&lt;/i&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>css：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">.icon-mes &#123;</div><div class=\"line\">    background: url(mes.png) no-repeat center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.ws-icon &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    width: 26px;</div><div class=\"line\">    height: 24px;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.ws-icon &gt; .ws-icon &#123;</div><div class=\"line\">    /* 平移：第一种 */</div><div class=\"line\">    /*</div><div class=\"line\">    \ttransform:translateX(-26px);</div><div class=\"line\">    \tborder-right: 26px solid transparent;</div><div class=\"line\">    */</div><div class=\"line\">    /* 平移：第二种 */</div><div class=\"line\">    width: 78px;</div><div class=\"line\">    transform: translateX(-52px);</div><div class=\"line\">    </div><div class=\"line\">    position: relative;</div><div class=\"line\">    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);</div><div class=\"line\">    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);</div><div class=\"line\">    cursor: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>css代码里，其中最主要的就是drop-shadow(h-shadow v-shadow blur spread color)，它有五个参数，具体使用方法及兼容性，请<a style=\"color:red\" href=\"http://www.runoob.com/cssref/css3-pr-filter.html\" target=\"_blank\" _blank=\"\" rel=\"external\">点此查看</a>。</p>\n<p>对原图标的平移这里使用了两种，第一种是使用border的透明，将原图标平移到border的位置。第二种方法，设置投影的icon宽度为原图标的3倍，然后将原图标平移到投影区域之外。</p>\n<p>html代码里，dom结构如果不想如此嵌套，也可以使用:after伪类来实现。如下<br>html：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;原始图片&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon icon-mes&quot;&gt;&lt;/i&gt;&lt;/div&gt;</div><div class=\"line\">&lt;h3&gt;使用:after实现&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon-af icon-mes-af&quot;&gt;&lt;/i&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>css：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">.icon-mes-af:after &#123;</div><div class=\"line\">    background: url(mes.png) no-repeat center;</div><div class=\"line\">&#125;</div><div class=\"line\">.ws-icon-af &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    width: 26px;</div><div class=\"line\">    height: 24px;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.ws-icon-af:after&#123;</div><div class=\"line\">    content: &quot;&quot;;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    height: 24px;</div><div class=\"line\">    width: 78px;</div><div class=\"line\">    left:0;</div><div class=\"line\">    transform: translateX(-52px);</div><div class=\"line\">    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);</div><div class=\"line\">    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现的效果是相同的，dom结构更加简单。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>看实例，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3/css3-filter-dropshadow.html\" target=\"_blank\" _blank=\"\" rel=\"external\">点此查看</a>。</p>\n","excerpt":"","more":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在项目上，时常需要对一些小图标进行颜色的修改。比如现在一张黑色的信息图标，但是项目里需要的是红色的，一般的做法是使用ps把图标颜色换成红色，如果另一个页面需要黄色的，就再做一张黄色的。。。。。。（无比麻烦）。。。。。。另一种方法就是把这个信息图标做成字体，引用进来。。。。。。（为了一个小图标要做一种字体，还不如第一种呢）。。。。。。</p>\n<p>现在这一切都将变的简单，使用css3新属性filter中的drop-shadow，即可实现对png图标变换任意颜色。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>css3的filter有10种效果，<a style=\"color:red\" href=\"http://www.w3cplus.com/css3/ten-effects-with-css3-filter\" target=\"\" _blank=\"\">点此了解</a>。其中drop-shadow滤镜可以给元素或图片非透明区域添加投影。对于背景透明的png图标，我们只需要添加一个不模糊的投影，并对投影添加一个我们需要的颜色，然后对原图标实施平移，把投影移动原图标的位置就可以了。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>html：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;原始图片&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon icon-mes&quot;&gt;&lt;/i&gt;&lt;/div&gt;</div><div class=\"line\">&lt;h3&gt;变色图片&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon&quot;&gt;&lt;i class=&quot;ws-icon icon-mes&quot;&gt;&lt;/i&gt;&lt;/i&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>css：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">.icon-mes &#123;</div><div class=\"line\">    background: url(mes.png) no-repeat center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.ws-icon &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    width: 26px;</div><div class=\"line\">    height: 24px;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.ws-icon &gt; .ws-icon &#123;</div><div class=\"line\">    /* 平移：第一种 */</div><div class=\"line\">    /*</div><div class=\"line\">    \ttransform:translateX(-26px);</div><div class=\"line\">    \tborder-right: 26px solid transparent;</div><div class=\"line\">    */</div><div class=\"line\">    /* 平移：第二种 */</div><div class=\"line\">    width: 78px;</div><div class=\"line\">    transform: translateX(-52px);</div><div class=\"line\">    </div><div class=\"line\">    position: relative;</div><div class=\"line\">    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);</div><div class=\"line\">    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);</div><div class=\"line\">    cursor: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>css代码里，其中最主要的就是drop-shadow(h-shadow v-shadow blur spread color)，它有五个参数，具体使用方法及兼容性，请<a style=\"color:red\" href=\"http://www.runoob.com/cssref/css3-pr-filter.html\" target=\"\" _blank=\"\">点此查看</a>。</p>\n<p>对原图标的平移这里使用了两种，第一种是使用border的透明，将原图标平移到border的位置。第二种方法，设置投影的icon宽度为原图标的3倍，然后将原图标平移到投影区域之外。</p>\n<p>html代码里，dom结构如果不想如此嵌套，也可以使用:after伪类来实现。如下<br>html：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;原始图片&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon icon-mes&quot;&gt;&lt;/i&gt;&lt;/div&gt;</div><div class=\"line\">&lt;h3&gt;使用:after实现&lt;/h3&gt;</div><div class=\"line\">&lt;div&gt;&lt;i class=&quot;ws-icon-af icon-mes-af&quot;&gt;&lt;/i&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>css：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">.icon-mes-af:after &#123;</div><div class=\"line\">    background: url(mes.png) no-repeat center;</div><div class=\"line\">&#125;</div><div class=\"line\">.ws-icon-af &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    width: 26px;</div><div class=\"line\">    height: 24px;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">    position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.ws-icon-af:after&#123;</div><div class=\"line\">    content: &quot;&quot;;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    height: 24px;</div><div class=\"line\">    width: 78px;</div><div class=\"line\">    left:0;</div><div class=\"line\">    transform: translateX(-52px);</div><div class=\"line\">    -webkit-filter: drop-shadow(rgba(63,136,204,.5) 26px 0);</div><div class=\"line\">    filter: drop-shadow(rgba(63,136,204,.5) 24px 0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现的效果是相同的，dom结构更加简单。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>看实例，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3/css3-filter-dropshadow.html\" target=\"\" _blank=\"\">点此查看</a>。</p>\n"},{"title":"用纯CSS3实现三角或箭头","comments":1,"date":"2017-02-15T10:28:03.000Z","_content":"### 简单介绍\n三角形、箭头在页面菜单、导航、甚至进度条上使用的非常多。\n今天在这里给出几种用css3做出来的样式\n\n### 原理\n元素的border属性，两端拐角其实是梯形连接，当元素的高与宽相等时可以明显看到四个梯形，当元素的高与宽相等且为0是，就形开了四个三角形，当设置其中一边与其它三条边不同颜色时（其它三边一般设置为透明或者同背景然），就可以看到一个三角形\n<div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00;width: 20px;height: 20px;margin-right:40px;box-sizing: content-box\"></div>\n<div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;margin-right:40px;\"></div>\n<div style=\"display:inline-block;border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;\"></div>\n\n代码分别为：\n```\n梯形：border: 20px solid blue;border-left-color: #f00; width: 20px;height: 20px;\n三角形：border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;\n三角：border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;\n```\n可以看到，只要修改border-@-color，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom\n\n### 任意的三角\n通过上面的方法可以得到一个对应方向的三角，但是可以看到三角的顶角都是90度，那么只要改变三角形的三边就可以改变角度了，在这里只需要修改对应边的长度，如下：\n<div style=\"display:inline-block;border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;\"></div>\n代码分别为：\n```\nborder: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;\n```\n可以看到，只要修改border-@，对应的宽度，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom\n\n### 使用css伪类三角\n通过 :after 伪类来实现，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">点击此处</a>演示，实现如下：\n```\n.left-ang{\n  position: relative;\n}\n.left-ang:after {\n  border: 10px solid transparent;\n  border-left: 10px solid #f00;\n  width: 0;\n  height: 0;\n  position: absolute;\n  content: ' '\n}\n```\n也可以达到相同的效果。\n\n### 实现箭头\n方法也是通过伪类：after 不过要配合：before来实现，原理就是将：after与：before形成的三角形使用margin进行平移不同的数值。<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">点击此处</a>演示，实现如下：\n```\n.left_ang{\n  position: relative;\n}\n.left_ang:after, .left_ang:before {\n  border: 10px solid transparent;\n  border-left: 10px solid #fff;\n  width: 0;\n  height: 0;\n  position: absolute;\n  top: 0;\n  right: -20px;\n  content: ' '\n}\n\n.left_ang:before {\n  border-left-color: #f00;\n  right: -21px;\n}\n```\n可以看出，将：after和：before先均向右移动20px,然后把：before重新设置成移动21px，这样就形成了1px的差值。\n\n### 实际应用\n1、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">进度条</a>\n2、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">仿对话框</a>\n\n### 注意事项\n由于IE8上不支持rgba，所以如果要兼容到IE8，那么颜色值不能设置成rgba。","source":"_posts/css-angel.md","raw":"---\ntitle: 用纯CSS3实现三角或箭头\ncategories:\n  - css\ntags:\n  - css3\n  - css\ncomments: true\ndate: 2017-02-15 18:28:03\n---\n### 简单介绍\n三角形、箭头在页面菜单、导航、甚至进度条上使用的非常多。\n今天在这里给出几种用css3做出来的样式\n\n### 原理\n元素的border属性，两端拐角其实是梯形连接，当元素的高与宽相等时可以明显看到四个梯形，当元素的高与宽相等且为0是，就形开了四个三角形，当设置其中一边与其它三条边不同颜色时（其它三边一般设置为透明或者同背景然），就可以看到一个三角形\n<div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00;width: 20px;height: 20px;margin-right:40px;box-sizing: content-box\"></div>\n<div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;margin-right:40px;\"></div>\n<div style=\"display:inline-block;border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;\"></div>\n\n代码分别为：\n```\n梯形：border: 20px solid blue;border-left-color: #f00; width: 20px;height: 20px;\n三角形：border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;\n三角：border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;\n```\n可以看到，只要修改border-@-color，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom\n\n### 任意的三角\n通过上面的方法可以得到一个对应方向的三角，但是可以看到三角的顶角都是90度，那么只要改变三角形的三边就可以改变角度了，在这里只需要修改对应边的长度，如下：\n<div style=\"display:inline-block;border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;\"></div>\n代码分别为：\n```\nborder: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;\n```\n可以看到，只要修改border-@，对应的宽度，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom\n\n### 使用css伪类三角\n通过 :after 伪类来实现，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">点击此处</a>演示，实现如下：\n```\n.left-ang{\n  position: relative;\n}\n.left-ang:after {\n  border: 10px solid transparent;\n  border-left: 10px solid #f00;\n  width: 0;\n  height: 0;\n  position: absolute;\n  content: ' '\n}\n```\n也可以达到相同的效果。\n\n### 实现箭头\n方法也是通过伪类：after 不过要配合：before来实现，原理就是将：after与：before形成的三角形使用margin进行平移不同的数值。<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">点击此处</a>演示，实现如下：\n```\n.left_ang{\n  position: relative;\n}\n.left_ang:after, .left_ang:before {\n  border: 10px solid transparent;\n  border-left: 10px solid #fff;\n  width: 0;\n  height: 0;\n  position: absolute;\n  top: 0;\n  right: -20px;\n  content: ' '\n}\n\n.left_ang:before {\n  border-left-color: #f00;\n  right: -21px;\n}\n```\n可以看出，将：after和：before先均向右移动20px,然后把：before重新设置成移动21px，这样就形成了1px的差值。\n\n### 实际应用\n1、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">进度条</a>\n2、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">仿对话框</a>\n\n### 注意事项\n由于IE8上不支持rgba，所以如果要兼容到IE8，那么颜色值不能设置成rgba。","slug":"css-angel","published":1,"updated":"2017-04-05T07:26:06.028Z","layout":"post","photos":[],"link":"","_id":"cj2h7ulp4000qb8fsbh2yrtb4","content":"<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>三角形、箭头在页面菜单、导航、甚至进度条上使用的非常多。<br>今天在这里给出几种用css3做出来的样式</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>元素的border属性，两端拐角其实是梯形连接，当元素的高与宽相等时可以明显看到四个梯形，当元素的高与宽相等且为0是，就形开了四个三角形，当设置其中一边与其它三条边不同颜色时（其它三边一般设置为透明或者同背景然），就可以看到一个三角形</p>\n<div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00;width: 20px;height: 20px;margin-right:40px;box-sizing: content-box\"></div><br><div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;margin-right:40px;\"></div><br><div style=\"display:inline-block;border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;\"></div>\n\n<p>代码分别为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">梯形：border: 20px solid blue;border-left-color: #f00; width: 20px;height: 20px;</div><div class=\"line\">三角形：border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;</div><div class=\"line\">三角：border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;</div></pre></td></tr></table></figure></p>\n<p>可以看到，只要修改border-@-color，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom</p>\n<h3 id=\"任意的三角\"><a href=\"#任意的三角\" class=\"headerlink\" title=\"任意的三角\"></a>任意的三角</h3><p>通过上面的方法可以得到一个对应方向的三角，但是可以看到三角的顶角都是90度，那么只要改变三角形的三边就可以改变角度了，在这里只需要修改对应边的长度，如下：</p>\n<p><div style=\"display:inline-block;border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;\"></div><br>代码分别为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;</div></pre></td></tr></table></figure></p>\n<p>可以看到，只要修改border-@，对应的宽度，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom</p>\n<h3 id=\"使用css伪类三角\"><a href=\"#使用css伪类三角\" class=\"headerlink\" title=\"使用css伪类三角\"></a>使用css伪类三角</h3><p>通过 :after 伪类来实现，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"_blank\" _blank=\"\" rel=\"external\">点击此处</a>演示，实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.left-ang&#123;</div><div class=\"line\">  position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.left-ang:after &#123;</div><div class=\"line\">  border: 10px solid transparent;</div><div class=\"line\">  border-left: 10px solid #f00;</div><div class=\"line\">  width: 0;</div><div class=\"line\">  height: 0;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  content: &apos; &apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以达到相同的效果。</p>\n<h3 id=\"实现箭头\"><a href=\"#实现箭头\" class=\"headerlink\" title=\"实现箭头\"></a>实现箭头</h3><p>方法也是通过伪类：after 不过要配合：before来实现，原理就是将：after与：before形成的三角形使用margin进行平移不同的数值。<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"_blank\" _blank=\"\" rel=\"external\">点击此处</a>演示，实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">.left_ang&#123;</div><div class=\"line\">  position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.left_ang:after, .left_ang:before &#123;</div><div class=\"line\">  border: 10px solid transparent;</div><div class=\"line\">  border-left: 10px solid #fff;</div><div class=\"line\">  width: 0;</div><div class=\"line\">  height: 0;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  right: -20px;</div><div class=\"line\">  content: &apos; &apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.left_ang:before &#123;</div><div class=\"line\">  border-left-color: #f00;</div><div class=\"line\">  right: -21px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，将：after和：before先均向右移动20px,然后把：before重新设置成移动21px，这样就形成了1px的差值。</p>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><p>1、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"_blank\" _blank=\"\" rel=\"external\">进度条</a><br>2、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"_blank\" _blank=\"\" rel=\"external\">仿对话框</a></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>由于IE8上不支持rgba，所以如果要兼容到IE8，那么颜色值不能设置成rgba。</p>\n","excerpt":"","more":"<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>三角形、箭头在页面菜单、导航、甚至进度条上使用的非常多。<br>今天在这里给出几种用css3做出来的样式</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>元素的border属性，两端拐角其实是梯形连接，当元素的高与宽相等时可以明显看到四个梯形，当元素的高与宽相等且为0是，就形开了四个三角形，当设置其中一边与其它三条边不同颜色时（其它三边一般设置为透明或者同背景然），就可以看到一个三角形</p>\n<div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00;width: 20px;height: 20px;margin-right:40px;box-sizing: content-box\"></div><br><div style=\"display:inline-block;border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;margin-right:40px;\"></div><br><div style=\"display:inline-block;border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;\"></div>\n\n<p>代码分别为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">梯形：border: 20px solid blue;border-left-color: #f00; width: 20px;height: 20px;</div><div class=\"line\">三角形：border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;</div><div class=\"line\">三角：border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;</div></pre></td></tr></table></figure></p>\n<p>可以看到，只要修改border-@-color，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom</p>\n<h3 id=\"任意的三角\"><a href=\"#任意的三角\" class=\"headerlink\" title=\"任意的三角\"></a>任意的三角</h3><p>通过上面的方法可以得到一个对应方向的三角，但是可以看到三角的顶角都是90度，那么只要改变三角形的三边就可以改变角度了，在这里只需要修改对应边的长度，如下：</p>\n<p><div style=\"display:inline-block;border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;\"></div><br>代码分别为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;</div></pre></td></tr></table></figure></p>\n<p>可以看到，只要修改border-@，对应的宽度，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom</p>\n<h3 id=\"使用css伪类三角\"><a href=\"#使用css伪类三角\" class=\"headerlink\" title=\"使用css伪类三角\"></a>使用css伪类三角</h3><p>通过 :after 伪类来实现，<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">点击此处</a>演示，实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.left-ang&#123;</div><div class=\"line\">  position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.left-ang:after &#123;</div><div class=\"line\">  border: 10px solid transparent;</div><div class=\"line\">  border-left: 10px solid #f00;</div><div class=\"line\">  width: 0;</div><div class=\"line\">  height: 0;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  content: &apos; &apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以达到相同的效果。</p>\n<h3 id=\"实现箭头\"><a href=\"#实现箭头\" class=\"headerlink\" title=\"实现箭头\"></a>实现箭头</h3><p>方法也是通过伪类：after 不过要配合：before来实现，原理就是将：after与：before形成的三角形使用margin进行平移不同的数值。<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">点击此处</a>演示，实现如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">.left_ang&#123;</div><div class=\"line\">  position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">.left_ang:after, .left_ang:before &#123;</div><div class=\"line\">  border: 10px solid transparent;</div><div class=\"line\">  border-left: 10px solid #fff;</div><div class=\"line\">  width: 0;</div><div class=\"line\">  height: 0;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  right: -20px;</div><div class=\"line\">  content: &apos; &apos;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.left_ang:before &#123;</div><div class=\"line\">  border-left-color: #f00;</div><div class=\"line\">  right: -21px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出，将：after和：before先均向右移动20px,然后把：before重新设置成移动21px，这样就形成了1px的差值。</p>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><p>1、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">进度条</a><br>2、<a style=\"color:red\" href=\"http://wshome.bid/main/shows/css3-arrow.html\" target=\"\" _blank=\"\">仿对话框</a></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>由于IE8上不支持rgba，所以如果要兼容到IE8，那么颜色值不能设置成rgba。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2h7ulnv0000b8fs78di6q5r","category_id":"cj2h7ulo40002b8fs3hcmuqim","_id":"cj2h7ulol000bb8fs48w22iyk"},{"post_id":"cj2h7uloe0006b8fsc8nmky61","category_id":"cj2h7ulo40002b8fs3hcmuqim","_id":"cj2h7ulot000fb8fs28de30ko"},{"post_id":"cj2h7ulo00001b8fsulywm34z","category_id":"cj2h7uloh0007b8fswz7bgzrg","_id":"cj2h7uloy000jb8fs6gw1u1ka"},{"post_id":"cj2h7ulou000gb8fsej881hig","category_id":"cj2h7uloh0007b8fswz7bgzrg","_id":"cj2h7ulp4000pb8fs8q02jo1q"},{"post_id":"cj2h7ulo70004b8fs6m7kw431","category_id":"cj2h7uloh0007b8fswz7bgzrg","_id":"cj2h7ulp8000sb8fski7gv2kn"},{"post_id":"cj2h7ulp1000nb8fsyan7e117","category_id":"cj2h7ulo40002b8fs3hcmuqim","_id":"cj2h7ulpa000vb8fst5r40c3c"},{"post_id":"cj2h7uloa0005b8fsbvnbmm57","category_id":"cj2h7uloz000lb8fs61w7g8yx","_id":"cj2h7ulpb000yb8fsoz2lzn9s"},{"post_id":"cj2h7ulp4000qb8fsbh2yrtb4","category_id":"cj2h7ulo40002b8fs3hcmuqim","_id":"cj2h7ulpc0010b8fsn5in17fz"},{"post_id":"cj2h7uloi0009b8fs8yahlf8d","category_id":"cj2h7uloz000lb8fs61w7g8yx","_id":"cj2h7ulpd0012b8fsalxztg2x"},{"post_id":"cj2h7ulom000cb8fsagvjwjyl","category_id":"cj2h7uloz000lb8fs61w7g8yx","_id":"cj2h7ulpf0015b8fs60gkdinq"},{"post_id":"cj2h7ulow000ib8fsjrs590mo","category_id":"cj2h7uloz000lb8fs61w7g8yx","_id":"cj2h7ulpg0018b8fsvmd2w5d8"}],"PostTag":[{"post_id":"cj2h7uloe0006b8fsc8nmky61","tag_id":"cj2h7ulo70003b8fsv5kifq9w","_id":"cj2h7ulol000ab8fsbdjfjg7f"},{"post_id":"cj2h7ulnv0000b8fs78di6q5r","tag_id":"cj2h7ulo70003b8fsv5kifq9w","_id":"cj2h7ulov000hb8fskp1r070b"},{"post_id":"cj2h7ulnv0000b8fs78di6q5r","tag_id":"cj2h7uloh0008b8fsypxw3y4a","_id":"cj2h7uloy000kb8fsowopt9he"},{"post_id":"cj2h7ulou000gb8fsej881hig","tag_id":"cj2h7ulos000eb8fsim2k1mss","_id":"cj2h7ulp3000ob8fs691yxda4"},{"post_id":"cj2h7ulo00001b8fsulywm34z","tag_id":"cj2h7ulos000eb8fsim2k1mss","_id":"cj2h7ulpa000ub8fswj5f3q3l"},{"post_id":"cj2h7ulo00001b8fsulywm34z","tag_id":"cj2h7ulp0000mb8fsz5m49r47","_id":"cj2h7ulpb000xb8fsydoeff8u"},{"post_id":"cj2h7ulo70004b8fs6m7kw431","tag_id":"cj2h7ulos000eb8fsim2k1mss","_id":"cj2h7ulpe0014b8fsgv3ru9cu"},{"post_id":"cj2h7ulo70004b8fs6m7kw431","tag_id":"cj2h7ulp0000mb8fsz5m49r47","_id":"cj2h7ulpf0016b8fsdhpq85mi"},{"post_id":"cj2h7uloa0005b8fsbvnbmm57","tag_id":"cj2h7ulpe0013b8fsy42t79dr","_id":"cj2h7ulph001bb8fsmwhvk287"},{"post_id":"cj2h7uloa0005b8fsbvnbmm57","tag_id":"cj2h7ulpf0017b8fs0wdxfdmb","_id":"cj2h7ulph001cb8fsoo2o2798"},{"post_id":"cj2h7uloa0005b8fsbvnbmm57","tag_id":"cj2h7ulpg0019b8fsej2b29nq","_id":"cj2h7ulpi001eb8fscqhck5ln"},{"post_id":"cj2h7uloi0009b8fs8yahlf8d","tag_id":"cj2h7ulpf0017b8fs0wdxfdmb","_id":"cj2h7ulpl001gb8fs8okplyok"},{"post_id":"cj2h7uloi0009b8fs8yahlf8d","tag_id":"cj2h7ulpe0013b8fsy42t79dr","_id":"cj2h7ulpl001hb8fs10d4twzb"},{"post_id":"cj2h7uloi0009b8fs8yahlf8d","tag_id":"cj2h7ulo70003b8fsv5kifq9w","_id":"cj2h7ulpm001jb8fsl2i286an"},{"post_id":"cj2h7ulom000cb8fsagvjwjyl","tag_id":"cj2h7ulpf0017b8fs0wdxfdmb","_id":"cj2h7ulpo001lb8fs12lhye0e"},{"post_id":"cj2h7ulom000cb8fsagvjwjyl","tag_id":"cj2h7ulpm001ib8fstmy8k690","_id":"cj2h7ulpo001mb8fs3clhx4ak"},{"post_id":"cj2h7ulow000ib8fsjrs590mo","tag_id":"cj2h7ulpf0017b8fs0wdxfdmb","_id":"cj2h7ulpq001pb8fs3p35j0tz"},{"post_id":"cj2h7ulow000ib8fsjrs590mo","tag_id":"cj2h7ulpm001ib8fstmy8k690","_id":"cj2h7ulpr001qb8fsal953tih"},{"post_id":"cj2h7ulp1000nb8fsyan7e117","tag_id":"cj2h7ulpp001ob8fsb0hdzqdi","_id":"cj2h7ulq8001sb8fsy211h0dk"},{"post_id":"cj2h7ulp1000nb8fsyan7e117","tag_id":"cj2h7ulo70003b8fsv5kifq9w","_id":"cj2h7ulq9001tb8fsi1nu8mpa"},{"post_id":"cj2h7ulp4000qb8fsbh2yrtb4","tag_id":"cj2h7ulpp001ob8fsb0hdzqdi","_id":"cj2h7ulqb001ub8fshge75fli"},{"post_id":"cj2h7ulp4000qb8fsbh2yrtb4","tag_id":"cj2h7ulo70003b8fsv5kifq9w","_id":"cj2h7ulqc001vb8fs13a1f6p3"}],"Tag":[{"name":"css","_id":"cj2h7ulo70003b8fsv5kifq9w"},{"name":"less","_id":"cj2h7uloh0008b8fsypxw3y4a"},{"name":"html5","_id":"cj2h7ulos000eb8fsim2k1mss"},{"name":"canvas","_id":"cj2h7ulp0000mb8fsz5m49r47"},{"name":"jquery","_id":"cj2h7ulpe0013b8fsy42t79dr"},{"name":"javascript","_id":"cj2h7ulpf0017b8fs0wdxfdmb"},{"name":"html","_id":"cj2h7ulpg0019b8fsej2b29nq"},{"name":"ES6","_id":"cj2h7ulpm001ib8fstmy8k690"},{"name":"css3","_id":"cj2h7ulpp001ob8fsb0hdzqdi"}]}}