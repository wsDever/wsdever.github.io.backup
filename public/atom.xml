<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  <subtitle>My GitHub Blog !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wsdever.github.io/"/>
  <updated>2017-04-05T07:26:06.028Z</updated>
  <id>http://wsdever.github.io/</id>
  
  <author>
    <name>Wu Shang</name>
    <email>809663381@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用纯CSS3实现三角或箭头</title>
    <link href="http://wsdever.github.io/2017/02/15/css-angel/"/>
    <id>http://wsdever.github.io/2017/02/15/css-angel/</id>
    <published>2017-02-15T10:28:03.000Z</published>
    <updated>2017-04-05T07:26:06.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>三角形、箭头在页面菜单、导航、甚至进度条上使用的非常多。<br>今天在这里给出几种用css3做出来的样式</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>元素的border属性，两端拐角其实是梯形连接，当元素的高与宽相等时可以明显看到四个梯形，当元素的高与宽相等且为0是，就形开了四个三角形，当设置其中一边与其它三条边不同颜色时（其它三边一般设置为透明或者同背景然），就可以看到一个三角形</p>
<div style="display:inline-block;border: 20px solid blue;border-left-color: #f00;width: 20px;height: 20px;margin-right:40px;box-sizing: content-box"></div><br><div style="display:inline-block;border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;margin-right:40px;"></div><br><div style="display:inline-block;border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;"></div>

<p>代码分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">梯形：border: 20px solid blue;border-left-color: #f00; width: 20px;height: 20px;</div><div class="line">三角形：border: 20px solid blue;border-left-color: #f00; width: 0px;height: 0px;</div><div class="line">三角：border: 20px solid transparent;border-left-color: #f00; width: 0px;height: 0px;</div></pre></td></tr></table></figure></p>
<p>可以看到，只要修改border-@-color，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom</p>
<h3 id="任意的三角"><a href="#任意的三角" class="headerlink" title="任意的三角"></a>任意的三角</h3><p>通过上面的方法可以得到一个对应方向的三角，但是可以看到三角的顶角都是90度，那么只要改变三角形的三边就可以改变角度了，在这里只需要修改对应边的长度，如下：</p>
<p><div style="display:inline-block;border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;"></div><br>代码分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border: 20px solid transparent;border-left:80px solid #f00; width: 0px;height: 0px;</div></pre></td></tr></table></figure></p>
<p>可以看到，只要修改border-@，对应的宽度，就可以得到一个对应方向的三角，@ 可以为top，left，right，bottom</p>
<h3 id="使用css伪类三角"><a href="#使用css伪类三角" class="headerlink" title="使用css伪类三角"></a>使用css伪类三角</h3><p>通过 :after 伪类来实现，<a style="color:red" href="http://wshome.bid/main/shows/css3-arrow.html" target="_blank" _blank="" rel="external">点击此处</a>演示，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.left-ang&#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.left-ang:after &#123;</div><div class="line">  border: 10px solid transparent;</div><div class="line">  border-left: 10px solid #f00;</div><div class="line">  width: 0;</div><div class="line">  height: 0;</div><div class="line">  position: absolute;</div><div class="line">  content: &apos; &apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以达到相同的效果。</p>
<h3 id="实现箭头"><a href="#实现箭头" class="headerlink" title="实现箭头"></a>实现箭头</h3><p>方法也是通过伪类：after 不过要配合：before来实现，原理就是将：after与：before形成的三角形使用margin进行平移不同的数值。<a style="color:red" href="http://wshome.bid/main/shows/css3-arrow.html" target="_blank" _blank="" rel="external">点击此处</a>演示，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.left_ang&#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.left_ang:after, .left_ang:before &#123;</div><div class="line">  border: 10px solid transparent;</div><div class="line">  border-left: 10px solid #fff;</div><div class="line">  width: 0;</div><div class="line">  height: 0;</div><div class="line">  position: absolute;</div><div class="line">  top: 0;</div><div class="line">  right: -20px;</div><div class="line">  content: &apos; &apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.left_ang:before &#123;</div><div class="line">  border-left-color: #f00;</div><div class="line">  right: -21px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出，将：after和：before先均向右移动20px,然后把：before重新设置成移动21px，这样就形成了1px的差值。</p>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>1、<a style="color:red" href="http://wshome.bid/main/shows/css3-arrow.html" target="_blank" _blank="" rel="external">进度条</a><br>2、<a style="color:red" href="http://wshome.bid/main/shows/css3-arrow.html" target="_blank" _blank="" rel="external">仿对话框</a></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于IE8上不支持rgba，所以如果要兼容到IE8，那么颜色值不能设置成rgba。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;三角形、箭头在页面菜单、导航、甚至进度条上使用的非常多。&lt;br&gt;今天在这里给出几种用css3做出来的样式&lt;/p&gt;
&lt;h3 i
    
    </summary>
    
      <category term="css" scheme="http://wsdever.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://wsdever.github.io/tags/css/"/>
    
      <category term="css3" scheme="http://wsdever.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-indexedDB 的使用</title>
    <link href="http://wsdever.github.io/2016/11/22/20161122/"/>
    <id>http://wsdever.github.io/2016/11/22/20161122/</id>
    <published>2016-11-22T06:30:42.000Z</published>
    <updated>2016-11-22T07:47:49.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>IndexedDb是html5新添加的特性，目地是使本地数据能够持久性，使用户能够在线和离线访问 Web 应用程序。关于HTML5 本地数据持久性存储，除了IndexedDb，还有 localstorage，和 sessionstrorage ，它们均支持使用一个简单的键值对来存储需要的数据，但对大量结构化数据的存储及高效检索却显的无能为力。</p>
<h3 id="异步API"><a href="#异步API" class="headerlink" title="异步API"></a>异步API</h3><p>在IndexedDB中的大部分操作并不是我们常用的“调用——返回”的模式，而是“请求——响应”的模式，<br>比如打开数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var request=window.indexedDB.open(&apos;myDB&apos;);</div></pre></td></tr></table></figure></p>
<p>它的返回值并不是一个IndexedDb对象，而是一个请求体对象–IDBOpenDBRequest，其中包含了需要的IndexedDb对象，以及三个状态处理函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">onerror： 请求失败的回调函数</div><div class="line">onsuccess：请求成功的回调函数</div><div class="line">onupgradeneeded：请求数据库版本变化的回调函数</div></pre></td></tr></table></figure></p>
<p><span style="color:red">因为是异步执行，所以请求执行完成，并不一定就能在返回的对象中获取到indexedDb对象句柄。为了避免出现错误，需要在回调中做出相应处理。</span></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><span style="color:green">说明</span>：<br>open可以打开或者创建数据库，如果调用的时候，当前数据库已经存在，则会直接打开，如果不存在就会创建。数据库创建的时候，默认版本是1，如果在open的时候有传入这个参数，那么就会修改数据库的版本号，并调用onupgradeneeded这个回调。需要说明的是，不能打开比当前版本低的数据库，会触发onerror。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">request = window.indexedDB.open(name[, version]);</div><div class="line">or</div><div class="line">request = window.indexedDB.open(name[, options])</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name：数据库的名称</div><div class="line">version：数据库的版本，可选</div><div class="line">option：包含版本及持久存储标志的对象，可选</div></pre></td></tr></table></figure></p>
<p><span style="color:green">返回值</span>：<br>一个IDBOpenDBRequest对象</p>
<p><span style="color:green">实例</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var request = window.indexedDB.open(&quot;toDoList&quot;[, 4]);</div><div class="line">or：</div><div class="line">var request = window.indexedDB.open(&quot;toDoList&quot;[, &#123;version: 4, storage: &quot;temporary&quot;&#125;]);</div></pre></td></tr></table></figure></p>
<h4 id="关闭-删除数据库"><a href="#关闭-删除数据库" class="headerlink" title="关闭/删除数据库"></a>关闭/删除数据库</h4><p><span style="color:green">说明</span>：<br>关闭数据库可以直接调用数据库IDBDatabase对象的close方法，删除数据库使用indexedDB对象的deleteDatabase，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IDBDatabase.close();</div><div class="line">indexedDB.deleteDatabase(name);</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name：包含版本及持久存储标志的对象，可选</div></pre></td></tr></table></figure></p>
<p><span style="color:green">实例</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var DBOpenRequest = window.indexedDB.open(&quot;toDoList&quot;, 4);</div><div class="line">DBOpenRequest.onerror = function(event) &#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">DBOpenRequest.onsuccess = function(event) &#123;</div><div class="line">      db = DBOpenRequest.result;</div><div class="line">      db.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据存储对象（数据表）"><a href="#数据存储对象（数据表）" class="headerlink" title="数据存储对象（数据表）"></a>数据存储对象（数据表）</h3><p><span style="color:green">说明</span>：<br>IndexedDb中的存储对象，相当于mySql中的数据表，一个数据库中可以创建多张数据表，在IndexedDb中也是一样，一个数据库中可以创建多个存储对象，称之为objectStore。</p>
<h4 id="创建objectStore（数据表）"><a href="#创建objectStore（数据表）" class="headerlink" title="创建objectStore（数据表）"></a>创建objectStore（数据表）</h4><p><span style="color:green">说明</span>：<br>使用IDBDatabase对象的createObjectStore方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBDatabase.createObjectStore(storeName [,&quot;keyPath&quot;] )</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">storeName：存储对象的名字</div><div class="line">keyPath：主健名，可选</div></pre></td></tr></table></figure></p>
<p><span style="color:green">返回值</span>：<br>返回创建出来的存储对象。</p>
<p><span style="color:green">实例</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBDatabase.createObjectStore(&apos;students&apos;,&#123;keyPath:&quot;id&quot;&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="删除objectStore（数据表）"><a href="#删除objectStore（数据表）" class="headerlink" title="删除objectStore（数据表）"></a>删除objectStore（数据表）</h4><p><span style="color:green">说明</span>：<br>使用IDBDatabase对象的deleteObjectStore方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBDatabase.deleteObjectStore(storeName)</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">storeName：要删除的存储对象</div></pre></td></tr></table></figure></p>
<h4 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h4><p><span style="color:green">说明</span>：<br>在IndexedDb中对存储对象中的数据所有操作都是基于事务的，事务提供了数据库操作的一个原子集合，对数据进行写入操作，同时也具有中止和提交工具。</p>
<p><span style="color:green">事务模式</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">模式                                描述</div><div class="line">readonly                            提供对某个对象存储的只读访问，在查询对象存储时使用。</div><div class="line">readwrite                           提供对某个对象存储的读取和写入访问权。</div><div class="line">versionchange                       提供读取和写入访问权来修改对象存储定义，或者创建一个新的对象存储。</div></pre></td></tr></table></figure></p>
<p>默认的事务模式为 readonly，可以时刻打开多个 readonly 事务，但一次只能打开一个 readwrite 事务。因此，只有在数据更新时才考虑使用 readwrite 事务，其它情况下只用 readonly 。单独的（不同时打开其它类型事务时）versionchange 事务操作一个数据库或对象存储。可以在 onupgradeneeded 事件处理函数中使用 versionchange 事务用来创建、修改或删除一个对象存储。<br><span style="color:green">创建事务</span>：<br>使用IDBDatabase中的transaction(storeName,mode)来创建事务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBDatabase.transaction(&quot;students&quot;);</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">storeName：	数据存储对象的名称，可以是多个，使用数组形式传入，此时模式不能是 readwrite</div><div class="line">mode：		事务模式，可选，不传入是使用默认值</div></pre></td></tr></table></figure></p>
<h3 id="操作数据存储对象（数据表）"><a href="#操作数据存储对象（数据表）" class="headerlink" title="操作数据存储对象（数据表）"></a>操作数据存储对象（数据表）</h3><p><span style="color:red">关于索引</span>：<br>对索引的使用使得在web端对大量数据高效检索,快速定位成为可能，这也是IndexedDb与其它html5的web存储的主要区别之一。在indexedDB中有两种索引，一种是自增长的int值；一种是keyPath，是自己指定索引列，常用的索引也是这种。</p>
<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p><span style="color:green">说明</span>：<br>使用IDBObjectStore的createIndex(objectIndexName, objectKeypath, optionalObjectParameters)来创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBObjectStore.createIndex(IndexName, Keypath, ObjectParameters)</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">indexName：要创建的索引名称</div><div class="line">Keypath：创建当前索引使用的存储对象的列记录</div><div class="line">ObjectParameters：当前索引可选的属性，为可选参数，其值可以有unique（唯一），multiEntry（可多选），locale</div></pre></td></tr></table></figure></p>
<p><span style="color:green">实例</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var store = IDBDatabase.createObjectStore(sName,&#123;&quot;keyPath&quot;:keyName&#125;);</div><div class="line">store.createIndex(&quot;nameIndex&quot;,&quot;name&quot;,&#123;unique:true&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p><span style="color:green">说明</span>：<br>使用IDBObjectStore的deleteIndex(objectIndexName)来删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBObjectStore.deleteIndex(IndexName)</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">indexName：要删除的索引名称</div></pre></td></tr></table></figure></p>
<h4 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h4><p><span style="color:green">说明</span>：<br>使用IDBObjectStore的index(objectIndexName)来获取索引IDBIndex 对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBObjectStore.index(IndexName)</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">indexName：已存在的索引名称</div><div class="line">&lt;span style=&quot;color:green&quot;&gt;返回值&lt;/span&gt;：</div><div class="line">IDBIndex对象，可以配合游标，检索数据。</div></pre></td></tr></table></figure></p>
<p><span style="color:green">实例</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getDataByIndex(dbobj,storeName)&#123;</div><div class="line">    var transaction=dbobj.transaction(storeName);</div><div class="line">    var store=transaction.objectStore(storeName);</div><div class="line">    var index = store.index(&quot;nameIndex&quot;);</div><div class="line">    index.get(&apos;张三&apos;).onsuccess=function(e)&#123;</div><div class="line">        var student=e.target.result;</div><div class="line">        console.log(student.id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span style="color:red">关于游标</span>：<br>IndexedDb的游标，有点类似数组的下标值，可以向前，向后遍历一个数组，甚至可以配合其它条件跳过一些数据。索引跟游标是分不开的，可以在建立索引的时候同时建立游标，然后就可以对数据进行遍历。</p>
<h4 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h4><p><span style="color:green">说明</span>：<br>使用IDBObjectStore的openCursor(KeyRange, Direction)来创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDBObjectStore.openCursor(KeyRange, Direction)</div></pre></td></tr></table></figure></p>
<p><span style="color:green">参数</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KeyRange：游标的范围对象，即使用该游标时只会返回指定范围内的数据记录，可选，如果不送该值，则返回所有的数据记录。</div><div class="line">Direction：游标遍历的方向，可选，如果不送该值，则默认为“next”。</div></pre></td></tr></table></figure></p>
<p>KeyRange取值，有以下四种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 只取得当前索引的值为 zhangsan 的数据</div><div class="line">IDBKeyRange.only(&quot;zhangsan&quot;);</div><div class="line">// 只取得当前索引的值大于 zhangsan，并且不包括 zhangsan 的数据</div><div class="line">IDBKeyRange.lowerBound(&quot;zhangsan&quot;, true);</div><div class="line">// 只取得当前索引的值小于 zhangsan，并且包括 zhangsan 的数据</div><div class="line">IDBKeyRange.upperBound(&quot;zhangsan&quot;, false);</div><div class="line">// 取得当前索引的值介于 zhangsan 和 lisi 之间，并且包括zhangsan，但不包括 lisi 的数据</div><div class="line">IDBKeyRange.bound(&quot;zhangsan&quot;, &quot;lisi&quot;, false, true);</div></pre></td></tr></table></figure></p>
<p>Direction取值，有以下四种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IDBCursor.NEXT                                  //顺序循环</div><div class="line">IDBCursor.NEXT_NO_DUPLICATE       				//顺序循环不重复</div><div class="line">IDBCursor.PREV                                  //倒序循环</div><div class="line">IDBCursor.PREV_NO_DUPLICATE        				//倒序循环不重复</div></pre></td></tr></table></figure></p>
<p><span style="color:green">返回值</span>：<br>返回一个IDBRequest对像，其中包含数据记录的详细情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#### 遍历</div><div class="line">类似数组中的自增或自减的操作，IndexedDb中，使用continue()，来进行游标的移动，直到没有数据返回了，返回为undefined结束。</div><div class="line"></div><div class="line">### 兼容性</div><div class="line">现在大部分支持Html5的浏览器都已支持IndexedDb，但在IE11、Edge中只是部分功能支持，Opera暂时不支持，安卓4.4以上全部支持。</div><div class="line">通常在使用IndexedDb之前可以加部分前缀：</div></pre></td></tr></table></figure></p>
<p>window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB ||window.msIndexedDB ;<br>window.IDBCursor = window.IDBCursor || window.webkitIDBCursor || window.msIDBCursor ;<br>window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction ;<br>window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange ;<br>```<br>具体可<a style="color:red" href="http://caniuse.com/#feat=indexeddb" target="_blank" _blank="" rel="external">点击此处</a>查询。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>IndexedDb是HTML5 的一个重要特性，它实现了本地数据的持久性，使用户能够在线和离线访问 Web 应用程序，也使移动应用程序更灵敏，使用的带宽更少，而且能够在低带宽场景中更高效地工作。在使用过程中，只有将索引，游标等功能相结合才能发挥出它最大的作用。</p>
<h3 id="详细实例"><a href="#详细实例" class="headerlink" title="详细实例"></a>详细实例</h3><p>可以<a href="http://wslover.byethost11.com/shows/db02/DbTest.html" style="color:red" target="_blank">点击此处</a>进行在线演示。<br>所有代码以放在github上，<a href="https://github.com/wsDever/indexedDb" style="color:red" target="_blank">点击此处</a>下载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;IndexedDb是html5新添加的特性，目地是使本地数据能够持久性，使用户能够在线和离线访问 Web 应用程序。关于HT
    
    </summary>
    
      <category term="html5" scheme="http://wsdever.github.io/categories/html5/"/>
    
    
      <category term="html5" scheme="http://wsdever.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>CSS使用table布局妙用</title>
    <link href="http://wsdever.github.io/2016/10/09/20160815/"/>
    <id>http://wsdever.github.io/2016/10/09/20160815/</id>
    <published>2016-10-09T02:07:07.000Z</published>
    <updated>2016-10-09T04:00:55.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态垂直居中"><a href="#动态垂直居中" class="headerlink" title="动态垂直居中"></a>动态垂直居中</h3><p>将父级元素设置为<code>display:table</code>,子元素设置<code>disable:table-cell;vertical-align:middle</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box-wrap&#123;</div><div class="line">	display:table;</div><div class="line">&#125;</div><div class="line">.box&#123;</div><div class="line">	disable:table-cell;</div><div class="line">	vertical-align:middle</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>演示如下：</p>
<p data-height="335" data-theme-id="0" data-slug-hash="WGzxJw" data-default-tab="css,result" data-user="wsdever" data-embed-version="2" class="codepen">See the Pen <a href="https://codepen.io/wsdever/pen/WGzxJw/" target="_blank" rel="external">css-table布局使用</a> by 小白 (<a href="http://codepen.io/wsdever" target="_blank" rel="external">@wsdever</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>


<h3 id="动态水平居中"><a href="#动态水平居中" class="headerlink" title="动态水平居中"></a>动态水平居中</h3><p>如水平导航，一般的作法是设置元素<code>display:inline-block</code>，然后设置外层无元素为<code>text-align:center</code>，这样做可以实现要求，但是导航同级的元素都会继承外层的这个属性。现在用<code>display:table</code>来实现。<br>在居中元素上设置<code>display:table;margin:auto;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.wrap&#123;</div><div class="line">	display:table;</div><div class="line">	margin:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>演示如下：</p>
<p data-height="305" data-theme-id="0" data-slug-hash="ORvXqy" data-default-tab="html,result" data-user="wsdever" data-embed-version="2" class="codepen">See the Pen <a href="https://codepen.io/wsdever/pen/ORvXqy/" target="_blank" rel="external">css-table布局-动态水平居中</a> by 小白 (<a href="http://codepen.io/wsdever" target="_blank" rel="external">@wsdever</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;动态垂直居中&quot;&gt;&lt;a href=&quot;#动态垂直居中&quot; class=&quot;headerlink&quot; title=&quot;动态垂直居中&quot;&gt;&lt;/a&gt;动态垂直居中&lt;/h3&gt;&lt;p&gt;将父级元素设置为&lt;code&gt;display:table&lt;/code&gt;,子元素设置&lt;code&gt;disable:
    
    </summary>
    
      <category term="css" scheme="http://wsdever.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://wsdever.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>ES6中const的使用</title>
    <link href="http://wsdever.github.io/2016/10/04/20161104/"/>
    <id>http://wsdever.github.io/2016/10/04/20161104/</id>
    <published>2016-10-04T02:01:18.000Z</published>
    <updated>2016-11-04T06:19:35.126Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const PI = 3.1415;</div><div class="line">PI 			// 3.1415</div><div class="line">PI = 3;		// 报错</div><div class="line"></div><div class="line">const a ;	// 报错</div><div class="line">a = 3 ;</div></pre></td></tr></table></figure></p>
<h4 id="与let相似的特点"><a href="#与let相似的特点" class="headerlink" title="与let相似的特点"></a>与let相似的特点</h4><ul>
<li><p>作用域<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  const tmp = 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tmp 			// 报错</div></pre></td></tr></table></figure>
</li>
<li><p>常量不提升<br>const命令声明的常量也是不提升，同样存在暂时性死区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  console.log(a); // 报错</div><div class="line">  const a = 5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不可重复定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = &quot;Hello!&quot;;</div><div class="line">let b = 25;</div><div class="line"></div><div class="line">// 以下两行都会报错</div><div class="line">const a = &quot;Goodbye!&quot;;</div><div class="line">const b = 30;</div></pre></td></tr></table></figure>
</li>
<li><p>常量不属于顶层变量</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h4&gt;&lt;p&gt;ES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值
    
    </summary>
    
      <category term="javascript" scheme="http://wsdever.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wsdever.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://wsdever.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6中let的使用</title>
    <link href="http://wsdever.github.io/2016/10/01/20161110/"/>
    <id>http://wsdever.github.io/2016/10/01/20161110/</id>
    <published>2016-10-01T02:01:18.000Z</published>
    <updated>2016-11-04T06:10:06.082Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>let是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;1;i++)&#123;</div><div class="line">	var b = 3;</div><div class="line">	let c = 4;</div><div class="line">&#125;</div><div class="line">console.log(b);			// 输出为:3</div><div class="line">console.log(c);			// 出错</div></pre></td></tr></table></figure></p>
<p>在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。<br>这表明，let声明的变量只在它所在的代码块有效。<br>再如下面的计数器代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); 		// 10</div></pre></td></tr></table></figure></p>
<p>由于var声明的变量在整个作用域中都有用，所以每一次循环，新的i值都会覆盖旧值，导致输出的是最后一轮的i的值，也就是 10 。<br>如果用循环输出a<a href="">i</a>，所有的值都是 10 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); 		// 6</div></pre></td></tr></table></figure></p>
<p>由于let声明的变量只能在当前的代码块中都有用，所以每一次循环，相当于创建了一个新的变量i，所以每次输出的都是当前代码块中的i 。<br>如果用循环输出a<a href="">i</a>，得到的就是当前的 i 。</p>
<h4 id="无变量提升"><a href="#无变量提升" class="headerlink" title="无变量提升"></a>无变量提升</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(foo); 		// 输出undefined</div><div class="line">console.log(bar); 		// 报错</div><div class="line"></div><div class="line">var foo = 2;</div><div class="line">let bar = 2;</div></pre></td></tr></table></figure>
<p>var变量会被提升到代码块的最前面声明，而let不会，输出的时候就会报错。</p>
<h4 id="变量区域绑定"><a href="#变量区域绑定" class="headerlink" title="变量区域绑定"></a>变量区域绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 123;</div><div class="line"></div><div class="line">if (true) &#123;</div><div class="line">  a = &apos;abc&apos;; 		// 报错</div><div class="line">  let a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面声明了一个局部变量a，导致后者绑定这个块级作用域，所以在let声明变量前，对a赋值会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  // TDZ开始</div><div class="line">  tmp = &apos;abc&apos;; 			// 报错</div><div class="line">  console.log(tmp); 	// 报错</div><div class="line"></div><div class="line">  let tmp; // TDZ结束</div><div class="line">  console.log(tmp); 	// undefined</div><div class="line"></div><div class="line">  tmp = 123;</div><div class="line">  console.log(tmp); 	// 123</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 报错</div><div class="line">function () &#123;</div><div class="line">	var a = 3 ;		// 报错</div><div class="line">  	let a = 10;		// 报错</div><div class="line">  	let a = 1;		// 报错</div><div class="line">  	if(true)&#123;</div><div class="line">  		let a = 6 ;		// 正确</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="全部let变量不属于顶层变量"><a href="#全部let变量不属于顶层变量" class="headerlink" title="全部let变量不属于顶层变量"></a>全部let变量不属于顶层变量</h4><p>var变量也是window顶层变量，而let变量不再属于window对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">window.a 		// 1</div><div class="line">thiw.a 			1</div><div class="line"></div><div class="line">let b = 1;</div><div class="line">window.b 		// undefined</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h4&gt;&lt;p&gt;let是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://wsdever.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wsdever.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://wsdever.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>html5-canvas-模仿绘制360水晶球形进度条</title>
    <link href="http://wsdever.github.io/2016/09/10/20160910/"/>
    <id>http://wsdever.github.io/2016/09/10/20160910/</id>
    <published>2016-09-10T02:07:07.000Z</published>
    <updated>2016-10-01T13:57:54.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示</p>
<p><div class="img-box"><br><img src="http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-ball.png" width="200"><br></div></p>
<h3 id="绘制过程"><a href="#绘制过程" class="headerlink" title="绘制过程"></a>绘制过程</h3><h5 id="画外边的白色圆框"><a href="#画外边的白色圆框" class="headerlink" title="画外边的白色圆框"></a>画外边的白色圆框</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.arc(250, 250, 100, 0, Math.PI * 2, false);</div><div class="line">ctx.strokeStyle = &apos;#fff&apos;;  </div><div class="line">ctx.lineWidth = &quot;10&quot;;</div></pre></td></tr></table></figure>
<h5 id="画里面的红色圆"><a href="#画里面的红色圆" class="headerlink" title="画里面的红色圆"></a>画里面的红色圆</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.arc(250, 250, 100, 0, Math.PI * 2, false);</div><div class="line">ctx.fillStyle = &quot;red&quot;;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h5 id="画下面的绿色部分"><a href="#画下面的绿色部分" class="headerlink" title="画下面的绿色部分"></a>画下面的绿色部分</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var ac =  (r - n * (2*r/10)) / r ;</div><div class="line">var ang1 = Math.asin(ac)  ;</div><div class="line">var ang2 = Math.PI - ang1 ;</div><div class="line">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class="line">var ctx = canvas.getContext(&quot;2d&quot;);</div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(250, 250, 100, ang1, ang2 , false);</div></pre></td></tr></table></figure>
<p>但这只能画出一个水平的，其中r为半径，n为当前的进度转化成 10 以内的数，比如80%，对应着 8 。<br>要画出下面波浪，还需要在下方使用一条二次贝塞尔曲线对路径进行封闭，并使用由下向上的线性渐变进行填充。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.bezierCurveTo(cx1,cy1,cx2,cy2,ex,by);</div><div class="line">var landStyle = ctx.createLinearGradient(250 ,250 + 1.2*r ,250,250 - 1.2*r);</div><div class="line">landStyle.addColorStop(0,&quot;#580&quot;);</div><div class="line">landStyle.addColorStop(1,&quot;#030&quot;);</div><div class="line">ctx.fillStyle = landStyle;</div></pre></td></tr></table></figure></p>
<h5 id="动态画进度数字"><a href="#动态画进度数字" class="headerlink" title="动态画进度数字"></a>动态画进度数字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">txt =  n * 10 + &apos;%&apos;;</div><div class="line">ctx.font=&quot;30px Verdana&quot;;</div><div class="line">ctx.lineWidth = &quot;1&quot;;</div><div class="line">ctx.clearRect(250 - 0.35*r , 250 + 1.5 * r - 30, 100, 40);</div><div class="line">ctx.fillStyle = &quot;#fff&quot; ;</div><div class="line">ctx.fillText(txt,250 - 0.35*r , 250 + 1.5*r);</div></pre></td></tr></table></figure>
<p>至此四步，一个水晶进度就画完了，自己也可以再做些美化，基本思路就是这样。重点是对贝塞尔曲线的位置计算。</p>
<h3 id="演示地址："><a href="#演示地址：" class="headerlink" title="演示地址："></a>演示地址：</h3><h3 id="GitHub地址："><a href="#GitHub地址：" class="headerlink" title="GitHub地址："></a>GitHub地址：</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;div class=
    
    </summary>
    
      <category term="html5" scheme="http://wsdever.github.io/categories/html5/"/>
    
    
      <category term="html5" scheme="http://wsdever.github.io/tags/html5/"/>
    
      <category term="canvas" scheme="http://wsdever.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Html5-canvas-绘制圆环渐变进度条</title>
    <link href="http://wsdever.github.io/2016/08/13/20160813/"/>
    <id>http://wsdever.github.io/2016/08/13/20160813/</id>
    <published>2016-08-13T07:22:05.000Z</published>
    <updated>2016-10-01T13:57:54.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>canvas的api中已提供了两种，径向和线性渐变，并没有这种环形的渐变，所以很容易画出对称渐变。但是canvas提供了使用Pattern来绘制，Pattern可以是图片等其它对像，那么这里就使用到这个api，需要使用一张环形渐变的图像来绘制非对称渐变。</p>
<h3 id="绘制对称环形渐变"><a href="#绘制对称环形渐变" class="headerlink" title="绘制对称环形渐变"></a>绘制对称环形渐变</h3><p>这里使用的（水平）线性渐变。先使用createLinearGradient创建渐变，然后使用strokeStyle进行设置，然后使用stroke绘制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class="line">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class="line">ctx.lineWidth = 5;</div><div class="line"></div><div class="line">ctx.beginPath(); </div><div class="line">ctx.moveTo(170, 120);</div><div class="line"></div><div class="line">var grd=ctx.createLinearGradient(0,0,170,0);</div><div class="line">grd.addColorStop(&quot;0&quot;,&quot;black&quot;);</div><div class="line">grd.addColorStop(&quot;0.3&quot;,&quot;magenta&quot;);</div><div class="line">grd.addColorStop(&quot;0.5&quot;,&quot;blue&quot;);</div><div class="line">grd.addColorStop(&quot;0.6&quot;,&quot;green&quot;);</div><div class="line">grd.addColorStop(&quot;0.8&quot;,&quot;yellow&quot;);</div><div class="line">grd.addColorStop(1,&quot;red&quot;);</div><div class="line"></div><div class="line">ctx.strokeStyle = grd;</div><div class="line">ctx.arc(120, 120, 50, 0 ,Math.PI*2);</div><div class="line">ctx.stroke(); // 画圆</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<div class="img-box"><br><img src="http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle2.png" width="200"><br></div>

<h3 id="绘制非对称环形渐变"><a href="#绘制非对称环形渐变" class="headerlink" title="绘制非对称环形渐变"></a>绘制非对称环形渐变</h3><p>先使用ps制作一张环形渐变的图片。实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var canvas = document.getElementById(&quot;canvas2&quot;);</div><div class="line">var ctx2 = canvas.getContext(&apos;2d&apos;);</div><div class="line">ctx2.lineWidth = 5;</div><div class="line"></div><div class="line">var img;</div><div class="line">img = new Image();</div><div class="line">img.src = &quot;./canvas.png&quot;;</div><div class="line"></div><div class="line">if (img.complete) &#123;</div><div class="line">   setImageFill();</div><div class="line">&#125; else &#123;</div><div class="line">   img.onload = setImageFill;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var newFill = null;</div><div class="line">function setImageFill() &#123;</div><div class="line">    newFill = ctx2.createPattern(img, &apos;no-repeat&apos;);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.strokeStyle = newFill;</div><div class="line">    ctx.arc(50, 50, 46, 0, Math.PI*2, false);</div><div class="line">    ctx.stroke();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p><div class="img-box"><br><img src="http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle3.png" width="200"><br></div><br>效果已经基本上出现了，下面还需要让其动起来。</p>
<h3 id="动态绘制"><a href="#动态绘制" class="headerlink" title="动态绘制"></a>动态绘制</h3><p>其实就是添加一个动态函数，在这里使用html5新添加的requestAnimationFrame，这个函数有兼容性的考虑，需要注意！这里不做处理！<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var canvas = document.getElementById(&quot;canvas2&quot;);</div><div class="line">var ctx2 = canvas.getContext(&apos;2d&apos;);</div><div class="line">ctx2.lineWidth = 5;</div><div class="line">ctx2.lineCap=&quot;round&quot;;</div><div class="line"></div><div class="line">var img;</div><div class="line">img = new Image();</div><div class="line">img.src = &quot;canvas.png&quot;;</div><div class="line"></div><div class="line">if (img.complete) &#123;</div><div class="line">       setImageFill();</div><div class="line">    &#125; else &#123;</div><div class="line">       img.onload = setImageFill;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var newFill = null;</div><div class="line">    function setImageFill() &#123;</div><div class="line">    	newFill = ctx2.createPattern(img, &apos;no-repeat&apos;);</div><div class="line">    	drawCircle(ctx2, 0,50);</div><div class="line">    &#125;</div><div class="line">    var stop = null ;</div><div class="line">    function drawCircle(ctx, x, end) &#123;</div><div class="line">        ctx.clearRect(0, 0, 300, 300);</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.strokeStyle = newFill;</div><div class="line">        if (x &lt; Math.PI*2*end/100) &#123;</div><div class="line">            x += Math.PI/100;</div><div class="line">        &#125; else &#123;</div><div class="line">             window.cancelAnimationFrame(stop)</div><div class="line">        &#125;</div><div class="line">        ctx.arc(50, 50, 46, 0, x, false);</div><div class="line">        ctx.stroke();</div><div class="line">        stop = requestAnimationFrame(function () &#123;</div><div class="line">            drawCircle(ctx, x ,end);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>其中的drawCircle第三个参数就是对应的值。<br>效果如下：</p>
<p><div class="img-box"><br><img src="http://obng7479r.bkt.clouddn.com/images/blog/other/canvas-circle4.png" width="200"><br></div></p>
<h3 id="演示地址"><a href="#演示地址" class="headerlink" title="演示地址"></a>演示地址</h3><p><a href="http://wslover.byethost11.com/canvas/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1/index2.html" target="_blank" rel="external">点击演示</a><br><a href="https://github.com/wsDever/canvas/tree/master/bar-%E5%9C%86%E7%8E%AF%E8%BF%9B%E5%BA%A6%E6%9D%A1" target="_blank" rel="external">Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。&lt;/p
    
    </summary>
    
      <category term="html5" scheme="http://wsdever.github.io/categories/html5/"/>
    
    
      <category term="html5" scheme="http://wsdever.github.io/tags/html5/"/>
    
      <category term="canvas" scheme="http://wsdever.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>less中使用css3的calc的正确写法</title>
    <link href="http://wsdever.github.io/2015/05/01/20150321/"/>
    <id>http://wsdever.github.io/2015/05/01/20150321/</id>
    <published>2015-05-01T13:17:23.000Z</published>
    <updated>2016-10-05T09:36:10.480Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。</p>
<h3 id="普通计算"><a href="#普通计算" class="headerlink" title="普通计算"></a>普通计算</h3><p>最近在写自己的网站的时候，由于对less的认识不深入，写了以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@endwidth:calc(50% - 50px);</div></pre></td></tr></table></figure></p>
<p>结果，less编译的时候把这玩意当成运算式给直接计算了，成了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@endwidth:calc(0%);</div></pre></td></tr></table></figure></p>
<p>于是，去查了一下less的用法才发现，原来是less的运算和calc的用法有重叠。所以应该把less编译这一次的计算给去掉。<br>正确写法应该是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@endwidth:calc(~&quot;50% - 50px&quot;);</div></pre></td></tr></table></figure></p>
<p>也就是在calc里面加上 ~ 。</p>
<h3 id="有变量参与计算"><a href="#有变量参与计算" class="headerlink" title="有变量参与计算"></a>有变量参与计算</h3><p>以上是可以了，担是当把 50px 换成另一个变量时，又编译出错了。也就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">left: calc(~&quot;50% + @endwidth&quot; );</div></pre></td></tr></table></figure></p>
<p>由于 ~ 能把less编译的这一次计算给去掉，而 @endwith 的值，需要计算两次，所以在去掉的时候，对@endwidth的计算不能去掉。<br>所以应该把 @endwidth 放在 ~ 的范围外面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">left: calc(~&quot;50% +&quot; @endwidth);</div></pre></td></tr></table></figure></p>
<h3 id="多变量连续计算"><a href="#多变量连续计算" class="headerlink" title="多变量连续计算"></a>多变量连续计算</h3><p>有了上面的解析，多变量计算就明白了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@gap:10px;</div><div class="line">.init(@i)</div><div class="line">&#123;</div><div class="line">    left:calc(~&quot;50% -&quot;  @gap * @i ~&quot;-&quot; (@i * 2) * 50px) ;</div><div class="line">&#125;</div><div class="line">.box&#123;</div><div class="line">	.init(2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也就是，对需要去掉一次计算的(包括计算符)，需要放在 ~ 中，而需要在less编译的时候就计算一次的变量(或者常值)，直接放在 ~ 的范围外面。<br>编译结果，在css文件中可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">	left:calc( 50% - 200px )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>calc是css3中一个非常有用的东东，但与less配合使用的时候，需要注意less编译时候的计算问题，根据需要是否需要去掉。其作法就是在不需要less编译的部分使用 ~ 包裹起来，而需要计算的则放在 ~ 的外在，特别需要注意的是运算符是否也需要包含。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。&lt;/p&gt;
&lt;h3 id=&quot;普通计算&quot;&gt;&lt;a href=&quot;#普通计算&quot; class=&quot;headerlink&quot; title=&quot;普通计算&quot;&gt;&lt;/a&gt;普通计算&lt;/h3&gt;&lt;p&gt;最近
    
    </summary>
    
      <category term="css" scheme="http://wsdever.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://wsdever.github.io/tags/css/"/>
    
      <category term="less" scheme="http://wsdever.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>Jquery无法修改input的type属性的替代解决方法</title>
    <link href="http://wsdever.github.io/2015/03/24/20150324/"/>
    <id>http://wsdever.github.io/2015/03/24/20150324/</id>
    <published>2015-03-24T02:07:07.000Z</published>
    <updated>2016-10-05T08:50:12.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；<br>当输入内容并失去焦点的时候，输入内容显示为” <strong>*</strong> ”，如果没有输入仍然显示“请输入密码”,通常做法是：</p>
<ol>
<li>使用text，隐藏域中，然后配合onkeypress、onkeyup、focus、blur等事件基本可以达到要求，此种方法比较麻烦;</li>
<li>用text和password两个输入框，模拟</li>
</ol>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>在这里主要讲讲如何用第二种方式实现。</p>
<h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><pre><code>&lt;input type=&quot;password&quot; id=&quot;input_password&quot; value=&apos;&apos; style=&quot;display:none;color:#444;&quot;/&gt;
&lt;input type=&quot;text&quot; id=&quot;showPwd&quot; value=&quot;请输入密码&quot; style=&quot;color:#c0c0c0&quot;/&gt;
</code></pre><h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><pre><code>$(&quot;#showPwd&quot;).focus(function() {
    var text_value = $(this).val();
    if(text_value == &quot;请输入密码&quot;) {
          $(&quot;#showPwd&quot;).hide();
        $(&quot;#input_password&quot;).show().focus();
       }
});
$(&quot;#input_password&quot;).blur(function() {
       var text_value = $(this).val();
    if(text_value == &quot;&quot;) {
        $(&quot;#showPwd&quot;).show();
        $(&quot;#input_password&quot;).hide();
    }
});
</code></pre><p>至此完美解决，所有浏览器都可以使用。</p>
<h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><p>也许很多人一开始想到的是用jquery的attr修改type属性值，但是测试发现在IE上会出错，如下：<br>    <code>uncaught exception type property can&#39;t be changed</code><br>查看到jQuery 1.42源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// We can&apos;t allow the type property to be changed (since it causes problems in IE)</div><div class="line">if(name === &quot;type&quot; &amp;&amp; rtype.test(elem.nodeName) &amp;&amp; elem.parentNode)&#123;</div><div class="line">	jQuery.error(&quot;type property can&apos;t be changed&quot;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>主要还是“万能”的IE浏览器禁止修改input的type属性造成的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；&lt;br&gt;当输入内容并失去焦点的时候，输入内容显
    
    </summary>
    
      <category term="javascript" scheme="http://wsdever.github.io/categories/javascript/"/>
    
    
      <category term="jquery" scheme="http://wsdever.github.io/tags/jquery/"/>
    
      <category term="javascript" scheme="http://wsdever.github.io/tags/javascript/"/>
    
      <category term="html" scheme="http://wsdever.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>前端零碎录</title>
    <link href="http://wsdever.github.io/2014/10/09/20161009/"/>
    <id>http://wsdever.github.io/2014/10/09/20161009/</id>
    <published>2014-10-09T14:52:33.000Z</published>
    <updated>2016-11-03T07:00:25.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作中一些经验总结"><a href="#工作中一些经验总结" class="headerlink" title="工作中一些经验总结"></a>工作中一些经验总结</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><ol>
<li><p>绑定事件时避免多次执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">event.preventDefault();</div><div class="line">if (event &amp;&amp; event.stopPropagation) &#123;</div><div class="line">  event.stopPropagation();</div><div class="line">&#125; else &#123;//IE浏览器</div><div class="line">  event.cancelBubble = true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>字符串与数字转换最简单方法：-0 和 + ‘ ‘</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = &apos;123.45&apos;; </div><div class="line">var b = a - 0;</div><div class="line">var c = 123 ;</div><div class="line">var d = c + &apos;&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>使checkbox与文字水平对齐：对style加上vertical-align:middle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;input style=&quot;color: red; vertical-align: middle;&quot; type=&quot;checkbox&quot; /&gt;</div><div class="line">&lt;label style=&quot;vertical-align: middle;&quot;&gt;我已阅读&lt;label /&gt;</div></pre></td></tr></table></figure>
<p>如：<input style="color: red; vertical-align: middle;" type="checkbox"> <label style="vertical-align: middle;">我已阅读<label> </label></label></p>
</li>
<li><p>div中设置文字竖直居中方法</p>
</li>
</ol>
<ul>
<li><p>单行文字居中使用line-height方法，将文本的line-height设为与容器的height相等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">height:100px; </div><div class="line">line-height:100px;</div></pre></td></tr></table></figure>
</li>
<li><p>多行文字居中使用display:table-cell再设置vertical-align进行居中对齐 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">display:table-cell; </div><div class="line">vertical-align:middle</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><ol>
<li><p>js处理绝对路径中的反斜杠方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">path.split(/\\/g)</div><div class="line">path为中文路径：E:\record\movie\2016-05-14\123.mp4</div></pre></td></tr></table></figure>
</li>
<li><p>页面禁止使用鼠标滚动缩放页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123;</div><div class="line">　　if(e.ctrlKey)&#123;</div><div class="line">　　　　e.preventDefault();</div><div class="line">　　&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>使用（主要是IE9）window.showModalDialog出现 不能执行已释放Script的代码 错误的解决方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将window.returnValue的值转化成bool或者字符串，不能为object</div></pre></td></tr></table></figure>
</li>
<li><p>jquery鼠标滚轮事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123;    </div><div class="line">	var delta = (e.originalEvent.wheelDelta &amp;&amp; (e.originalEvent.wheelDelta &gt; 0 ? 1 : -1)) ||  	// chrome &amp; ie</div><div class="line">            (e.originalEvent.detail &amp;&amp; (e.originalEvent.detail &gt; 0 ? -1 : 1));            		// firefox</div><div class="line">	if (delta &gt; 0) &#123;</div><div class="line">	    console.log(&quot;wheelup&quot;);</div><div class="line">	&#125; else if (delta &lt; 0) &#123;</div><div class="line">	    console.log(&quot;wheeldown&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">注意： jquery要使用2.0以下</div></pre></td></tr></table></figure>
</li>
<li><p>使用img做背景图片时，出现无法消除的灰色边框，处理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">添加src属性，同时设置空白图片</div><div class="line">&lt;img src=&quot;http://www.xcwljy.cn/images/pixel.gif&quot; style=&quot;background: url(&apos;../images/icon-rounded-hall.png&apos;) </div><div class="line">no-repeat;border: none;&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工作中一些经验总结&quot;&gt;&lt;a href=&quot;#工作中一些经验总结&quot; class=&quot;headerlink&quot; title=&quot;工作中一些经验总结&quot;&gt;&lt;/a&gt;工作中一些经验总结&lt;/h2&gt;&lt;h3 id=&quot;第一部分&quot;&gt;&lt;a href=&quot;#第一部分&quot; class=&quot;headerli
    
    </summary>
    
      <category term="javascript" scheme="http://wsdever.github.io/categories/javascript/"/>
    
    
      <category term="css" scheme="http://wsdever.github.io/tags/css/"/>
    
      <category term="jquery" scheme="http://wsdever.github.io/tags/jquery/"/>
    
      <category term="javascript" scheme="http://wsdever.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
