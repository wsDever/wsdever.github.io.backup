{"meta":{"title":"Hexo","subtitle":"My GitHub Blog !","description":"None","author":"Wu Shang","url":"http://wsdever.github.io"},"pages":[{"title":"resume","date":"2016-09-24T02:49:15.000Z","updated":"2016-10-01T13:57:54.797Z","comments":true,"path":"resume/index.html","permalink":"http://wsdever.github.io/resume/index.html","excerpt":"","text":""},{"title":"","date":"2016-10-01T13:57:54.797Z","updated":"2016-10-01T13:57:54.797Z","comments":false,"path":"tags/index.html","permalink":"http://wsdever.github.io/tags/index.html","excerpt":"","text":""},{"title":"webpages","date":"2016-10-01T13:57:54.798Z","updated":"2016-10-01T13:57:54.798Z","comments":false,"path":"webpages/index.html","permalink":"http://wsdever.github.io/webpages/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS使用table布局妙用","slug":"20160815","date":"2016-10-09T02:07:07.000Z","updated":"2016-10-09T04:00:55.884Z","comments":true,"path":"2016/10/09/20160815/","link":"","permalink":"http://wsdever.github.io/2016/10/09/20160815/","excerpt":"","text":"动态垂直居中将父级元素设置为display:table,子元素设置disable:table-cell;vertical-align:middle,1234567.box-wrap&#123; display:table;&#125;.box&#123; disable:table-cell; vertical-align:middle&#125; 演示如下： See the Pen css-table布局使用 by 小白 (@wsdever) on CodePen. 动态水平居中如水平导航，一般的作法是设置元素display:inline-block，然后设置外层无元素为text-align:center，这样做可以实现要求，但是导航同级的元素都会继承外层的这个属性。现在用display:table来实现。在居中元素上设置display:table;margin:auto;1234.wrap&#123; display:table; margin:auto;&#125; 演示如下： See the Pen css-table布局-动态水平居中 by 小白 (@wsdever) on CodePen.","categories":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/tags/css/"}],"keywords":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/categories/css/"}]},{"title":"ES6中const的使用","slug":"20161104","date":"2016-10-04T02:01:18.000Z","updated":"2016-11-04T06:19:35.126Z","comments":true,"path":"2016/10/04/20161104/","link":"","permalink":"http://wsdever.github.io/2016/10/04/20161104/","excerpt":"","text":"基本用法ES6中const声明一个只读的常量，一旦声明，值就不能改变，所以const一旦声明变量，就必须立即初始化，不能留到以后赋值。123456const PI = 3.1415;PI // 3.1415PI = 3; // 报错const a ; // 报错a = 3 ; 与let相似的特点 作用域const的作用域与let命令相同：只在声明所在的块级作用域内有效。 12345if (true) &#123; const tmp = 5;&#125;tmp // 报错 常量不提升const命令声明的常量也是不提升，同样存在暂时性死区 1234if (true) &#123; console.log(a); // 报错 const a = 5;&#125; 不可重复定义 123456var a = &quot;Hello!&quot;;let b = 25;// 以下两行都会报错const a = &quot;Goodbye!&quot;;const b = 30; 常量不属于顶层变量","categories":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/tags/javascript/"},{"name":"ES6","slug":"ES6","permalink":"http://wsdever.github.io/tags/ES6/"}],"keywords":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}]},{"title":"ES6中let的使用","slug":"20161110","date":"2016-10-01T02:01:18.000Z","updated":"2016-11-04T06:10:06.082Z","comments":true,"path":"2016/10/01/20161110/","link":"","permalink":"http://wsdever.github.io/2016/10/01/20161110/","excerpt":"","text":"基本用法let是ES6中新添加的命令，用来声明变量，用法类似var，但是所声明的变量，只在let命令所在的代码块内有效，如：123456for(var i=0;i&lt;1;i++)&#123; var b = 3; let c = 4;&#125;console.log(b); // 输出为:3console.log(c); // 出错 在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。再如下面的计数器代码：1234567var a = [];for (var i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 10 由于var声明的变量在整个作用域中都有用，所以每一次循环，新的i值都会覆盖旧值，导致输出的是最后一轮的i的值，也就是 10 。如果用循环输出ai，所有的值都是 10 。1234567var a = [];for (let i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 6 由于let声明的变量只能在当前的代码块中都有用，所以每一次循环，相当于创建了一个新的变量i，所以每次输出的都是当前代码块中的i 。如果用循环输出ai，得到的就是当前的 i 。 无变量提升12345console.log(foo); // 输出undefinedconsole.log(bar); // 报错var foo = 2;let bar = 2; var变量会被提升到代码块的最前面声明，而let不会，输出的时候就会报错。 变量区域绑定123456var a = 123;if (true) &#123; a = &apos;abc&apos;; // 报错 let a;&#125; 上面声明了一个局部变量a，导致后者绑定这个块级作用域，所以在let声明变量前，对a赋值会报错。总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）1234567891011if (true) &#123; // TDZ开始 tmp = &apos;abc&apos;; // 报错 console.log(tmp); // 报错 let tmp; // TDZ结束 console.log(tmp); // undefined tmp = 123; console.log(tmp); // 123&#125; 不允许重复声明let不允许在相同作用域内，重复声明同一个变量。123456789// 报错function () &#123; var a = 3 ; // 报错 let a = 10; // 报错 let a = 1; // 报错 if(true)&#123; let a = 6 ; // 正确 &#125;&#125; 全部let变量不属于顶层变量var变量也是window顶层变量，而let变量不再属于window对象。123456var a = 1;window.a // 1thiw.a 1let b = 1;window.b // undefined","categories":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/tags/javascript/"},{"name":"ES6","slug":"ES6","permalink":"http://wsdever.github.io/tags/ES6/"}],"keywords":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}]},{"title":"html5-canvas-模仿绘制360水晶球形进度条","slug":"20160910","date":"2016-09-10T02:07:07.000Z","updated":"2016-10-01T13:57:54.796Z","comments":true,"path":"2016/09/10/20160910/","link":"","permalink":"http://wsdever.github.io/2016/09/10/20160910/","excerpt":"","text":"使用场景使用html5的canvas写的一个类似360清理大师那样的球形清理进度条，如下图所示 绘制过程画外边的白色圆框123ctx.arc(250, 250, 100, 0, Math.PI * 2, false);ctx.strokeStyle = &apos;#fff&apos;; ctx.lineWidth = &quot;10&quot;; 画里面的红色圆123ctx.arc(250, 250, 100, 0, Math.PI * 2, false);ctx.fillStyle = &quot;red&quot;;ctx.fill(); 画下面的绿色部分1234567var ac = (r - n * (2*r/10)) / r ;var ang1 = Math.asin(ac) ;var ang2 = Math.PI - ang1 ;var canvas = document.getElementById(&quot;canvas&quot;);var ctx = canvas.getContext(&quot;2d&quot;);ctx.beginPath();ctx.arc(250, 250, 100, ang1, ang2 , false); 但这只能画出一个水平的，其中r为半径，n为当前的进度转化成 10 以内的数，比如80%，对应着 8 。要画出下面波浪，还需要在下方使用一条二次贝塞尔曲线对路径进行封闭，并使用由下向上的线性渐变进行填充。12345ctx.bezierCurveTo(cx1,cy1,cx2,cy2,ex,by);var landStyle = ctx.createLinearGradient(250 ,250 + 1.2*r ,250,250 - 1.2*r);landStyle.addColorStop(0,&quot;#580&quot;);landStyle.addColorStop(1,&quot;#030&quot;);ctx.fillStyle = landStyle; 动态画进度数字1234567ctx.beginPath();txt = n * 10 + &apos;%&apos;;ctx.font=&quot;30px Verdana&quot;;ctx.lineWidth = &quot;1&quot;;ctx.clearRect(250 - 0.35*r , 250 + 1.5 * r - 30, 100, 40);ctx.fillStyle = &quot;#fff&quot; ;ctx.fillText(txt,250 - 0.35*r , 250 + 1.5*r); 至此四步，一个水晶进度就画完了，自己也可以再做些美化，基本思路就是这样。重点是对贝塞尔曲线的位置计算。 演示地址：GitHub地址：","categories":[{"name":"html5","slug":"html5","permalink":"http://wsdever.github.io/categories/html5/"}],"tags":[{"name":"html5","slug":"html5","permalink":"http://wsdever.github.io/tags/html5/"},{"name":"canvas","slug":"canvas","permalink":"http://wsdever.github.io/tags/canvas/"}],"keywords":[{"name":"html5","slug":"html5","permalink":"http://wsdever.github.io/categories/html5/"}]},{"title":"Html5-canvas-绘制圆环渐变进度条","slug":"20160813","date":"2016-08-13T07:22:05.000Z","updated":"2016-10-01T13:57:54.796Z","comments":true,"path":"2016/08/13/20160813/","link":"","permalink":"http://wsdever.github.io/2016/08/13/20160813/","excerpt":"","text":"使用场景项目上要用到一个圆环形的进度条，同时随着值的不同，颜色也不同，但是找了很多，都是水平进度条，或者径向渐变，不满足需求。 思路canvas的api中已提供了两种，径向和线性渐变，并没有这种环形的渐变，所以很容易画出对称渐变。但是canvas提供了使用Pattern来绘制，Pattern可以是图片等其它对像，那么这里就使用到这个api，需要使用一张环形渐变的图像来绘制非对称渐变。 绘制对称环形渐变这里使用的（水平）线性渐变。先使用createLinearGradient创建渐变，然后使用strokeStyle进行设置，然后使用stroke绘制。123456789101112131415161718var canvas = document.getElementById(&quot;canvas&quot;);var ctx = canvas.getContext(&apos;2d&apos;);ctx.lineWidth = 5;ctx.beginPath(); ctx.moveTo(170, 120);var grd=ctx.createLinearGradient(0,0,170,0);grd.addColorStop(&quot;0&quot;,&quot;black&quot;);grd.addColorStop(&quot;0.3&quot;,&quot;magenta&quot;);grd.addColorStop(&quot;0.5&quot;,&quot;blue&quot;);grd.addColorStop(&quot;0.6&quot;,&quot;green&quot;);grd.addColorStop(&quot;0.8&quot;,&quot;yellow&quot;);grd.addColorStop(1,&quot;red&quot;);ctx.strokeStyle = grd;ctx.arc(120, 120, 50, 0 ,Math.PI*2);ctx.stroke(); // 画圆 效果如下： 绘制非对称环形渐变先使用ps制作一张环形渐变的图片。实现代码如下：12345678910111213141516171819202122var canvas = document.getElementById(&quot;canvas2&quot;);var ctx2 = canvas.getContext(&apos;2d&apos;);ctx2.lineWidth = 5;var img;img = new Image();img.src = &quot;./canvas.png&quot;;if (img.complete) &#123; setImageFill();&#125; else &#123; img.onload = setImageFill;&#125;var newFill = null;function setImageFill() &#123; newFill = ctx2.createPattern(img, &apos;no-repeat&apos;); ctx.beginPath(); ctx.strokeStyle = newFill; ctx.arc(50, 50, 46, 0, Math.PI*2, false); ctx.stroke();&#125; 效果如下： 效果已经基本上出现了，下面还需要让其动起来。 动态绘制其实就是添加一个动态函数，在这里使用html5新添加的requestAnimationFrame，这个函数有兼容性的考虑，需要注意！这里不做处理！代码如下：123456789101112131415161718192021222324252627282930313233343536var canvas = document.getElementById(&quot;canvas2&quot;);var ctx2 = canvas.getContext(&apos;2d&apos;);ctx2.lineWidth = 5;ctx2.lineCap=&quot;round&quot;;var img;img = new Image();img.src = &quot;canvas.png&quot;;if (img.complete) &#123; setImageFill(); &#125; else &#123; img.onload = setImageFill; &#125; var newFill = null; function setImageFill() &#123; newFill = ctx2.createPattern(img, &apos;no-repeat&apos;); drawCircle(ctx2, 0,50); &#125; var stop = null ; function drawCircle(ctx, x, end) &#123; ctx.clearRect(0, 0, 300, 300); ctx.beginPath(); ctx.strokeStyle = newFill; if (x &lt; Math.PI*2*end/100) &#123; x += Math.PI/100; &#125; else &#123; window.cancelAnimationFrame(stop) &#125; ctx.arc(50, 50, 46, 0, x, false); ctx.stroke(); stop = requestAnimationFrame(function () &#123; drawCircle(ctx, x ,end); &#125;); &#125; 其中的drawCircle第三个参数就是对应的值。效果如下： 演示地址点击演示Github","categories":[{"name":"html5","slug":"html5","permalink":"http://wsdever.github.io/categories/html5/"}],"tags":[{"name":"html5","slug":"html5","permalink":"http://wsdever.github.io/tags/html5/"},{"name":"canvas","slug":"canvas","permalink":"http://wsdever.github.io/tags/canvas/"}],"keywords":[{"name":"html5","slug":"html5","permalink":"http://wsdever.github.io/categories/html5/"}]},{"title":"less中使用css3的calc的正确写法","slug":"20150321","date":"2015-05-01T13:17:23.000Z","updated":"2016-10-05T09:36:10.480Z","comments":true,"path":"2015/05/01/20150321/","link":"","permalink":"http://wsdever.github.io/2015/05/01/20150321/","excerpt":"","text":"作为一个前端开发者，现在less或者scss已是不可或缺的技能。会了这个技能能节省出许多写css的时间。 普通计算最近在写自己的网站的时候，由于对less的认识不深入，写了以下代码：1@endwidth:calc(50% - 50px); 结果，less编译的时候把这玩意当成运算式给直接计算了，成了1@endwidth:calc(0%); 于是，去查了一下less的用法才发现，原来是less的运算和calc的用法有重叠。所以应该把less编译这一次的计算给去掉。正确写法应该是：1@endwidth:calc(~&quot;50% - 50px&quot;); 也就是在calc里面加上 ~ 。 有变量参与计算以上是可以了，担是当把 50px 换成另一个变量时，又编译出错了。也就是这样：1left: calc(~&quot;50% + @endwidth&quot; ); 由于 ~ 能把less编译的这一次计算给去掉，而 @endwith 的值，需要计算两次，所以在去掉的时候，对@endwidth的计算不能去掉。所以应该把 @endwidth 放在 ~ 的范围外面。1left: calc(~&quot;50% +&quot; @endwidth); 多变量连续计算有了上面的解析，多变量计算就明白了，如下：12345678@gap:10px;.init(@i)&#123; left:calc(~&quot;50% -&quot; @gap * @i ~&quot;-&quot; (@i * 2) * 50px) ;&#125;.box&#123; .init(2);&#125; 也就是，对需要去掉一次计算的(包括计算符)，需要放在 ~ 中，而需要在less编译的时候就计算一次的变量(或者常值)，直接放在 ~ 的范围外面。编译结果，在css文件中可以看到：123.box&#123; left:calc( 50% - 200px )&#125; 总结calc是css3中一个非常有用的东东，但与less配合使用的时候，需要注意less编译时候的计算问题，根据需要是否需要去掉。其作法就是在不需要less编译的部分使用 ~ 包裹起来，而需要计算的则放在 ~ 的外在，特别需要注意的是运算符是否也需要包含。","categories":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/tags/css/"},{"name":"less","slug":"less","permalink":"http://wsdever.github.io/tags/less/"}],"keywords":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/categories/css/"}]},{"title":"Jquery无法修改input的type属性的替代解决方法","slug":"20150324","date":"2015-03-24T02:07:07.000Z","updated":"2016-10-05T08:50:12.554Z","comments":true,"path":"2015/03/24/20150324/","link":"","permalink":"http://wsdever.github.io/2015/03/24/20150324/","excerpt":"","text":"使用场景需要实现的效果：一个输入框，当输入框未获得焦点的时候，显示为 “请输入密码”；当输入内容并失去焦点的时候，输入内容显示为” * ”，如果没有输入仍然显示“请输入密码”,通常做法是： 使用text，隐藏域中，然后配合onkeypress、onkeyup、focus、blur等事件基本可以达到要求，此种方法比较麻烦; 用text和password两个输入框，模拟 实现方法在这里主要讲讲如何用第二种方式实现。 html代码&lt;input type=&quot;password&quot; id=&quot;input_password&quot; value=&apos;&apos; style=&quot;display:none;color:#444;&quot;/&gt; &lt;input type=&quot;text&quot; id=&quot;showPwd&quot; value=&quot;请输入密码&quot; style=&quot;color:#c0c0c0&quot;/&gt; js代码$(&quot;#showPwd&quot;).focus(function() { var text_value = $(this).val(); if(text_value == &quot;请输入密码&quot;) { $(&quot;#showPwd&quot;).hide(); $(&quot;#input_password&quot;).show().focus(); } }); $(&quot;#input_password&quot;).blur(function() { var text_value = $(this).val(); if(text_value == &quot;&quot;) { $(&quot;#showPwd&quot;).show(); $(&quot;#input_password&quot;).hide(); } }); 至此完美解决，所有浏览器都可以使用。 扩展内容也许很多人一开始想到的是用jquery的attr修改type属性值，但是测试发现在IE上会出错，如下： uncaught exception type property can&#39;t be changed查看到jQuery 1.42源码：1234// We can&apos;t allow the type property to be changed (since it causes problems in IE)if(name === &quot;type&quot; &amp;&amp; rtype.test(elem.nodeName) &amp;&amp; elem.parentNode)&#123; jQuery.error(&quot;type property can&apos;t be changed&quot;);&#125;; 主要还是“万能”的IE浏览器禁止修改input的type属性造成的。","categories":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}],"tags":[{"name":"jquery","slug":"jquery","permalink":"http://wsdever.github.io/tags/jquery/"},{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/tags/javascript/"},{"name":"html","slug":"html","permalink":"http://wsdever.github.io/tags/html/"}],"keywords":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}]},{"title":"前端零碎录","slug":"20161009","date":"2014-10-09T14:52:33.000Z","updated":"2016-11-03T07:00:25.285Z","comments":true,"path":"2014/10/09/20161009/","link":"","permalink":"http://wsdever.github.io/2014/10/09/20161009/","excerpt":"","text":"工作中一些经验总结第一部分 绑定事件时避免多次执行 123456event.preventDefault();if (event &amp;&amp; event.stopPropagation) &#123; event.stopPropagation();&#125; else &#123;//IE浏览器 event.cancelBubble = true;&#125; 字符串与数字转换最简单方法：-0 和 + ‘ ‘ 1234var a = &apos;123.45&apos;; var b = a - 0;var c = 123 ;var d = c + &apos;&apos;; 使checkbox与文字水平对齐：对style加上vertical-align:middle 12&lt;input style=&quot;color: red; vertical-align: middle;&quot; type=&quot;checkbox&quot; /&gt;&lt;label style=&quot;vertical-align: middle;&quot;&gt;我已阅读&lt;label /&gt; 如： 我已阅读 div中设置文字竖直居中方法 单行文字居中使用line-height方法，将文本的line-height设为与容器的height相等 12height:100px; line-height:100px; 多行文字居中使用display:table-cell再设置vertical-align进行居中对齐 12display:table-cell; vertical-align:middle 第二部分 js处理绝对路径中的反斜杠方法 12path.split(/\\\\/g)path为中文路径：E:\\record\\movie\\2016-05-14\\123.mp4 页面禁止使用鼠标滚动缩放页面 12345$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123; if(e.ctrlKey)&#123; e.preventDefault(); &#125;&#125;) 使用（主要是IE9）window.showModalDialog出现 不能执行已释放Script的代码 错误的解决方法 1将window.returnValue的值转化成bool或者字符串，不能为object jquery鼠标滚轮事件 12345678910$(document).on(&quot;mousewheel DOMMouseScroll&quot;, function (e) &#123; var delta = (e.originalEvent.wheelDelta &amp;&amp; (e.originalEvent.wheelDelta &gt; 0 ? 1 : -1)) || // chrome &amp; ie (e.originalEvent.detail &amp;&amp; (e.originalEvent.detail &gt; 0 ? -1 : 1)); // firefox if (delta &gt; 0) &#123; console.log(&quot;wheelup&quot;); &#125; else if (delta &lt; 0) &#123; console.log(&quot;wheeldown&quot;); &#125;&#125;);注意： jquery要使用2.0以下 使用img做背景图片时，出现无法消除的灰色边框，处理方法 123添加src属性，同时设置空白图片&lt;img src=&quot;http://www.xcwljy.cn/images/pixel.gif&quot; style=&quot;background: url(&apos;../images/icon-rounded-hall.png&apos;) no-repeat;border: none;&quot; /&gt; 未完待续…","categories":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}],"tags":[{"name":"css","slug":"css","permalink":"http://wsdever.github.io/tags/css/"},{"name":"jquery","slug":"jquery","permalink":"http://wsdever.github.io/tags/jquery/"},{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/tags/javascript/"}],"keywords":[{"name":"javascript","slug":"javascript","permalink":"http://wsdever.github.io/categories/javascript/"}]}]}